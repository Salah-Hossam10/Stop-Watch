
Stop_Watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00003bfa  00003c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  0080008a  0080008a  00003cb8  2**0
                  ALLOC
  3 .stab         0000336c  00000000  00000000  00003cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001362  00000000  00000000  00007024  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00008386  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000084e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00008675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000a6ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000b7bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000c740  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000c8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000cb82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d410  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 e3 13 	jmp	0x27c6	; 0x27c6 <__vector_10>
      2c:	0c 94 16 14 	jmp	0x282c	; 0x282c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ef       	ldi	r30, 0xFA	; 250
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 38       	cpi	r26, 0x8A	; 138
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e8       	ldi	r26, 0x8A	; 138
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3a       	cpi	r26, 0xA1	; 161
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <main>
      8a:	0c 94 fb 1d 	jmp	0x3bf6	; 0x3bf6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c4 1d 	jmp	0x3b88	; 0x3b88 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e0 1d 	jmp	0x3bc0	; 0x3bc0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 cc 1d 	jmp	0x3b98	; 0x3b98 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e8 1d 	jmp	0x3bd0	; 0x3bd0 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d0 1d 	jmp	0x3ba0	; 0x3ba0 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ec 1d 	jmp	0x3bd8	; 0x3bd8 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d4 1d 	jmp	0x3ba8	; 0x3ba8 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f0 1d 	jmp	0x3be0	; 0x3be0 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <MADC_voidInit>:

#include "../include/MCAL/DIO/DIO_interface.h"


void MADC_voidInit (void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62

	//1-Select VREF= AVCC
    SET_BIT(ADMUX,ADMUX_REFS0);
     ca6:	a7 e2       	ldi	r26, 0x27	; 39
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e7 e2       	ldi	r30, 0x27	; 39
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	80 64       	ori	r24, 0x40	; 64
     cb2:	8c 93       	st	X, r24
    CLR_BIT(ADMUX,ADMUX_REFS1);
     cb4:	a7 e2       	ldi	r26, 0x27	; 39
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e7 e2       	ldi	r30, 0x27	; 39
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	8f 77       	andi	r24, 0x7F	; 127
     cc0:	8c 93       	st	X, r24
	//2-Right Adjustment
    CLR_BIT(ADMUX,ADMUX_ADLAR);
     cc2:	a7 e2       	ldi	r26, 0x27	; 39
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e7 e2       	ldi	r30, 0x27	; 39
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	8f 7d       	andi	r24, 0xDF	; 223
     cce:	8c 93       	st	X, r24
	//3-Disable Auto Trigger
    CLR_BIT(ADCSRA,ADCSRA_ADATE);
     cd0:	a6 e2       	ldi	r26, 0x26	; 38
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e6 e2       	ldi	r30, 0x26	; 38
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 7b       	andi	r24, 0xBF	; 191
     cdc:	8c 93       	st	X, r24
	//4-SELECT CLK/64
    CLR_BIT(ADCSRA,ADCSRA_ADPS0);
     cde:	a6 e2       	ldi	r26, 0x26	; 38
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e6 e2       	ldi	r30, 0x26	; 38
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	8e 7f       	andi	r24, 0xFE	; 254
     cea:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS1);
     cec:	a6 e2       	ldi	r26, 0x26	; 38
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e6 e2       	ldi	r30, 0x26	; 38
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	82 60       	ori	r24, 0x02	; 2
     cf8:	8c 93       	st	X, r24
    SET_BIT(ADCSRA,ADCSRA_ADPS2);
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	84 60       	ori	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
	//5-Enable ADC
    SET_BIT(ADCSRA,ADCSRA_ADEN);
     d08:	a6 e2       	ldi	r26, 0x26	; 38
     d0a:	b0 e0       	ldi	r27, 0x00	; 0
     d0c:	e6 e2       	ldi	r30, 0x26	; 38
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	80 81       	ld	r24, Z
     d12:	80 68       	ori	r24, 0x80	; 128
     d14:	8c 93       	st	X, r24

}
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <MADC_u16GetDigitalValue>:



u16 MADC_u16GetDigitalValue(u8 A_u8Channel)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <MADC_u16GetDigitalValue+0x6>
     d22:	0f 92       	push	r0
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	8b 83       	std	Y+3, r24	; 0x03
u16 local_u16Digaitalvalue=0;
     d2a:	1a 82       	std	Y+2, r1	; 0x02
     d2c:	19 82       	std	Y+1, r1	; 0x01
if(A_u8Channel<32)
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	80 32       	cpi	r24, 0x20	; 32
     d32:	70 f5       	brcc	.+92     	; 0xd90 <MADC_u16GetDigitalValue+0x74>
{
	//Clear The Channel 5-bits
    ADMUX&=	ADC_CHANNEL_MASK;
     d34:	a7 e2       	ldi	r26, 0x27	; 39
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e7 e2       	ldi	r30, 0x27	; 39
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	80 7e       	andi	r24, 0xE0	; 224
     d40:	8c 93       	st	X, r24
    //Select Channel
    ADMUX|=A_u8Channel;
     d42:	a7 e2       	ldi	r26, 0x27	; 39
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e7 e2       	ldi	r30, 0x27	; 39
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	90 81       	ld	r25, Z
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	89 2b       	or	r24, r25
     d50:	8c 93       	st	X, r24
    //Start Conversion
    SET_BIT(ADCSRA,ADCSRA_ADSC);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c 93       	st	X, r24
    //Polling on ADC Complete Flag
    while(GET_BIT(ADCSRA,ADCSRA_ADIF)==0);
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	a9 f3       	breq	.-22     	; 0xd60 <MADC_u16GetDigitalValue+0x44>
    //Clear INTERRUPT Flag
    SET_BIT(ADCSRA,ADCSRA_ADIF);
     d76:	a6 e2       	ldi	r26, 0x26	; 38
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e2       	ldi	r30, 0x26	; 38
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	8c 93       	st	X, r24
    //Read Conversion Values
    local_u16Digaitalvalue=ADCLH;
     d84:	e4 e2       	ldi	r30, 0x24	; 36
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	9a 83       	std	Y+2, r25	; 0x02
     d8e:	89 83       	std	Y+1, r24	; 0x01
}
//RETURN THE READEN VALUE
return local_u16Digaitalvalue;
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
}
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	cf 91       	pop	r28
     d9c:	df 91       	pop	r29
     d9e:	08 95       	ret

00000da0 <MDIO_voidInit>:
#include "../include/MCAL/DIO/DIO_interface.h"
#include "../include/MCAL/DIO/DIO_private.h"
#include "../include/MCAL/DIO/DIO_configuration.h"

void MDIO_voidInit(void)
{
     da0:	df 93       	push	r29
     da2:	cf 93       	push	r28
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
	DDRA_REG=CONC_BIT(PORTA_PIN7_DIRECTION,PORTA_PIN6_DIRECTION
     da8:	ea e3       	ldi	r30, 0x3A	; 58
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 ec       	ldi	r24, 0xC0	; 192
     dae:	80 83       	st	Z, r24
			         ,PORTA_PIN5_DIRECTION,PORTA_PIN4_DIRECTION
			         ,PORTA_PIN3_DIRECTION,PORTA_PIN2_DIRECTION
			         ,PORTA_PIN1_DIRECTION,PORTA_PIN0_DIRECTION);

	DDRB_REG=CONC_BIT(PORTB_PIN7_DIRECTION,PORTB_PIN6_DIRECTION
     db0:	e7 e3       	ldi	r30, 0x37	; 55
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	8f ef       	ldi	r24, 0xFF	; 255
     db6:	80 83       	st	Z, r24
			         ,PORTB_PIN5_DIRECTION,PORTB_PIN4_DIRECTION
			         ,PORTB_PIN3_DIRECTION,PORTB_PIN2_DIRECTION
			         ,PORTB_PIN1_DIRECTION,PORTB_PIN0_DIRECTION);

	DDRC_REG=CONC_BIT(PORTC_PIN7_DIRECTION,PORTC_PIN6_DIRECTION
     db8:	e4 e3       	ldi	r30, 0x34	; 52
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	8f ef       	ldi	r24, 0xFF	; 255
     dbe:	80 83       	st	Z, r24
			         ,PORTC_PIN5_DIRECTION,PORTC_PIN4_DIRECTION
			         ,PORTC_PIN3_DIRECTION,PORTC_PIN2_DIRECTION
			         ,PORTC_PIN1_DIRECTION,PORTC_PIN0_DIRECTION);

	DDRD_REG=CONC_BIT(PORTD_PIN7_DIRECTION,PORTD_PIN6_DIRECTION
     dc0:	e1 e3       	ldi	r30, 0x31	; 49
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	80 83       	st	Z, r24
			         ,PORTD_PIN5_DIRECTION,PORTD_PIN4_DIRECTION
			         ,PORTD_PIN3_DIRECTION,PORTD_PIN2_DIRECTION
			         ,PORTD_PIN1_DIRECTION,PORTD_PIN0_DIRECTION);

	PORTA_REG=CONC_BIT(PORTA_PIN7_VALUE,PORTA_PIN6_VALUE
     dc8:	eb e3       	ldi	r30, 0x3B	; 59
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	8f ef       	ldi	r24, 0xFF	; 255
     dce:	80 83       	st	Z, r24
			          ,PORTA_PIN5_VALUE,PORTA_PIN4_VALUE
		 	          ,PORTA_PIN3_VALUE,PORTA_PIN2_VALUE
			          ,PORTA_PIN1_VALUE,PORTA_PIN0_VALUE);

	PORTB_REG=CONC_BIT(PORTB_PIN7_VALUE,PORTB_PIN6_VALUE
     dd0:	e8 e3       	ldi	r30, 0x38	; 56
     dd2:	f0 e0       	ldi	r31, 0x00	; 0
     dd4:	10 82       	st	Z, r1
			          ,PORTB_PIN5_VALUE,PORTB_PIN4_VALUE
		 	          ,PORTB_PIN3_VALUE,PORTB_PIN2_VALUE
			          ,PORTB_PIN1_VALUE,PORTB_PIN0_VALUE);

	PORTC_REG=CONC_BIT(PORTC_PIN7_VALUE,PORTC_PIN6_VALUE
     dd6:	e5 e3       	ldi	r30, 0x35	; 53
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	10 82       	st	Z, r1
			          ,PORTC_PIN5_VALUE,PORTC_PIN4_VALUE
		 	          ,PORTC_PIN3_VALUE,PORTC_PIN2_VALUE
			          ,PORTC_PIN1_VALUE,PORTC_PIN0_VALUE);

	PORTD_REG=CONC_BIT(PORTD_PIN7_VALUE,PORTD_PIN6_VALUE
     ddc:	e2 e3       	ldi	r30, 0x32	; 50
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	8f ef       	ldi	r24, 0xFF	; 255
     de2:	80 83       	st	Z, r24
			          ,PORTD_PIN5_VALUE,PORTD_PIN4_VALUE
		 	          ,PORTD_PIN3_VALUE,PORTD_PIN2_VALUE
			          ,PORTD_PIN1_VALUE,PORTD_PIN0_VALUE);
}
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <MDIO_voidSetPinDirection>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
/*Direction OPtions:- DIO_INPUT - DIO_OUTPUT */
void MDIO_voidSetPinDirection(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Direction)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	cd b7       	in	r28, 0x3d	; 61
     df0:	de b7       	in	r29, 0x3e	; 62
     df2:	2d 97       	sbiw	r28, 0x0d	; 13
     df4:	0f b6       	in	r0, 0x3f	; 63
     df6:	f8 94       	cli
     df8:	de bf       	out	0x3e, r29	; 62
     dfa:	0f be       	out	0x3f, r0	; 63
     dfc:	cd bf       	out	0x3d, r28	; 61
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	6a 83       	std	Y+2, r22	; 0x02
     e02:	4b 83       	std	Y+3, r20	; 0x03
	switch(A_u8PortId)
     e04:	89 81       	ldd	r24, Y+1	; 0x01
     e06:	28 2f       	mov	r18, r24
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	3d 87       	std	Y+13, r19	; 0x0d
     e0c:	2c 87       	std	Y+12, r18	; 0x0c
     e0e:	8c 85       	ldd	r24, Y+12	; 0x0c
     e10:	9d 85       	ldd	r25, Y+13	; 0x0d
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	91 05       	cpc	r25, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <MDIO_voidSetPinDirection+0x30>
     e18:	4f c0       	rjmp	.+158    	; 0xeb8 <MDIO_voidSetPinDirection+0xce>
     e1a:	2c 85       	ldd	r18, Y+12	; 0x0c
     e1c:	3d 85       	ldd	r19, Y+13	; 0x0d
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	2c f4       	brge	.+10     	; 0xe2e <MDIO_voidSetPinDirection+0x44>
     e24:	8c 85       	ldd	r24, Y+12	; 0x0c
     e26:	9d 85       	ldd	r25, Y+13	; 0x0d
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	71 f0       	breq	.+28     	; 0xe48 <MDIO_voidSetPinDirection+0x5e>
     e2c:	ec c0       	rjmp	.+472    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
     e2e:	2c 85       	ldd	r18, Y+12	; 0x0c
     e30:	3d 85       	ldd	r19, Y+13	; 0x0d
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	09 f4       	brne	.+2      	; 0xe3a <MDIO_voidSetPinDirection+0x50>
     e38:	77 c0       	rjmp	.+238    	; 0xf28 <MDIO_voidSetPinDirection+0x13e>
     e3a:	8c 85       	ldd	r24, Y+12	; 0x0c
     e3c:	9d 85       	ldd	r25, Y+13	; 0x0d
     e3e:	83 30       	cpi	r24, 0x03	; 3
     e40:	91 05       	cpc	r25, r1
     e42:	09 f4       	brne	.+2      	; 0xe46 <MDIO_voidSetPinDirection+0x5c>
     e44:	a9 c0       	rjmp	.+338    	; 0xf98 <MDIO_voidSetPinDirection+0x1ae>
     e46:	df c0       	rjmp	.+446    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
	{
	case DIO_PORTA:
		{
			switch(A_u8Direction)
     e48:	8b 81       	ldd	r24, Y+3	; 0x03
     e4a:	28 2f       	mov	r18, r24
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	3b 87       	std	Y+11, r19	; 0x0b
     e50:	2a 87       	std	Y+10, r18	; 0x0a
     e52:	8a 85       	ldd	r24, Y+10	; 0x0a
     e54:	9b 85       	ldd	r25, Y+11	; 0x0b
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	31 f0       	breq	.+12     	; 0xe66 <MDIO_voidSetPinDirection+0x7c>
     e5a:	2a 85       	ldd	r18, Y+10	; 0x0a
     e5c:	3b 85       	ldd	r19, Y+11	; 0x0b
     e5e:	21 30       	cpi	r18, 0x01	; 1
     e60:	31 05       	cpc	r19, r1
     e62:	b1 f0       	breq	.+44     	; 0xe90 <MDIO_voidSetPinDirection+0xa6>
     e64:	d0 c0       	rjmp	.+416    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
			{
		case DIO_INPUT : CLR_BIT(DDRA_REG,A_u8PinId); break;
     e66:	aa e3       	ldi	r26, 0x3A	; 58
     e68:	b0 e0       	ldi	r27, 0x00	; 0
     e6a:	ea e3       	ldi	r30, 0x3A	; 58
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 81       	ld	r24, Z
     e70:	48 2f       	mov	r20, r24
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	81 e0       	ldi	r24, 0x01	; 1
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	02 2e       	mov	r0, r18
     e7e:	02 c0       	rjmp	.+4      	; 0xe84 <MDIO_voidSetPinDirection+0x9a>
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	0a 94       	dec	r0
     e86:	e2 f7       	brpl	.-8      	; 0xe80 <MDIO_voidSetPinDirection+0x96>
     e88:	80 95       	com	r24
     e8a:	84 23       	and	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	bb c0       	rjmp	.+374    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRA_REG,A_u8PinId); break;
     e90:	aa e3       	ldi	r26, 0x3A	; 58
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	ea e3       	ldi	r30, 0x3A	; 58
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <MDIO_voidSetPinDirection+0xc4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <MDIO_voidSetPinDirection+0xc0>
     eb2:	84 2b       	or	r24, r20
     eb4:	8c 93       	st	X, r24
     eb6:	a7 c0       	rjmp	.+334    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
			}
			}
		break;
	case DIO_PORTB:
	{
		switch(A_u8Direction)
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	28 2f       	mov	r18, r24
     ebc:	30 e0       	ldi	r19, 0x00	; 0
     ebe:	39 87       	std	Y+9, r19	; 0x09
     ec0:	28 87       	std	Y+8, r18	; 0x08
     ec2:	88 85       	ldd	r24, Y+8	; 0x08
     ec4:	99 85       	ldd	r25, Y+9	; 0x09
     ec6:	00 97       	sbiw	r24, 0x00	; 0
     ec8:	31 f0       	breq	.+12     	; 0xed6 <MDIO_voidSetPinDirection+0xec>
     eca:	28 85       	ldd	r18, Y+8	; 0x08
     ecc:	39 85       	ldd	r19, Y+9	; 0x09
     ece:	21 30       	cpi	r18, 0x01	; 1
     ed0:	31 05       	cpc	r19, r1
     ed2:	b1 f0       	breq	.+44     	; 0xf00 <MDIO_voidSetPinDirection+0x116>
     ed4:	98 c0       	rjmp	.+304    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRB_REG,A_u8PinId); break;
     ed6:	a7 e3       	ldi	r26, 0x37	; 55
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e7 e3       	ldi	r30, 0x37	; 55
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	48 2f       	mov	r20, r24
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	28 2f       	mov	r18, r24
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	02 2e       	mov	r0, r18
     eee:	02 c0       	rjmp	.+4      	; 0xef4 <MDIO_voidSetPinDirection+0x10a>
     ef0:	88 0f       	add	r24, r24
     ef2:	99 1f       	adc	r25, r25
     ef4:	0a 94       	dec	r0
     ef6:	e2 f7       	brpl	.-8      	; 0xef0 <MDIO_voidSetPinDirection+0x106>
     ef8:	80 95       	com	r24
     efa:	84 23       	and	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	83 c0       	rjmp	.+262    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRB_REG,A_u8PinId); break;
     f00:	a7 e3       	ldi	r26, 0x37	; 55
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e7 e3       	ldi	r30, 0x37	; 55
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8a 81       	ldd	r24, Y+2	; 0x02
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <MDIO_voidSetPinDirection+0x134>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <MDIO_voidSetPinDirection+0x130>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	6f c0       	rjmp	.+222    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		}
		}
	break;
	case DIO_PORTC:
	{
		switch(A_u8Direction)
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3f 83       	std	Y+7, r19	; 0x07
     f30:	2e 83       	std	Y+6, r18	; 0x06
     f32:	8e 81       	ldd	r24, Y+6	; 0x06
     f34:	9f 81       	ldd	r25, Y+7	; 0x07
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	31 f0       	breq	.+12     	; 0xf46 <MDIO_voidSetPinDirection+0x15c>
     f3a:	2e 81       	ldd	r18, Y+6	; 0x06
     f3c:	3f 81       	ldd	r19, Y+7	; 0x07
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	b1 f0       	breq	.+44     	; 0xf70 <MDIO_voidSetPinDirection+0x186>
     f44:	60 c0       	rjmp	.+192    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRC_REG,A_u8PinId); break;
     f46:	a4 e3       	ldi	r26, 0x34	; 52
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e4 e3       	ldi	r30, 0x34	; 52
     f4c:	f0 e0       	ldi	r31, 0x00	; 0
     f4e:	80 81       	ld	r24, Z
     f50:	48 2f       	mov	r20, r24
     f52:	8a 81       	ldd	r24, Y+2	; 0x02
     f54:	28 2f       	mov	r18, r24
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	02 2e       	mov	r0, r18
     f5e:	02 c0       	rjmp	.+4      	; 0xf64 <MDIO_voidSetPinDirection+0x17a>
     f60:	88 0f       	add	r24, r24
     f62:	99 1f       	adc	r25, r25
     f64:	0a 94       	dec	r0
     f66:	e2 f7       	brpl	.-8      	; 0xf60 <MDIO_voidSetPinDirection+0x176>
     f68:	80 95       	com	r24
     f6a:	84 23       	and	r24, r20
     f6c:	8c 93       	st	X, r24
     f6e:	4b c0       	rjmp	.+150    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRC_REG,A_u8PinId); break;
     f70:	a4 e3       	ldi	r26, 0x34	; 52
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e4 e3       	ldi	r30, 0x34	; 52
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <MDIO_voidSetPinDirection+0x1a4>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <MDIO_voidSetPinDirection+0x1a0>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	37 c0       	rjmp	.+110    	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		}
		}
	break;
	case DIO_PORTD:
	{
		switch(A_u8Direction)
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	28 2f       	mov	r18, r24
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	3d 83       	std	Y+5, r19	; 0x05
     fa0:	2c 83       	std	Y+4, r18	; 0x04
     fa2:	8c 81       	ldd	r24, Y+4	; 0x04
     fa4:	9d 81       	ldd	r25, Y+5	; 0x05
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	31 f0       	breq	.+12     	; 0xfb6 <MDIO_voidSetPinDirection+0x1cc>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	21 30       	cpi	r18, 0x01	; 1
     fb0:	31 05       	cpc	r19, r1
     fb2:	b1 f0       	breq	.+44     	; 0xfe0 <MDIO_voidSetPinDirection+0x1f6>
     fb4:	28 c0       	rjmp	.+80     	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		{
		case DIO_INPUT : CLR_BIT(DDRD_REG,A_u8PinId); break;
     fb6:	a1 e3       	ldi	r26, 0x31	; 49
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e1 e3       	ldi	r30, 0x31	; 49
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	48 2f       	mov	r20, r24
     fc2:	8a 81       	ldd	r24, Y+2	; 0x02
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	02 2e       	mov	r0, r18
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <MDIO_voidSetPinDirection+0x1ea>
     fd0:	88 0f       	add	r24, r24
     fd2:	99 1f       	adc	r25, r25
     fd4:	0a 94       	dec	r0
     fd6:	e2 f7       	brpl	.-8      	; 0xfd0 <MDIO_voidSetPinDirection+0x1e6>
     fd8:	80 95       	com	r24
     fda:	84 23       	and	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	13 c0       	rjmp	.+38     	; 0x1006 <MDIO_voidSetPinDirection+0x21c>
		case DIO_OUTPUT: SET_BIT(DDRD_REG,A_u8PinId); break;
     fe0:	a1 e3       	ldi	r26, 0x31	; 49
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e1 e3       	ldi	r30, 0x31	; 49
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <MDIO_voidSetPinDirection+0x214>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <MDIO_voidSetPinDirection+0x210>
    1002:	84 2b       	or	r24, r20
    1004:	8c 93       	st	X, r24
		}
		}
	break;
	}

}
    1006:	2d 96       	adiw	r28, 0x0d	; 13
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	f8 94       	cli
    100c:	de bf       	out	0x3e, r29	; 62
    100e:	0f be       	out	0x3f, r0	; 63
    1010:	cd bf       	out	0x3d, r28	; 61
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <MDIO_voidSetPinValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
/*Value OPtions:- DIO_HIGH - DIO_LOW - DIO_PULLUP */
void MDIO_voidSetPinValue(u8 A_u8PortId,u8 A_u8PinId,u8 A_u8Value)
{
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	2d 97       	sbiw	r28, 0x0d	; 13
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	89 83       	std	Y+1, r24	; 0x01
    102e:	6a 83       	std	Y+2, r22	; 0x02
    1030:	4b 83       	std	Y+3, r20	; 0x03
 switch(A_u8PortId)
    1032:	89 81       	ldd	r24, Y+1	; 0x01
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	3d 87       	std	Y+13, r19	; 0x0d
    103a:	2c 87       	std	Y+12, r18	; 0x0c
    103c:	8c 85       	ldd	r24, Y+12	; 0x0c
    103e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	91 05       	cpc	r25, r1
    1044:	09 f4       	brne	.+2      	; 0x1048 <MDIO_voidSetPinValue+0x30>
    1046:	4f c0       	rjmp	.+158    	; 0x10e6 <MDIO_voidSetPinValue+0xce>
    1048:	2c 85       	ldd	r18, Y+12	; 0x0c
    104a:	3d 85       	ldd	r19, Y+13	; 0x0d
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <MDIO_voidSetPinValue+0x44>
    1052:	8c 85       	ldd	r24, Y+12	; 0x0c
    1054:	9d 85       	ldd	r25, Y+13	; 0x0d
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	71 f0       	breq	.+28     	; 0x1076 <MDIO_voidSetPinValue+0x5e>
    105a:	eb c0       	rjmp	.+470    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
    105c:	2c 85       	ldd	r18, Y+12	; 0x0c
    105e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	09 f4       	brne	.+2      	; 0x1068 <MDIO_voidSetPinValue+0x50>
    1066:	77 c0       	rjmp	.+238    	; 0x1156 <MDIO_voidSetPinValue+0x13e>
    1068:	8c 85       	ldd	r24, Y+12	; 0x0c
    106a:	9d 85       	ldd	r25, Y+13	; 0x0d
    106c:	83 30       	cpi	r24, 0x03	; 3
    106e:	91 05       	cpc	r25, r1
    1070:	09 f4       	brne	.+2      	; 0x1074 <MDIO_voidSetPinValue+0x5c>
    1072:	a9 c0       	rjmp	.+338    	; 0x11c6 <MDIO_voidSetPinValue+0x1ae>
    1074:	de c0       	rjmp	.+444    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
 {
 case DIO_PORTA:
 {
	 switch(A_u8Value)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3b 87       	std	Y+11, r19	; 0x0b
    107e:	2a 87       	std	Y+10, r18	; 0x0a
    1080:	8a 85       	ldd	r24, Y+10	; 0x0a
    1082:	9b 85       	ldd	r25, Y+11	; 0x0b
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	d1 f0       	breq	.+52     	; 0x10bc <MDIO_voidSetPinValue+0xa4>
    1088:	2a 85       	ldd	r18, Y+10	; 0x0a
    108a:	3b 85       	ldd	r19, Y+11	; 0x0b
    108c:	21 30       	cpi	r18, 0x01	; 1
    108e:	31 05       	cpc	r19, r1
    1090:	09 f0       	breq	.+2      	; 0x1094 <MDIO_voidSetPinValue+0x7c>
    1092:	cf c0       	rjmp	.+414    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTA_REG,A_u8PinId); break;
    1094:	ab e3       	ldi	r26, 0x3B	; 59
    1096:	b0 e0       	ldi	r27, 0x00	; 0
    1098:	eb e3       	ldi	r30, 0x3B	; 59
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	80 81       	ld	r24, Z
    109e:	48 2f       	mov	r20, r24
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	02 2e       	mov	r0, r18
    10ac:	02 c0       	rjmp	.+4      	; 0x10b2 <MDIO_voidSetPinValue+0x9a>
    10ae:	88 0f       	add	r24, r24
    10b0:	99 1f       	adc	r25, r25
    10b2:	0a 94       	dec	r0
    10b4:	e2 f7       	brpl	.-8      	; 0x10ae <MDIO_voidSetPinValue+0x96>
    10b6:	84 2b       	or	r24, r20
    10b8:	8c 93       	st	X, r24
    10ba:	bb c0       	rjmp	.+374    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTA_REG,A_u8PinId); break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <MDIO_voidSetPinValue+0xc2>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <MDIO_voidSetPinValue+0xbe>
    10de:	80 95       	com	r24
    10e0:	84 23       	and	r24, r20
    10e2:	8c 93       	st	X, r24
    10e4:	a6 c0       	rjmp	.+332    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
 }
 break;
 case DIO_PORTB:
 {
	 switch(A_u8Value)
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	39 87       	std	Y+9, r19	; 0x09
    10ee:	28 87       	std	Y+8, r18	; 0x08
    10f0:	88 85       	ldd	r24, Y+8	; 0x08
    10f2:	99 85       	ldd	r25, Y+9	; 0x09
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	d1 f0       	breq	.+52     	; 0x112c <MDIO_voidSetPinValue+0x114>
    10f8:	28 85       	ldd	r18, Y+8	; 0x08
    10fa:	39 85       	ldd	r19, Y+9	; 0x09
    10fc:	21 30       	cpi	r18, 0x01	; 1
    10fe:	31 05       	cpc	r19, r1
    1100:	09 f0       	breq	.+2      	; 0x1104 <MDIO_voidSetPinValue+0xec>
    1102:	97 c0       	rjmp	.+302    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH : SET_BIT(PORTB_REG,A_u8PinId); break;
    1104:	a8 e3       	ldi	r26, 0x38	; 56
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e8 e3       	ldi	r30, 0x38	; 56
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	48 2f       	mov	r20, r24
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	28 2f       	mov	r18, r24
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	81 e0       	ldi	r24, 0x01	; 1
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	02 2e       	mov	r0, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <MDIO_voidSetPinValue+0x10a>
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	0a 94       	dec	r0
    1124:	e2 f7       	brpl	.-8      	; 0x111e <MDIO_voidSetPinValue+0x106>
    1126:	84 2b       	or	r24, r20
    1128:	8c 93       	st	X, r24
    112a:	83 c0       	rjmp	.+262    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW  : CLR_BIT(PORTB_REG,A_u8PinId); break;
    112c:	a8 e3       	ldi	r26, 0x38	; 56
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e8 e3       	ldi	r30, 0x38	; 56
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8a 81       	ldd	r24, Y+2	; 0x02
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <MDIO_voidSetPinValue+0x132>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <MDIO_voidSetPinValue+0x12e>
    114e:	80 95       	com	r24
    1150:	84 23       	and	r24, r20
    1152:	8c 93       	st	X, r24
    1154:	6e c0       	rjmp	.+220    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
 }
 break;
 case DIO_PORTC:
 {
	 switch(A_u8Value)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	28 2f       	mov	r18, r24
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	3f 83       	std	Y+7, r19	; 0x07
    115e:	2e 83       	std	Y+6, r18	; 0x06
    1160:	8e 81       	ldd	r24, Y+6	; 0x06
    1162:	9f 81       	ldd	r25, Y+7	; 0x07
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	d1 f0       	breq	.+52     	; 0x119c <MDIO_voidSetPinValue+0x184>
    1168:	2e 81       	ldd	r18, Y+6	; 0x06
    116a:	3f 81       	ldd	r19, Y+7	; 0x07
    116c:	21 30       	cpi	r18, 0x01	; 1
    116e:	31 05       	cpc	r19, r1
    1170:	09 f0       	breq	.+2      	; 0x1174 <MDIO_voidSetPinValue+0x15c>
    1172:	5f c0       	rjmp	.+190    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTC_REG,A_u8PinId); break;
    1174:	a5 e3       	ldi	r26, 0x35	; 53
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	02 2e       	mov	r0, r18
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <MDIO_voidSetPinValue+0x17a>
    118e:	88 0f       	add	r24, r24
    1190:	99 1f       	adc	r25, r25
    1192:	0a 94       	dec	r0
    1194:	e2 f7       	brpl	.-8      	; 0x118e <MDIO_voidSetPinValue+0x176>
    1196:	84 2b       	or	r24, r20
    1198:	8c 93       	st	X, r24
    119a:	4b c0       	rjmp	.+150    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTC_REG,A_u8PinId); break;
    119c:	a5 e3       	ldi	r26, 0x35	; 53
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e5 e3       	ldi	r30, 0x35	; 53
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	48 2f       	mov	r20, r24
    11a8:	8a 81       	ldd	r24, Y+2	; 0x02
    11aa:	28 2f       	mov	r18, r24
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	02 2e       	mov	r0, r18
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <MDIO_voidSetPinValue+0x1a2>
    11b6:	88 0f       	add	r24, r24
    11b8:	99 1f       	adc	r25, r25
    11ba:	0a 94       	dec	r0
    11bc:	e2 f7       	brpl	.-8      	; 0x11b6 <MDIO_voidSetPinValue+0x19e>
    11be:	80 95       	com	r24
    11c0:	84 23       	and	r24, r20
    11c2:	8c 93       	st	X, r24
    11c4:	36 c0       	rjmp	.+108    	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 }
	 }
 break;
 case DIO_PORTD:
 {
	 switch(A_u8Value)
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3d 83       	std	Y+5, r19	; 0x05
    11ce:	2c 83       	std	Y+4, r18	; 0x04
    11d0:	8c 81       	ldd	r24, Y+4	; 0x04
    11d2:	9d 81       	ldd	r25, Y+5	; 0x05
    11d4:	00 97       	sbiw	r24, 0x00	; 0
    11d6:	c9 f0       	breq	.+50     	; 0x120a <MDIO_voidSetPinValue+0x1f2>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	21 30       	cpi	r18, 0x01	; 1
    11de:	31 05       	cpc	r19, r1
    11e0:	41 f5       	brne	.+80     	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 {
	 case DIO_HIGH: SET_BIT(PORTD_REG,A_u8PinId); break;
    11e2:	a2 e3       	ldi	r26, 0x32	; 50
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e2 e3       	ldi	r30, 0x32	; 50
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <MDIO_voidSetPinValue+0x1e8>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <MDIO_voidSetPinValue+0x1e4>
    1204:	84 2b       	or	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	14 c0       	rjmp	.+40     	; 0x1232 <MDIO_voidSetPinValue+0x21a>
	 case DIO_LOW : CLR_BIT(PORTD_REG,A_u8PinId); break;
    120a:	a2 e3       	ldi	r26, 0x32	; 50
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e2 e3       	ldi	r30, 0x32	; 50
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <MDIO_voidSetPinValue+0x210>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <MDIO_voidSetPinValue+0x20c>
    122c:	80 95       	com	r24
    122e:	84 23       	and	r24, r20
    1230:	8c 93       	st	X, r24
	 }
	 }
 break;
}
}
    1232:	2d 96       	adiw	r28, 0x0d	; 13
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	de bf       	out	0x3e, r29	; 62
    123a:	0f be       	out	0x3f, r0	; 63
    123c:	cd bf       	out	0x3d, r28	; 61
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <MDIO_voidSetPortDirection>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*Direction OPtions:- DIO_INPUT - DIO_OUTPUT */
void MDIO_voidSetPortDirection(u8 A_u8PortId,u8 A_u8Direction)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <MDIO_voidSetPortDirection+0x6>
    124a:	00 d0       	rcall	.+0      	; 0x124c <MDIO_voidSetPortDirection+0x8>
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	89 83       	std	Y+1, r24	; 0x01
    1252:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8PortId)
    1254:	89 81       	ldd	r24, Y+1	; 0x01
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	3c 83       	std	Y+4, r19	; 0x04
    125c:	2b 83       	std	Y+3, r18	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	91 05       	cpc	r25, r1
    1266:	d1 f0       	breq	.+52     	; 0x129c <MDIO_voidSetPortDirection+0x58>
    1268:	2b 81       	ldd	r18, Y+3	; 0x03
    126a:	3c 81       	ldd	r19, Y+4	; 0x04
    126c:	22 30       	cpi	r18, 0x02	; 2
    126e:	31 05       	cpc	r19, r1
    1270:	2c f4       	brge	.+10     	; 0x127c <MDIO_voidSetPortDirection+0x38>
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	00 97       	sbiw	r24, 0x00	; 0
    1278:	61 f0       	breq	.+24     	; 0x1292 <MDIO_voidSetPortDirection+0x4e>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
    127c:	2b 81       	ldd	r18, Y+3	; 0x03
    127e:	3c 81       	ldd	r19, Y+4	; 0x04
    1280:	22 30       	cpi	r18, 0x02	; 2
    1282:	31 05       	cpc	r19, r1
    1284:	81 f0       	breq	.+32     	; 0x12a6 <MDIO_voidSetPortDirection+0x62>
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	83 30       	cpi	r24, 0x03	; 3
    128c:	91 05       	cpc	r25, r1
    128e:	81 f0       	breq	.+32     	; 0x12b0 <MDIO_voidSetPortDirection+0x6c>
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
{
case DIO_PORTA: DDRA_REG=A_u8Direction;
    1292:	ea e3       	ldi	r30, 0x3A	; 58
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8a 81       	ldd	r24, Y+2	; 0x02
    1298:	80 83       	st	Z, r24
    129a:	0e c0       	rjmp	.+28     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTB: DDRB_REG=A_u8Direction;
    129c:	e7 e3       	ldi	r30, 0x37	; 55
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	8a 81       	ldd	r24, Y+2	; 0x02
    12a2:	80 83       	st	Z, r24
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTC: DDRC_REG=A_u8Direction;
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	8a 81       	ldd	r24, Y+2	; 0x02
    12ac:	80 83       	st	Z, r24
    12ae:	04 c0       	rjmp	.+8      	; 0x12b8 <MDIO_voidSetPortDirection+0x74>
break;
case DIO_PORTD: DDRD_REG=A_u8Direction;
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	80 83       	st	Z, r24
break;
}
}
    12b8:	0f 90       	pop	r0
    12ba:	0f 90       	pop	r0
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <MDIO_voidSetPortValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*Value OPtions:- DIO_HIGH - DIO_LOW */
void MDIO_voidSetPortValue(u8 A_u8PortId,u8 A_u8Value)
{
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <MDIO_voidSetPortValue+0x6>
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <MDIO_voidSetPortValue+0x8>
    12ce:	cd b7       	in	r28, 0x3d	; 61
    12d0:	de b7       	in	r29, 0x3e	; 62
    12d2:	89 83       	std	Y+1, r24	; 0x01
    12d4:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8PortId)
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	3c 83       	std	Y+4, r19	; 0x04
    12de:	2b 83       	std	Y+3, r18	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	91 05       	cpc	r25, r1
    12e8:	d1 f0       	breq	.+52     	; 0x131e <MDIO_voidSetPortValue+0x58>
    12ea:	2b 81       	ldd	r18, Y+3	; 0x03
    12ec:	3c 81       	ldd	r19, Y+4	; 0x04
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <MDIO_voidSetPortValue+0x38>
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	61 f0       	breq	.+24     	; 0x1314 <MDIO_voidSetPortValue+0x4e>
    12fc:	1e c0       	rjmp	.+60     	; 0x133a <MDIO_voidSetPortValue+0x74>
    12fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1300:	3c 81       	ldd	r19, Y+4	; 0x04
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	81 f0       	breq	.+32     	; 0x1328 <MDIO_voidSetPortValue+0x62>
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	83 30       	cpi	r24, 0x03	; 3
    130e:	91 05       	cpc	r25, r1
    1310:	81 f0       	breq	.+32     	; 0x1332 <MDIO_voidSetPortValue+0x6c>
    1312:	13 c0       	rjmp	.+38     	; 0x133a <MDIO_voidSetPortValue+0x74>
{
case DIO_PORTA: PORTA_REG=A_u8Value;
    1314:	eb e3       	ldi	r30, 0x3B	; 59
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	80 83       	st	Z, r24
    131c:	0e c0       	rjmp	.+28     	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTB: PORTB_REG=A_u8Value;
    131e:	e8 e3       	ldi	r30, 0x38	; 56
    1320:	f0 e0       	ldi	r31, 0x00	; 0
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	80 83       	st	Z, r24
    1326:	09 c0       	rjmp	.+18     	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTC: PORTC_REG=A_u8Value;
    1328:	e5 e3       	ldi	r30, 0x35	; 53
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	80 83       	st	Z, r24
    1330:	04 c0       	rjmp	.+8      	; 0x133a <MDIO_voidSetPortValue+0x74>
break;
case DIO_PORTD: PORTD_REG=A_u8Value;
    1332:	e2 e3       	ldi	r30, 0x32	; 50
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	80 83       	st	Z, r24
break;
}
}
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	08 95       	ret

00001348 <MDIO_voidGetPinValue>:
/*PortId Options:- DIO_PORTA - DIO_PORTB - DIO_PORTC - DIO_PORTD*/
/*PinId Options:-Pin0......................................Pin7*/
u8 MDIO_voidGetPinValue(u8 A_u8PortId,u8 A_u8PinId)
{
    1348:	df 93       	push	r29
    134a:	cf 93       	push	r28
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	27 97       	sbiw	r28, 0x07	; 7
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	8a 83       	std	Y+2, r24	; 0x02
    135e:	6b 83       	std	Y+3, r22	; 0x03
u8 local_u8PinValue=255;
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8PortId)
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	3e 83       	std	Y+6, r19	; 0x06
    136c:	2d 83       	std	Y+5, r18	; 0x05
    136e:	4d 81       	ldd	r20, Y+5	; 0x05
    1370:	5e 81       	ldd	r21, Y+6	; 0x06
    1372:	41 30       	cpi	r20, 0x01	; 1
    1374:	51 05       	cpc	r21, r1
    1376:	59 f1       	breq	.+86     	; 0x13ce <MDIO_voidGetPinValue+0x86>
    1378:	8d 81       	ldd	r24, Y+5	; 0x05
    137a:	9e 81       	ldd	r25, Y+6	; 0x06
    137c:	82 30       	cpi	r24, 0x02	; 2
    137e:	91 05       	cpc	r25, r1
    1380:	34 f4       	brge	.+12     	; 0x138e <MDIO_voidGetPinValue+0x46>
    1382:	2d 81       	ldd	r18, Y+5	; 0x05
    1384:	3e 81       	ldd	r19, Y+6	; 0x06
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	69 f0       	breq	.+26     	; 0x13a6 <MDIO_voidGetPinValue+0x5e>
    138c:	5c c0       	rjmp	.+184    	; 0x1446 <MDIO_voidGetPinValue+0xfe>
    138e:	4d 81       	ldd	r20, Y+5	; 0x05
    1390:	5e 81       	ldd	r21, Y+6	; 0x06
    1392:	42 30       	cpi	r20, 0x02	; 2
    1394:	51 05       	cpc	r21, r1
    1396:	79 f1       	breq	.+94     	; 0x13f6 <MDIO_voidGetPinValue+0xae>
    1398:	8d 81       	ldd	r24, Y+5	; 0x05
    139a:	9e 81       	ldd	r25, Y+6	; 0x06
    139c:	83 30       	cpi	r24, 0x03	; 3
    139e:	91 05       	cpc	r25, r1
    13a0:	09 f4       	brne	.+2      	; 0x13a4 <MDIO_voidGetPinValue+0x5c>
    13a2:	3d c0       	rjmp	.+122    	; 0x141e <MDIO_voidGetPinValue+0xd6>
    13a4:	50 c0       	rjmp	.+160    	; 0x1446 <MDIO_voidGetPinValue+0xfe>
	{
case DIO_PORTA:
{
local_u8PinValue=GET_BIT(PINA_REG,A_u8PinId);
    13a6:	e9 e3       	ldi	r30, 0x39	; 57
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	88 2f       	mov	r24, r24
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	a9 01       	movw	r20, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <MDIO_voidGetPinValue+0x76>
    13ba:	55 95       	asr	r21
    13bc:	47 95       	ror	r20
    13be:	8a 95       	dec	r24
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <MDIO_voidGetPinValue+0x72>
    13c2:	ca 01       	movw	r24, r20
    13c4:	81 70       	andi	r24, 0x01	; 1
    13c6:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue ;
    13c8:	59 81       	ldd	r21, Y+1	; 0x01
    13ca:	5c 83       	std	Y+4, r21	; 0x04
    13cc:	3d c0       	rjmp	.+122    	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTB:
{
local_u8PinValue=GET_BIT(PINB_REG,A_u8PinId);
    13ce:	e6 e3       	ldi	r30, 0x36	; 54
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	80 81       	ld	r24, Z
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	88 2f       	mov	r24, r24
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	a9 01       	movw	r20, r18
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <MDIO_voidGetPinValue+0x9e>
    13e2:	55 95       	asr	r21
    13e4:	47 95       	ror	r20
    13e6:	8a 95       	dec	r24
    13e8:	e2 f7       	brpl	.-8      	; 0x13e2 <MDIO_voidGetPinValue+0x9a>
    13ea:	ca 01       	movw	r24, r20
    13ec:	81 70       	andi	r24, 0x01	; 1
    13ee:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    13f0:	59 81       	ldd	r21, Y+1	; 0x01
    13f2:	5c 83       	std	Y+4, r21	; 0x04
    13f4:	29 c0       	rjmp	.+82     	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTC:
{
local_u8PinValue=GET_BIT(PINC_REG,A_u8PinId);
    13f6:	e3 e3       	ldi	r30, 0x33	; 51
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	28 2f       	mov	r18, r24
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	88 2f       	mov	r24, r24
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	a9 01       	movw	r20, r18
    1408:	02 c0       	rjmp	.+4      	; 0x140e <MDIO_voidGetPinValue+0xc6>
    140a:	55 95       	asr	r21
    140c:	47 95       	ror	r20
    140e:	8a 95       	dec	r24
    1410:	e2 f7       	brpl	.-8      	; 0x140a <MDIO_voidGetPinValue+0xc2>
    1412:	ca 01       	movw	r24, r20
    1414:	81 70       	andi	r24, 0x01	; 1
    1416:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    1418:	59 81       	ldd	r21, Y+1	; 0x01
    141a:	5c 83       	std	Y+4, r21	; 0x04
    141c:	15 c0       	rjmp	.+42     	; 0x1448 <MDIO_voidGetPinValue+0x100>
        break;
}
break;
case DIO_PORTD:
{
local_u8PinValue=GET_BIT(PIND_REG,A_u8PinId);
    141e:	e0 e3       	ldi	r30, 0x30	; 48
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	80 81       	ld	r24, Z
    1424:	28 2f       	mov	r18, r24
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	88 2f       	mov	r24, r24
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	a9 01       	movw	r20, r18
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <MDIO_voidGetPinValue+0xee>
    1432:	55 95       	asr	r21
    1434:	47 95       	ror	r20
    1436:	8a 95       	dec	r24
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <MDIO_voidGetPinValue+0xea>
    143a:	ca 01       	movw	r24, r20
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01

return local_u8PinValue;
    1440:	59 81       	ldd	r21, Y+1	; 0x01
    1442:	5c 83       	std	Y+4, r21	; 0x04
    1444:	01 c0       	rjmp	.+2      	; 0x1448 <MDIO_voidGetPinValue+0x100>
    1446:	02 c0       	rjmp	.+4      	; 0x144c <MDIO_voidGetPinValue+0x104>
        break;
}
	}
}
    1448:	8c 81       	ldd	r24, Y+4	; 0x04
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	8f 81       	ldd	r24, Y+7	; 0x07
    144e:	27 96       	adiw	r28, 0x07	; 7
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <MDIO_voidTogglePinValue>:
void MDIO_voidTogglePinValue (u8 A_u8PortId, u8 A_u8PinId)
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <MDIO_voidTogglePinValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <MDIO_voidTogglePinValue+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02
	switch (A_u8PortId)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	91 05       	cpc	r25, r1
    1482:	49 f1       	breq	.+82     	; 0x14d6 <MDIO_voidTogglePinValue+0x76>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	22 30       	cpi	r18, 0x02	; 2
    148a:	31 05       	cpc	r19, r1
    148c:	2c f4       	brge	.+10     	; 0x1498 <MDIO_voidTogglePinValue+0x38>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	61 f0       	breq	.+24     	; 0x14ae <MDIO_voidTogglePinValue+0x4e>
    1496:	5a c0       	rjmp	.+180    	; 0x154c <MDIO_voidTogglePinValue+0xec>
    1498:	2b 81       	ldd	r18, Y+3	; 0x03
    149a:	3c 81       	ldd	r19, Y+4	; 0x04
    149c:	22 30       	cpi	r18, 0x02	; 2
    149e:	31 05       	cpc	r19, r1
    14a0:	71 f1       	breq	.+92     	; 0x14fe <MDIO_voidTogglePinValue+0x9e>
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	9c 81       	ldd	r25, Y+4	; 0x04
    14a6:	83 30       	cpi	r24, 0x03	; 3
    14a8:	91 05       	cpc	r25, r1
    14aa:	e9 f1       	breq	.+122    	; 0x1526 <MDIO_voidTogglePinValue+0xc6>
    14ac:	4f c0       	rjmp	.+158    	; 0x154c <MDIO_voidTogglePinValue+0xec>
	{
	case DIO_PORTA: TOGGLE_BIT(PORTA_REG,A_u8PinId); break;
    14ae:	ab e3       	ldi	r26, 0x3B	; 59
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	eb e3       	ldi	r30, 0x3B	; 59
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <MDIO_voidTogglePinValue+0x6c>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <MDIO_voidTogglePinValue+0x68>
    14d0:	84 27       	eor	r24, r20
    14d2:	8c 93       	st	X, r24
    14d4:	3b c0       	rjmp	.+118    	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTB: TOGGLE_BIT(PORTB_REG,A_u8PinId); break;
    14d6:	a8 e3       	ldi	r26, 0x38	; 56
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e8 e3       	ldi	r30, 0x38	; 56
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <MDIO_voidTogglePinValue+0x94>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <MDIO_voidTogglePinValue+0x90>
    14f8:	84 27       	eor	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	27 c0       	rjmp	.+78     	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTC: TOGGLE_BIT(PORTC_REG,A_u8PinId); break;
    14fe:	a5 e3       	ldi	r26, 0x35	; 53
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e3       	ldi	r30, 0x35	; 53
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <MDIO_voidTogglePinValue+0xbc>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <MDIO_voidTogglePinValue+0xb8>
    1520:	84 27       	eor	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	13 c0       	rjmp	.+38     	; 0x154c <MDIO_voidTogglePinValue+0xec>
	case DIO_PORTD: TOGGLE_BIT(PORTD_REG,A_u8PinId); break;
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <MDIO_voidTogglePinValue+0xe4>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <MDIO_voidTogglePinValue+0xe0>
    1548:	84 27       	eor	r24, r20
    154a:	8c 93       	st	X, r24
	}
}
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	cf 91       	pop	r28
    1556:	df 91       	pop	r29
    1558:	08 95       	ret

0000155a <MEXTI_voidConfig>:
void(*EXTI0_CALLBACK) (void)=NULL;
void(*EXTI1_CALLBACK) (void)=NULL;
void(*EXTI2_CALLBACK) (void)=NULL;

void MEXTI_voidConfig(u8 A_u8EXTI, u8 A_u8SenseMode)
{
    155a:	df 93       	push	r29
    155c:	cf 93       	push	r28
    155e:	00 d0       	rcall	.+0      	; 0x1560 <MEXTI_voidConfig+0x6>
    1560:	00 d0       	rcall	.+0      	; 0x1562 <MEXTI_voidConfig+0x8>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <MEXTI_voidConfig+0xa>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	switch(A_u8EXTI)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3e 83       	std	Y+6, r19	; 0x06
    1574:	2d 83       	std	Y+5, r18	; 0x05
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	d1 f0       	breq	.+52     	; 0x15b4 <MEXTI_voidConfig+0x5a>
    1580:	2d 81       	ldd	r18, Y+5	; 0x05
    1582:	3e 81       	ldd	r19, Y+6	; 0x06
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	61 f1       	breq	.+88     	; 0x15e2 <MEXTI_voidConfig+0x88>
    158a:	8d 81       	ldd	r24, Y+5	; 0x05
    158c:	9e 81       	ldd	r25, Y+6	; 0x06
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	09 f0       	breq	.+2      	; 0x1594 <MEXTI_voidConfig+0x3a>
    1592:	45 c0       	rjmp	.+138    	; 0x161e <MEXTI_voidConfig+0xc4>
	{
	case EXTI0:   MCUCR&=~(SENSE_MODE_MASK<<EXTI0_SENSE_BIT);
    1594:	a5 e5       	ldi	r26, 0x55	; 85
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e5 e5       	ldi	r30, 0x55	; 85
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8c 7f       	andi	r24, 0xFC	; 252
    15a0:	8c 93       	st	X, r24
	              MCUCR|=(A_u8SenseMode<<EXTI0_SENSE_BIT);
    15a2:	a5 e5       	ldi	r26, 0x55	; 85
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e5 e5       	ldi	r30, 0x55	; 85
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	90 81       	ld	r25, Z
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	89 2b       	or	r24, r25
    15b0:	8c 93       	st	X, r24
    15b2:	35 c0       	rjmp	.+106    	; 0x161e <MEXTI_voidConfig+0xc4>
	              break;

	case EXTI1:   MCUCR&=~(SENSE_MODE_MASK<<EXTI1_SENSE_BIT);
    15b4:	a5 e5       	ldi	r26, 0x55	; 85
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e5       	ldi	r30, 0x55	; 85
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	83 7f       	andi	r24, 0xF3	; 243
    15c0:	8c 93       	st	X, r24
	              MCUCR|=(A_u8SenseMode<<EXTI1_SENSE_BIT);
    15c2:	a5 e5       	ldi	r26, 0x55	; 85
    15c4:	b0 e0       	ldi	r27, 0x00	; 0
    15c6:	e5 e5       	ldi	r30, 0x55	; 85
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	80 81       	ld	r24, Z
    15cc:	28 2f       	mov	r18, r24
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	88 2f       	mov	r24, r24
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	82 2b       	or	r24, r18
    15de:	8c 93       	st	X, r24
    15e0:	1e c0       	rjmp	.+60     	; 0x161e <MEXTI_voidConfig+0xc4>
	              break;

	case EXTI2:
		switch(A_u8SenseMode)
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3c 83       	std	Y+4, r19	; 0x04
    15ea:	2b 83       	std	Y+3, r18	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	82 30       	cpi	r24, 0x02	; 2
    15f2:	91 05       	cpc	r25, r1
    15f4:	69 f0       	breq	.+26     	; 0x1610 <MEXTI_voidConfig+0xb6>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	23 30       	cpi	r18, 0x03	; 3
    15fc:	31 05       	cpc	r19, r1
    15fe:	79 f4       	brne	.+30     	; 0x161e <MEXTI_voidConfig+0xc4>
	{
		case RISING_EDGE:  SET_BIT(MCUCSR,EXTI2_SENSE_BIT);  break;
    1600:	a4 e5       	ldi	r26, 0x54	; 84
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e4 e5       	ldi	r30, 0x54	; 84
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	80 64       	ori	r24, 0x40	; 64
    160c:	8c 93       	st	X, r24
    160e:	07 c0       	rjmp	.+14     	; 0x161e <MEXTI_voidConfig+0xc4>
		case FALLING_EDGE: CLR_BIT(MCUCSR,EXTI2_SENSE_BIT);  break;
    1610:	a4 e5       	ldi	r26, 0x54	; 84
    1612:	b0 e0       	ldi	r27, 0x00	; 0
    1614:	e4 e5       	ldi	r30, 0x54	; 84
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	8f 7b       	andi	r24, 0xBF	; 191
    161c:	8c 93       	st	X, r24
	}


	}
}
    161e:	26 96       	adiw	r28, 0x06	; 6
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <MEXTI_voidEnable>:
void MEXTI_voidEnable(u8 A_u8EXTI)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	00 d0       	rcall	.+0      	; 0x1636 <MEXTI_voidEnable+0x6>
    1636:	0f 92       	push	r0
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3b 83       	std	Y+3, r19	; 0x03
    1646:	2a 83       	std	Y+2, r18	; 0x02
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	9b 81       	ldd	r25, Y+3	; 0x03
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	89 f0       	breq	.+34     	; 0x1674 <MEXTI_voidEnable+0x44>
    1652:	2a 81       	ldd	r18, Y+2	; 0x02
    1654:	3b 81       	ldd	r19, Y+3	; 0x03
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	a1 f0       	breq	.+40     	; 0x1684 <MEXTI_voidEnable+0x54>
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	9b 81       	ldd	r25, Y+3	; 0x03
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	b9 f4       	brne	.+46     	; 0x1692 <MEXTI_voidEnable+0x62>
	{
	case EXTI0:   SET_BIT(MCUCR,EXTI0_ENABLE_BIT);
    1664:	a5 e5       	ldi	r26, 0x55	; 85
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e5 e5       	ldi	r30, 0x55	; 85
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	80 81       	ld	r24, Z
    166e:	81 60       	ori	r24, 0x01	; 1
    1670:	8c 93       	st	X, r24
    1672:	0f c0       	rjmp	.+30     	; 0x1692 <MEXTI_voidEnable+0x62>
	              break;

	case EXTI1:   SET_BIT(MCUCR,EXTI1_ENABLE_BIT);
    1674:	a5 e5       	ldi	r26, 0x55	; 85
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e5 e5       	ldi	r30, 0x55	; 85
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	84 60       	ori	r24, 0x04	; 4
    1680:	8c 93       	st	X, r24
    1682:	07 c0       	rjmp	.+14     	; 0x1692 <MEXTI_voidEnable+0x62>
                  break;

	case EXTI2:   SET_BIT(MCUCSR,EXTI2_ENABLE_BIT);
    1684:	a4 e5       	ldi	r26, 0x54	; 84
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e4 e5       	ldi	r30, 0x54	; 84
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	8c 93       	st	X, r24
			      break;
    }
}
    1692:	0f 90       	pop	r0
    1694:	0f 90       	pop	r0
    1696:	0f 90       	pop	r0
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <MEXTI_voidDisable>:
void MEXTI_voidDisable(u8 A_u8EXTI)
{
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	00 d0       	rcall	.+0      	; 0x16a4 <MEXTI_voidDisable+0x6>
    16a4:	0f 92       	push	r0
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8EXTI)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3b 83       	std	Y+3, r19	; 0x03
    16b4:	2a 83       	std	Y+2, r18	; 0x02
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	89 f0       	breq	.+34     	; 0x16e2 <MEXTI_voidDisable+0x44>
    16c0:	2a 81       	ldd	r18, Y+2	; 0x02
    16c2:	3b 81       	ldd	r19, Y+3	; 0x03
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	a1 f0       	breq	.+40     	; 0x16f2 <MEXTI_voidDisable+0x54>
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	9b 81       	ldd	r25, Y+3	; 0x03
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	b9 f4       	brne	.+46     	; 0x1700 <MEXTI_voidDisable+0x62>
	{
	case EXTI0:   CLR_BIT(MCUCR,EXTI0_DISABLE_BIT);
    16d2:	a5 e5       	ldi	r26, 0x55	; 85
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e5 e5       	ldi	r30, 0x55	; 85
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	8e 7f       	andi	r24, 0xFE	; 254
    16de:	8c 93       	st	X, r24
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <MEXTI_voidDisable+0x62>
	              break;

	case EXTI1:   CLR_BIT(MCUCR,EXTI1_DISABLE_BIT);
    16e2:	a5 e5       	ldi	r26, 0x55	; 85
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e5 e5       	ldi	r30, 0x55	; 85
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8b 7f       	andi	r24, 0xFB	; 251
    16ee:	8c 93       	st	X, r24
    16f0:	07 c0       	rjmp	.+14     	; 0x1700 <MEXTI_voidDisable+0x62>
                  break;

	case EXTI2:   CLR_BIT(MCUCSR,EXTI2_DISABLE_BIT);
    16f2:	a4 e5       	ldi	r26, 0x54	; 84
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e4 e5       	ldi	r30, 0x54	; 84
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	8f 7b       	andi	r24, 0xBF	; 191
    16fe:	8c 93       	st	X, r24
			      break;
    }
}
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <HEXTI_voidSetCallBack>:

void HEXTI_voidSetCallBack(u8 A_u8EXTI, void (*PtrToFunc) (void))
{
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <HEXTI_voidSetCallBack+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <HEXTI_voidSetCallBack+0x8>
    1714:	0f 92       	push	r0
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	89 83       	std	Y+1, r24	; 0x01
    171c:	7b 83       	std	Y+3, r23	; 0x03
    171e:	6a 83       	std	Y+2, r22	; 0x02
	if(PtrToFunc!=NULL)
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	9b 81       	ldd	r25, Y+3	; 0x03
    1724:	00 97       	sbiw	r24, 0x00	; 0
    1726:	39 f1       	breq	.+78     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	{
	switch(A_u8EXTI)
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3d 83       	std	Y+5, r19	; 0x05
    1730:	2c 83       	std	Y+4, r18	; 0x04
    1732:	8c 81       	ldd	r24, Y+4	; 0x04
    1734:	9d 81       	ldd	r25, Y+5	; 0x05
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	91 05       	cpc	r25, r1
    173a:	81 f0       	breq	.+32     	; 0x175c <HEXTI_voidSetCallBack+0x50>
    173c:	2c 81       	ldd	r18, Y+4	; 0x04
    173e:	3d 81       	ldd	r19, Y+5	; 0x05
    1740:	22 30       	cpi	r18, 0x02	; 2
    1742:	31 05       	cpc	r19, r1
    1744:	91 f0       	breq	.+36     	; 0x176a <HEXTI_voidSetCallBack+0x5e>
    1746:	8c 81       	ldd	r24, Y+4	; 0x04
    1748:	9d 81       	ldd	r25, Y+5	; 0x05
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	a1 f4       	brne	.+40     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	{
	case EXTI0:   EXTI0_CALLBACK=PtrToFunc;
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	9b 81       	ldd	r25, Y+3	; 0x03
    1752:	90 93 8b 00 	sts	0x008B, r25
    1756:	80 93 8a 00 	sts	0x008A, r24
    175a:	0d c0       	rjmp	.+26     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
	              break;

	case EXTI1:   EXTI1_CALLBACK=PtrToFunc;
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	90 93 8d 00 	sts	0x008D, r25
    1764:	80 93 8c 00 	sts	0x008C, r24
    1768:	06 c0       	rjmp	.+12     	; 0x1776 <HEXTI_voidSetCallBack+0x6a>
                  break;

	case EXTI2:   EXTI2_CALLBACK=PtrToFunc;
    176a:	8a 81       	ldd	r24, Y+2	; 0x02
    176c:	9b 81       	ldd	r25, Y+3	; 0x03
    176e:	90 93 8f 00 	sts	0x008F, r25
    1772:	80 93 8e 00 	sts	0x008E, r24
			      break;
    }
	}
}
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	cf 91       	pop	r28
    1782:	df 91       	pop	r29
    1784:	08 95       	ret

00001786 <__vector1>:



void __vector1(void) __attribute((signal));
void __vector1(void)
{
    1786:	1f 92       	push	r1
    1788:	0f 92       	push	r0
    178a:	0f b6       	in	r0, 0x3f	; 63
    178c:	0f 92       	push	r0
    178e:	11 24       	eor	r1, r1
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	df 93       	push	r29
    17aa:	cf 93       	push	r28
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
	if(EXTI0_CALLBACK!=NULL)
    17b0:	80 91 8a 00 	lds	r24, 0x008A
    17b4:	90 91 8b 00 	lds	r25, 0x008B
    17b8:	00 97       	sbiw	r24, 0x00	; 0
    17ba:	29 f0       	breq	.+10     	; 0x17c6 <__vector1+0x40>
	{
		EXTI0_CALLBACK();
    17bc:	e0 91 8a 00 	lds	r30, 0x008A
    17c0:	f0 91 8b 00 	lds	r31, 0x008B
    17c4:	09 95       	icall
	}
}
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	ff 91       	pop	r31
    17cc:	ef 91       	pop	r30
    17ce:	bf 91       	pop	r27
    17d0:	af 91       	pop	r26
    17d2:	9f 91       	pop	r25
    17d4:	8f 91       	pop	r24
    17d6:	7f 91       	pop	r23
    17d8:	6f 91       	pop	r22
    17da:	5f 91       	pop	r21
    17dc:	4f 91       	pop	r20
    17de:	3f 91       	pop	r19
    17e0:	2f 91       	pop	r18
    17e2:	0f 90       	pop	r0
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	0f 90       	pop	r0
    17e8:	1f 90       	pop	r1
    17ea:	18 95       	reti

000017ec <__vector2>:

void __vector2(void) __attribute((signal));
void __vector2(void)
{
    17ec:	1f 92       	push	r1
    17ee:	0f 92       	push	r0
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	0f 92       	push	r0
    17f4:	11 24       	eor	r1, r1
    17f6:	2f 93       	push	r18
    17f8:	3f 93       	push	r19
    17fa:	4f 93       	push	r20
    17fc:	5f 93       	push	r21
    17fe:	6f 93       	push	r22
    1800:	7f 93       	push	r23
    1802:	8f 93       	push	r24
    1804:	9f 93       	push	r25
    1806:	af 93       	push	r26
    1808:	bf 93       	push	r27
    180a:	ef 93       	push	r30
    180c:	ff 93       	push	r31
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	if(EXTI1_CALLBACK!=NULL)
    1816:	80 91 8c 00 	lds	r24, 0x008C
    181a:	90 91 8d 00 	lds	r25, 0x008D
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	29 f0       	breq	.+10     	; 0x182c <__vector2+0x40>
	{
		EXTI1_CALLBACK();
    1822:	e0 91 8c 00 	lds	r30, 0x008C
    1826:	f0 91 8d 00 	lds	r31, 0x008D
    182a:	09 95       	icall
	}
}
    182c:	cf 91       	pop	r28
    182e:	df 91       	pop	r29
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	bf 91       	pop	r27
    1836:	af 91       	pop	r26
    1838:	9f 91       	pop	r25
    183a:	8f 91       	pop	r24
    183c:	7f 91       	pop	r23
    183e:	6f 91       	pop	r22
    1840:	5f 91       	pop	r21
    1842:	4f 91       	pop	r20
    1844:	3f 91       	pop	r19
    1846:	2f 91       	pop	r18
    1848:	0f 90       	pop	r0
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	0f 90       	pop	r0
    184e:	1f 90       	pop	r1
    1850:	18 95       	reti

00001852 <__vector3>:

void __vector3(void) __attribute((signal));
void __vector3(void)
{
    1852:	1f 92       	push	r1
    1854:	0f 92       	push	r0
    1856:	0f b6       	in	r0, 0x3f	; 63
    1858:	0f 92       	push	r0
    185a:	11 24       	eor	r1, r1
    185c:	2f 93       	push	r18
    185e:	3f 93       	push	r19
    1860:	4f 93       	push	r20
    1862:	5f 93       	push	r21
    1864:	6f 93       	push	r22
    1866:	7f 93       	push	r23
    1868:	8f 93       	push	r24
    186a:	9f 93       	push	r25
    186c:	af 93       	push	r26
    186e:	bf 93       	push	r27
    1870:	ef 93       	push	r30
    1872:	ff 93       	push	r31
    1874:	df 93       	push	r29
    1876:	cf 93       	push	r28
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	if(EXTI2_CALLBACK!=NULL)
    187c:	80 91 8e 00 	lds	r24, 0x008E
    1880:	90 91 8f 00 	lds	r25, 0x008F
    1884:	00 97       	sbiw	r24, 0x00	; 0
    1886:	29 f0       	breq	.+10     	; 0x1892 <__vector3+0x40>
	{
		EXTI2_CALLBACK();
    1888:	e0 91 8e 00 	lds	r30, 0x008E
    188c:	f0 91 8f 00 	lds	r31, 0x008F
    1890:	09 95       	icall
	}
}
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	ff 91       	pop	r31
    1898:	ef 91       	pop	r30
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	7f 91       	pop	r23
    18a4:	6f 91       	pop	r22
    18a6:	5f 91       	pop	r21
    18a8:	4f 91       	pop	r20
    18aa:	3f 91       	pop	r19
    18ac:	2f 91       	pop	r18
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <MGI_voidEnable>:
#include "../include/MCAL/GI/GI_interface.h"
#include "../include/MCAL/GI/GI_private.h"
#include "../include/MCAL/GI/GI_configuration.h"

void MGI_voidEnable(void)
{
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    18c0:	af e5       	ldi	r26, 0x5F	; 95
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	ef e5       	ldi	r30, 0x5F	; 95
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	80 68       	ori	r24, 0x80	; 128
    18cc:	8c 93       	st	X, r24
}
    18ce:	cf 91       	pop	r28
    18d0:	df 91       	pop	r29
    18d2:	08 95       	ret

000018d4 <MGI_voidDisable>:

void MGI_voidDisable(void)
{
    18d4:	df 93       	push	r29
    18d6:	cf 93       	push	r28
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT(SREG,GLOBAL_INTERRUPT_ENABLE_BIT);
    18dc:	af e5       	ldi	r26, 0x5F	; 95
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	ef e5       	ldi	r30, 0x5F	; 95
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8f 77       	andi	r24, 0x7F	; 127
    18e8:	8c 93       	st	X, r24
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <HKEYPAD_u8KeyPressed>:
u8 static global_u8SArrOfRows[ROW_NUMBER]= KEYPAD_ROWS;
u8 static global_u8SArrOfColumns[COLUMN_NUMBER]= KEYPAD_COLUMNS;


u8 HKEYPAD_u8KeyPressed(void)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	63 97       	sbiw	r28, 0x13	; 19
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
u8 local_u8KeyValue=KEY_NOT_PRESSED;
    1904:	8f ef       	ldi	r24, 0xFF	; 255
    1906:	8b 8b       	std	Y+19, r24	; 0x13
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
    1908:	1f 86       	std	Y+15, r1	; 0x0f
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
    190a:	1a 8a       	std	Y+18, r1	; 0x12
    190c:	da c0       	rjmp	.+436    	; 0x1ac2 <HKEYPAD_u8KeyPressed+0x1d2>
{
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_LOW);
    190e:	8a 89       	ldd	r24, Y+18	; 0x12
    1910:	88 2f       	mov	r24, r24
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	fc 01       	movw	r30, r24
    1916:	e8 58       	subi	r30, 0x88	; 136
    1918:	ff 4f       	sbci	r31, 0xFF	; 255
    191a:	90 81       	ld	r25, Z
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	69 2f       	mov	r22, r25
    1920:	40 e0       	ldi	r20, 0x00	; 0
    1922:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
for(local_u8ColumnCounter=0;local_u8ColumnCounter<COLUMN_NUMBER;local_u8ColumnCounter++)
    1926:	19 8a       	std	Y+17, r1	; 0x11
    1928:	b6 c0       	rjmp	.+364    	; 0x1a96 <HKEYPAD_u8KeyPressed+0x1a6>
          {
	local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    192a:	89 89       	ldd	r24, Y+17	; 0x11
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	e4 58       	subi	r30, 0x84	; 132
    1934:	ff 4f       	sbci	r31, 0xFF	; 255
    1936:	90 81       	ld	r25, Z
    1938:	81 e0       	ldi	r24, 0x01	; 1
    193a:	69 2f       	mov	r22, r25
    193c:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1940:	88 8b       	std	Y+16, r24	; 0x10
	if(local_u8PinValue==KEY_PRESSED)
    1942:	88 89       	ldd	r24, Y+16	; 0x10
    1944:	88 23       	and	r24, r24
    1946:	09 f0       	breq	.+2      	; 0x194a <HKEYPAD_u8KeyPressed+0x5a>
    1948:	a3 c0       	rjmp	.+326    	; 0x1a90 <HKEYPAD_u8KeyPressed+0x1a0>
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	a0 ef       	ldi	r26, 0xF0	; 240
    1950:	b1 e4       	ldi	r27, 0x41	; 65
    1952:	8b 87       	std	Y+11, r24	; 0x0b
    1954:	9c 87       	std	Y+12, r25	; 0x0c
    1956:	ad 87       	std	Y+13, r26	; 0x0d
    1958:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    195a:	6b 85       	ldd	r22, Y+11	; 0x0b
    195c:	7c 85       	ldd	r23, Y+12	; 0x0c
    195e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1960:	9e 85       	ldd	r25, Y+14	; 0x0e
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a ef       	ldi	r20, 0xFA	; 250
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	8f 83       	std	Y+7, r24	; 0x07
    1974:	98 87       	std	Y+8, r25	; 0x08
    1976:	a9 87       	std	Y+9, r26	; 0x09
    1978:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    197a:	6f 81       	ldd	r22, Y+7	; 0x07
    197c:	78 85       	ldd	r23, Y+8	; 0x08
    197e:	89 85       	ldd	r24, Y+9	; 0x09
    1980:	9a 85       	ldd	r25, Y+10	; 0x0a
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e8       	ldi	r20, 0x80	; 128
    1988:	5f e3       	ldi	r21, 0x3F	; 63
    198a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198e:	88 23       	and	r24, r24
    1990:	2c f4       	brge	.+10     	; 0x199c <HKEYPAD_u8KeyPressed+0xac>
		__ticks = 1;
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	9e 83       	std	Y+6, r25	; 0x06
    1998:	8d 83       	std	Y+5, r24	; 0x05
    199a:	3f c0       	rjmp	.+126    	; 0x1a1a <HKEYPAD_u8KeyPressed+0x12a>
	else if (__tmp > 65535)
    199c:	6f 81       	ldd	r22, Y+7	; 0x07
    199e:	78 85       	ldd	r23, Y+8	; 0x08
    19a0:	89 85       	ldd	r24, Y+9	; 0x09
    19a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a4:	20 e0       	ldi	r18, 0x00	; 0
    19a6:	3f ef       	ldi	r19, 0xFF	; 255
    19a8:	4f e7       	ldi	r20, 0x7F	; 127
    19aa:	57 e4       	ldi	r21, 0x47	; 71
    19ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b0:	18 16       	cp	r1, r24
    19b2:	4c f5       	brge	.+82     	; 0x1a06 <HKEYPAD_u8KeyPressed+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	40 e2       	ldi	r20, 0x20	; 32
    19c2:	51 e4       	ldi	r21, 0x41	; 65
    19c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c8:	dc 01       	movw	r26, r24
    19ca:	cb 01       	movw	r24, r22
    19cc:	bc 01       	movw	r22, r24
    19ce:	cd 01       	movw	r24, r26
    19d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	9e 83       	std	Y+6, r25	; 0x06
    19da:	8d 83       	std	Y+5, r24	; 0x05
    19dc:	0f c0       	rjmp	.+30     	; 0x19fc <HKEYPAD_u8KeyPressed+0x10c>
    19de:	88 ec       	ldi	r24, 0xC8	; 200
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9c 83       	std	Y+4, r25	; 0x04
    19e4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e6:	8b 81       	ldd	r24, Y+3	; 0x03
    19e8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ea:	01 97       	sbiw	r24, 0x01	; 1
    19ec:	f1 f7       	brne	.-4      	; 0x19ea <HKEYPAD_u8KeyPressed+0xfa>
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19f2:	8d 81       	ldd	r24, Y+5	; 0x05
    19f4:	9e 81       	ldd	r25, Y+6	; 0x06
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19fc:	8d 81       	ldd	r24, Y+5	; 0x05
    19fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1a00:	00 97       	sbiw	r24, 0x00	; 0
    1a02:	69 f7       	brne	.-38     	; 0x19de <HKEYPAD_u8KeyPressed+0xee>
    1a04:	14 c0       	rjmp	.+40     	; 0x1a2e <HKEYPAD_u8KeyPressed+0x13e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a06:	6f 81       	ldd	r22, Y+7	; 0x07
    1a08:	78 85       	ldd	r23, Y+8	; 0x08
    1a0a:	89 85       	ldd	r24, Y+9	; 0x09
    1a0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a12:	dc 01       	movw	r26, r24
    1a14:	cb 01       	movw	r24, r22
    1a16:	9e 83       	std	Y+6, r25	; 0x06
    1a18:	8d 83       	std	Y+5, r24	; 0x05
    1a1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1e:	9a 83       	std	Y+2, r25	; 0x02
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	9a 81       	ldd	r25, Y+2	; 0x02
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <HKEYPAD_u8KeyPressed+0x136>
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(KEYPAD_DEPOUNCING_EFFECT_IN_MS);
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    1a2e:	89 89       	ldd	r24, Y+17	; 0x11
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	fc 01       	movw	r30, r24
    1a36:	e4 58       	subi	r30, 0x84	; 132
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	90 81       	ld	r25, Z
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	69 2f       	mov	r22, r25
    1a40:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1a44:	88 8b       	std	Y+16, r24	; 0x10
    1a46:	0c c0       	rjmp	.+24     	; 0x1a60 <HKEYPAD_u8KeyPressed+0x170>
	while(local_u8PinValue==KEY_PRESSED)
	{
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
    1a48:	89 89       	ldd	r24, Y+17	; 0x11
    1a4a:	88 2f       	mov	r24, r24
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e4 58       	subi	r30, 0x84	; 132
    1a52:	ff 4f       	sbci	r31, 0xFF	; 255
    1a54:	90 81       	ld	r25, Z
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	69 2f       	mov	r22, r25
    1a5a:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    1a5e:	88 8b       	std	Y+16, r24	; 0x10
	if(local_u8PinValue==KEY_PRESSED)
	{

		_delay_ms(KEYPAD_DEPOUNCING_EFFECT_IN_MS);
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
	while(local_u8PinValue==KEY_PRESSED)
    1a60:	88 89       	ldd	r24, Y+16	; 0x10
    1a62:	88 23       	and	r24, r24
    1a64:	89 f3       	breq	.-30     	; 0x1a48 <HKEYPAD_u8KeyPressed+0x158>
	{
		local_u8PinValue=MDIO_voidGetPinValue(KEYPAD_PORT,global_u8SArrOfColumns[local_u8ColumnCounter]);
	}

	local_u8KeyValue=global_u8ArrOfKeyValues[local_u8RowCounter][local_u8ColumnCounter];
    1a66:	8a 89       	ldd	r24, Y+18	; 0x12
    1a68:	48 2f       	mov	r20, r24
    1a6a:	50 e0       	ldi	r21, 0x00	; 0
    1a6c:	89 89       	ldd	r24, Y+17	; 0x11
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	ca 01       	movw	r24, r20
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	88 0f       	add	r24, r24
    1a7a:	99 1f       	adc	r25, r25
    1a7c:	82 0f       	add	r24, r18
    1a7e:	93 1f       	adc	r25, r19
    1a80:	fc 01       	movw	r30, r24
    1a82:	e8 59       	subi	r30, 0x98	; 152
    1a84:	ff 4f       	sbci	r31, 0xFF	; 255
    1a86:	80 81       	ld	r24, Z
    1a88:	8b 8b       	std	Y+19, r24	; 0x13
	FLAG=FLAG_UP;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	8f 87       	std	Y+15, r24	; 0x0f
    1a8e:	07 c0       	rjmp	.+14     	; 0x1a9e <HKEYPAD_u8KeyPressed+0x1ae>
u8 local_u8KeyValue=KEY_NOT_PRESSED;
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
{
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_LOW);
for(local_u8ColumnCounter=0;local_u8ColumnCounter<COLUMN_NUMBER;local_u8ColumnCounter++)
    1a90:	89 89       	ldd	r24, Y+17	; 0x11
    1a92:	8f 5f       	subi	r24, 0xFF	; 255
    1a94:	89 8b       	std	Y+17, r24	; 0x11
    1a96:	89 89       	ldd	r24, Y+17	; 0x11
    1a98:	84 30       	cpi	r24, 0x04	; 4
    1a9a:	08 f4       	brcc	.+2      	; 0x1a9e <HKEYPAD_u8KeyPressed+0x1ae>
    1a9c:	46 cf       	rjmp	.-372    	; 0x192a <HKEYPAD_u8KeyPressed+0x3a>
	}



          }
MDIO_voidSetPinValue(KEYPAD_PORT,global_u8SArrOfRows[local_u8RowCounter],DIO_HIGH);
    1a9e:	8a 89       	ldd	r24, Y+18	; 0x12
    1aa0:	88 2f       	mov	r24, r24
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	e8 58       	subi	r30, 0x88	; 136
    1aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aaa:	90 81       	ld	r25, Z
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	69 2f       	mov	r22, r25
    1ab0:	41 e0       	ldi	r20, 0x01	; 1
    1ab2:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
if(FLAG==FLAG_UP)
    1ab6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ab8:	81 30       	cpi	r24, 0x01	; 1
    1aba:	39 f0       	breq	.+14     	; 0x1aca <HKEYPAD_u8KeyPressed+0x1da>

u8 HKEYPAD_u8KeyPressed(void)
{
u8 local_u8KeyValue=KEY_NOT_PRESSED;
u8 local_u8RowCounter,local_u8ColumnCounter,local_u8PinValue,FLAG=FLAG_DOWN;
for(local_u8RowCounter=0;local_u8RowCounter<ROW_NUMBER;local_u8RowCounter++)
    1abc:	8a 89       	ldd	r24, Y+18	; 0x12
    1abe:	8f 5f       	subi	r24, 0xFF	; 255
    1ac0:	8a 8b       	std	Y+18, r24	; 0x12
    1ac2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	08 f4       	brcc	.+2      	; 0x1aca <HKEYPAD_u8KeyPressed+0x1da>
    1ac8:	22 cf       	rjmp	.-444    	; 0x190e <HKEYPAD_u8KeyPressed+0x1e>
if(FLAG==FLAG_UP)
{
break;
}
}
return local_u8KeyValue;
    1aca:	8b 89       	ldd	r24, Y+19	; 0x13
}
    1acc:	63 96       	adiw	r28, 0x13	; 19
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <HLCD_voidSendData>:
#include "../include/HAL/LCD/LCD_private.h"
#include "../include/HAL/LCD/LCD_configuration.h"
#define F_CPU 8000000UL

void HLCD_voidSendData (u8 A_u8Data)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	2f 97       	sbiw	r28, 0x0f	; 15
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	8f 87       	std	Y+15, r24	; 0x0f
//RS---->1  RW----->0
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_HIGH);
    1af4:	83 e0       	ldi	r24, 0x03	; 3
    1af6:	60 e0       	ldi	r22, 0x00	; 0
    1af8:	41 e0       	ldi	r20, 0x01	; 1
    1afa:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1afe:	83 e0       	ldi	r24, 0x03	; 3
    1b00:	61 e0       	ldi	r22, 0x01	; 1
    1b02:	40 e0       	ldi	r20, 0x00	; 0
    1b04:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
//Send Data To the LCD
    MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Data);
    1b08:	82 e0       	ldi	r24, 0x02	; 2
    1b0a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1b0c:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>
//Set PUlse on E PIN with 2ms delay
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1b10:	83 e0       	ldi	r24, 0x03	; 3
    1b12:	62 e0       	ldi	r22, 0x02	; 2
    1b14:	41 e0       	ldi	r20, 0x01	; 1
    1b16:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	a0 e0       	ldi	r26, 0x00	; 0
    1b20:	b0 e4       	ldi	r27, 0x40	; 64
    1b22:	8b 87       	std	Y+11, r24	; 0x0b
    1b24:	9c 87       	std	Y+12, r25	; 0x0c
    1b26:	ad 87       	std	Y+13, r26	; 0x0d
    1b28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	4a ef       	ldi	r20, 0xFA	; 250
    1b38:	54 e4       	ldi	r21, 0x44	; 68
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	8f 83       	std	Y+7, r24	; 0x07
    1b44:	98 87       	std	Y+8, r25	; 0x08
    1b46:	a9 87       	std	Y+9, r26	; 0x09
    1b48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4a:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4c:	78 85       	ldd	r23, Y+8	; 0x08
    1b4e:	89 85       	ldd	r24, Y+9	; 0x09
    1b50:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e8       	ldi	r20, 0x80	; 128
    1b58:	5f e3       	ldi	r21, 0x3F	; 63
    1b5a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5e:	88 23       	and	r24, r24
    1b60:	2c f4       	brge	.+10     	; 0x1b6c <HLCD_voidSendData+0x8e>
		__ticks = 1;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	3f c0       	rjmp	.+126    	; 0x1bea <HLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
    1b6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b6e:	78 85       	ldd	r23, Y+8	; 0x08
    1b70:	89 85       	ldd	r24, Y+9	; 0x09
    1b72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b74:	20 e0       	ldi	r18, 0x00	; 0
    1b76:	3f ef       	ldi	r19, 0xFF	; 255
    1b78:	4f e7       	ldi	r20, 0x7F	; 127
    1b7a:	57 e4       	ldi	r21, 0x47	; 71
    1b7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b80:	18 16       	cp	r1, r24
    1b82:	4c f5       	brge	.+82     	; 0x1bd6 <HLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	bc 01       	movw	r22, r24
    1b9e:	cd 01       	movw	r24, r26
    1ba0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba4:	dc 01       	movw	r26, r24
    1ba6:	cb 01       	movw	r24, r22
    1ba8:	9e 83       	std	Y+6, r25	; 0x06
    1baa:	8d 83       	std	Y+5, r24	; 0x05
    1bac:	0f c0       	rjmp	.+30     	; 0x1bcc <HLCD_voidSendData+0xee>
    1bae:	88 ec       	ldi	r24, 0xC8	; 200
    1bb0:	90 e0       	ldi	r25, 0x00	; 0
    1bb2:	9c 83       	std	Y+4, r25	; 0x04
    1bb4:	8b 83       	std	Y+3, r24	; 0x03
    1bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bba:	01 97       	sbiw	r24, 0x01	; 1
    1bbc:	f1 f7       	brne	.-4      	; 0x1bba <HLCD_voidSendData+0xdc>
    1bbe:	9c 83       	std	Y+4, r25	; 0x04
    1bc0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	9e 83       	std	Y+6, r25	; 0x06
    1bca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bcc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bce:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd0:	00 97       	sbiw	r24, 0x00	; 0
    1bd2:	69 f7       	brne	.-38     	; 0x1bae <HLCD_voidSendData+0xd0>
    1bd4:	14 c0       	rjmp	.+40     	; 0x1bfe <HLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd8:	78 85       	ldd	r23, Y+8	; 0x08
    1bda:	89 85       	ldd	r24, Y+9	; 0x09
    1bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	9e 83       	std	Y+6, r25	; 0x06
    1be8:	8d 83       	std	Y+5, r24	; 0x05
    1bea:	8d 81       	ldd	r24, Y+5	; 0x05
    1bec:	9e 81       	ldd	r25, Y+6	; 0x06
    1bee:	9a 83       	std	Y+2, r25	; 0x02
    1bf0:	89 83       	std	Y+1, r24	; 0x01
    1bf2:	89 81       	ldd	r24, Y+1	; 0x01
    1bf4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf6:	01 97       	sbiw	r24, 0x01	; 1
    1bf8:	f1 f7       	brne	.-4      	; 0x1bf6 <HLCD_voidSendData+0x118>
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);
    MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1bfe:	83 e0       	ldi	r24, 0x03	; 3
    1c00:	62 e0       	ldi	r22, 0x02	; 2
    1c02:	40 e0       	ldi	r20, 0x00	; 0
    1c04:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    1c08:	2f 96       	adiw	r28, 0x0f	; 15
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <HLCD_voidSendCommand>:
void HLCD_voidSendCommand (u8 A_u8Command)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
    1c22:	2f 97       	sbiw	r28, 0x0f	; 15
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	8f 87       	std	Y+15, r24	; 0x0f
//RS---->0  RW----->0
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RS_PIN,DIO_LOW);
    1c30:	83 e0       	ldi	r24, 0x03	; 3
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	40 e0       	ldi	r20, 0x00	; 0
    1c36:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_RW_PIN,DIO_LOW);
    1c3a:	83 e0       	ldi	r24, 0x03	; 3
    1c3c:	61 e0       	ldi	r22, 0x01	; 1
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
//Send Data To the LCD
	MDIO_voidSetPortValue(LCD_DATA_PORT,A_u8Command);
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c48:	0e 94 63 09 	call	0x12c6	; 0x12c6 <MDIO_voidSetPortValue>

//Set PUlse on E PIN with 2ms delay
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_HIGH);
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	41 e0       	ldi	r20, 0x01	; 1
    1c52:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e0       	ldi	r26, 0x00	; 0
    1c5c:	b0 e4       	ldi	r27, 0x40	; 64
    1c5e:	8b 87       	std	Y+11, r24	; 0x0b
    1c60:	9c 87       	std	Y+12, r25	; 0x0c
    1c62:	ad 87       	std	Y+13, r26	; 0x0d
    1c64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a ef       	ldi	r20, 0xFA	; 250
    1c74:	54 e4       	ldi	r21, 0x44	; 68
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8f 83       	std	Y+7, r24	; 0x07
    1c80:	98 87       	std	Y+8, r25	; 0x08
    1c82:	a9 87       	std	Y+9, r26	; 0x09
    1c84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c86:	6f 81       	ldd	r22, Y+7	; 0x07
    1c88:	78 85       	ldd	r23, Y+8	; 0x08
    1c8a:	89 85       	ldd	r24, Y+9	; 0x09
    1c8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <HLCD_voidSendCommand+0x8e>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <HLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    1ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    1caa:	78 85       	ldd	r23, Y+8	; 0x08
    1cac:	89 85       	ldd	r24, Y+9	; 0x09
    1cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <HLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cc4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cc6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9e 83       	std	Y+6, r25	; 0x06
    1ce6:	8d 83       	std	Y+5, r24	; 0x05
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <HLCD_voidSendCommand+0xee>
    1cea:	88 ec       	ldi	r24, 0xC8	; 200
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	9c 83       	std	Y+4, r25	; 0x04
    1cf0:	8b 83       	std	Y+3, r24	; 0x03
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <HLCD_voidSendCommand+0xdc>
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	8d 81       	ldd	r24, Y+5	; 0x05
    1d00:	9e 81       	ldd	r25, Y+6	; 0x06
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9e 83       	std	Y+6, r25	; 0x06
    1d06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <HLCD_voidSendCommand+0xd0>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <HLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	8d 81       	ldd	r24, Y+5	; 0x05
    1d28:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	9a 81       	ldd	r25, Y+2	; 0x02
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <HLCD_voidSendCommand+0x118>
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_voidSetPinValue(LCD_CONTROL_PORT,LCD_E_PIN,DIO_LOW);
    1d3a:	83 e0       	ldi	r24, 0x03	; 3
    1d3c:	62 e0       	ldi	r22, 0x02	; 2
    1d3e:	40 e0       	ldi	r20, 0x00	; 0
    1d40:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    1d44:	2f 96       	adiw	r28, 0x0f	; 15
    1d46:	0f b6       	in	r0, 0x3f	; 63
    1d48:	f8 94       	cli
    1d4a:	de bf       	out	0x3e, r29	; 62
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	cd bf       	out	0x3d, r28	; 61
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <HLCD_voidInit>:

void HLCD_voidInit(void)
{
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	cd b7       	in	r28, 0x3d	; 61
    1d60:	de b7       	in	r29, 0x3e	; 62
    1d62:	cc 54       	subi	r28, 0x4C	; 76
    1d64:	d0 40       	sbci	r29, 0x00	; 0
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	fe 01       	movw	r30, r28
    1d72:	e7 5b       	subi	r30, 0xB7	; 183
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 ef       	ldi	r26, 0xF0	; 240
    1d7c:	b1 e4       	ldi	r27, 0x41	; 65
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	8e 01       	movw	r16, r28
    1d88:	0b 5b       	subi	r16, 0xBB	; 187
    1d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8c:	fe 01       	movw	r30, r28
    1d8e:	e7 5b       	subi	r30, 0xB7	; 183
    1d90:	ff 4f       	sbci	r31, 0xFF	; 255
    1d92:	60 81       	ld	r22, Z
    1d94:	71 81       	ldd	r23, Z+1	; 0x01
    1d96:	82 81       	ldd	r24, Z+2	; 0x02
    1d98:	93 81       	ldd	r25, Z+3	; 0x03
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	4a ef       	ldi	r20, 0xFA	; 250
    1da0:	54 e4       	ldi	r21, 0x44	; 68
    1da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	f8 01       	movw	r30, r16
    1dac:	80 83       	st	Z, r24
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	a2 83       	std	Z+2, r26	; 0x02
    1db2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1db4:	fe 01       	movw	r30, r28
    1db6:	eb 5b       	subi	r30, 0xBB	; 187
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	44 f4       	brge	.+16     	; 0x1de2 <HLCD_voidInit+0x8c>
		__ticks = 1;
    1dd2:	fe 01       	movw	r30, r28
    1dd4:	ed 5b       	subi	r30, 0xBD	; 189
    1dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	91 83       	std	Z+1, r25	; 0x01
    1dde:	80 83       	st	Z, r24
    1de0:	64 c0       	rjmp	.+200    	; 0x1eaa <HLCD_voidInit+0x154>
	else if (__tmp > 65535)
    1de2:	fe 01       	movw	r30, r28
    1de4:	eb 5b       	subi	r30, 0xBB	; 187
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	82 81       	ldd	r24, Z+2	; 0x02
    1dee:	93 81       	ldd	r25, Z+3	; 0x03
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	3f ef       	ldi	r19, 0xFF	; 255
    1df4:	4f e7       	ldi	r20, 0x7F	; 127
    1df6:	57 e4       	ldi	r21, 0x47	; 71
    1df8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dfc:	18 16       	cp	r1, r24
    1dfe:	0c f0       	brlt	.+2      	; 0x1e02 <HLCD_voidInit+0xac>
    1e00:	43 c0       	rjmp	.+134    	; 0x1e88 <HLCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e02:	fe 01       	movw	r30, r28
    1e04:	e7 5b       	subi	r30, 0xB7	; 183
    1e06:	ff 4f       	sbci	r31, 0xFF	; 255
    1e08:	60 81       	ld	r22, Z
    1e0a:	71 81       	ldd	r23, Z+1	; 0x01
    1e0c:	82 81       	ldd	r24, Z+2	; 0x02
    1e0e:	93 81       	ldd	r25, Z+3	; 0x03
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e2       	ldi	r20, 0x20	; 32
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e1c:	dc 01       	movw	r26, r24
    1e1e:	cb 01       	movw	r24, r22
    1e20:	8e 01       	movw	r16, r28
    1e22:	0d 5b       	subi	r16, 0xBD	; 189
    1e24:	1f 4f       	sbci	r17, 0xFF	; 255
    1e26:	bc 01       	movw	r22, r24
    1e28:	cd 01       	movw	r24, r26
    1e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2e:	dc 01       	movw	r26, r24
    1e30:	cb 01       	movw	r24, r22
    1e32:	f8 01       	movw	r30, r16
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	1f c0       	rjmp	.+62     	; 0x1e78 <HLCD_voidInit+0x122>
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	ef 5b       	subi	r30, 0xBF	; 191
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	88 ec       	ldi	r24, 0xC8	; 200
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	fe 01       	movw	r30, r28
    1e4a:	ef 5b       	subi	r30, 0xBF	; 191
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 81       	ld	r24, Z
    1e50:	91 81       	ldd	r25, Z+1	; 0x01
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <HLCD_voidInit+0xfc>
    1e56:	fe 01       	movw	r30, r28
    1e58:	ef 5b       	subi	r30, 0xBF	; 191
    1e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e60:	de 01       	movw	r26, r28
    1e62:	ad 5b       	subi	r26, 0xBD	; 189
    1e64:	bf 4f       	sbci	r27, 0xFF	; 255
    1e66:	fe 01       	movw	r30, r28
    1e68:	ed 5b       	subi	r30, 0xBD	; 189
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	91 81       	ldd	r25, Z+1	; 0x01
    1e70:	01 97       	sbiw	r24, 0x01	; 1
    1e72:	11 96       	adiw	r26, 0x01	; 1
    1e74:	9c 93       	st	X, r25
    1e76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e78:	fe 01       	movw	r30, r28
    1e7a:	ed 5b       	subi	r30, 0xBD	; 189
    1e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e7e:	80 81       	ld	r24, Z
    1e80:	91 81       	ldd	r25, Z+1	; 0x01
    1e82:	00 97       	sbiw	r24, 0x00	; 0
    1e84:	d1 f6       	brne	.-76     	; 0x1e3a <HLCD_voidInit+0xe4>
    1e86:	24 c0       	rjmp	.+72     	; 0x1ed0 <HLCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e88:	8e 01       	movw	r16, r28
    1e8a:	0d 5b       	subi	r16, 0xBD	; 189
    1e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8e:	fe 01       	movw	r30, r28
    1e90:	eb 5b       	subi	r30, 0xBB	; 187
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	60 81       	ld	r22, Z
    1e96:	71 81       	ldd	r23, Z+1	; 0x01
    1e98:	82 81       	ldd	r24, Z+2	; 0x02
    1e9a:	93 81       	ldd	r25, Z+3	; 0x03
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	f8 01       	movw	r30, r16
    1ea6:	91 83       	std	Z+1, r25	; 0x01
    1ea8:	80 83       	st	Z, r24
    1eaa:	fe 01       	movw	r30, r28
    1eac:	ed 5b       	subi	r30, 0xBD	; 189
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	80 81       	ld	r24, Z
    1eb2:	91 81       	ldd	r25, Z+1	; 0x01
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	ff 96       	adiw	r30, 0x3f	; 63
    1eb8:	91 83       	std	Z+1, r25	; 0x01
    1eba:	80 83       	st	Z, r24
    1ebc:	fe 01       	movw	r30, r28
    1ebe:	ff 96       	adiw	r30, 0x3f	; 63
    1ec0:	80 81       	ld	r24, Z
    1ec2:	91 81       	ldd	r25, Z+1	; 0x01
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <HLCD_voidInit+0x16e>
    1ec8:	fe 01       	movw	r30, r28
    1eca:	ff 96       	adiw	r30, 0x3f	; 63
    1ecc:	91 83       	std	Z+1, r25	; 0x01
    1ece:	80 83       	st	Z, r24
	//Wait FOR more than 30ms after VDD rises to 4.5v
	_delay_ms(30);
	//Function Set
	HLCD_voidSendCommand(FUNCTION_SET);
    1ed0:	88 e3       	ldi	r24, 0x38	; 56
    1ed2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b2 e4       	ldi	r27, 0x42	; 66
    1ede:	8b af       	std	Y+59, r24	; 0x3b
    1ee0:	9c af       	std	Y+60, r25	; 0x3c
    1ee2:	ad af       	std	Y+61, r26	; 0x3d
    1ee4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ee6:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ee8:	7c ad       	ldd	r23, Y+60	; 0x3c
    1eea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1eec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1eee:	2b ea       	ldi	r18, 0xAB	; 171
    1ef0:	3a ea       	ldi	r19, 0xAA	; 170
    1ef2:	4a e2       	ldi	r20, 0x2A	; 42
    1ef4:	50 e4       	ldi	r21, 0x40	; 64
    1ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1efa:	dc 01       	movw	r26, r24
    1efc:	cb 01       	movw	r24, r22
    1efe:	8f ab       	std	Y+55, r24	; 0x37
    1f00:	98 af       	std	Y+56, r25	; 0x38
    1f02:	a9 af       	std	Y+57, r26	; 0x39
    1f04:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1f06:	6f a9       	ldd	r22, Y+55	; 0x37
    1f08:	78 ad       	ldd	r23, Y+56	; 0x38
    1f0a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f0c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	40 e8       	ldi	r20, 0x80	; 128
    1f14:	5f e3       	ldi	r21, 0x3F	; 63
    1f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f1a:	88 23       	and	r24, r24
    1f1c:	1c f4       	brge	.+6      	; 0x1f24 <HLCD_voidInit+0x1ce>
		__ticks = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	8e ab       	std	Y+54, r24	; 0x36
    1f22:	91 c0       	rjmp	.+290    	; 0x2046 <HLCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1f24:	6f a9       	ldd	r22, Y+55	; 0x37
    1f26:	78 ad       	ldd	r23, Y+56	; 0x38
    1f28:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4f e7       	ldi	r20, 0x7F	; 127
    1f32:	53 e4       	ldi	r21, 0x43	; 67
    1f34:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f38:	18 16       	cp	r1, r24
    1f3a:	0c f0       	brlt	.+2      	; 0x1f3e <HLCD_voidInit+0x1e8>
    1f3c:	7b c0       	rjmp	.+246    	; 0x2034 <HLCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1f3e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f40:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	4a e7       	ldi	r20, 0x7A	; 122
    1f4c:	54 e4       	ldi	r21, 0x44	; 68
    1f4e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f52:	dc 01       	movw	r26, r24
    1f54:	cb 01       	movw	r24, r22
    1f56:	8a ab       	std	Y+50, r24	; 0x32
    1f58:	9b ab       	std	Y+51, r25	; 0x33
    1f5a:	ac ab       	std	Y+52, r26	; 0x34
    1f5c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5e:	6a a9       	ldd	r22, Y+50	; 0x32
    1f60:	7b a9       	ldd	r23, Y+51	; 0x33
    1f62:	8c a9       	ldd	r24, Y+52	; 0x34
    1f64:	9d a9       	ldd	r25, Y+53	; 0x35
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	4a ef       	ldi	r20, 0xFA	; 250
    1f6c:	54 e4       	ldi	r21, 0x44	; 68
    1f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	8e a7       	std	Y+46, r24	; 0x2e
    1f78:	9f a7       	std	Y+47, r25	; 0x2f
    1f7a:	a8 ab       	std	Y+48, r26	; 0x30
    1f7c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f82:	88 a9       	ldd	r24, Y+48	; 0x30
    1f84:	99 a9       	ldd	r25, Y+49	; 0x31
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e8       	ldi	r20, 0x80	; 128
    1f8c:	5f e3       	ldi	r21, 0x3F	; 63
    1f8e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f92:	88 23       	and	r24, r24
    1f94:	2c f4       	brge	.+10     	; 0x1fa0 <HLCD_voidInit+0x24a>
		__ticks = 1;
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9d a7       	std	Y+45, r25	; 0x2d
    1f9c:	8c a7       	std	Y+44, r24	; 0x2c
    1f9e:	3f c0       	rjmp	.+126    	; 0x201e <HLCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1fa0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fa2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fa4:	88 a9       	ldd	r24, Y+48	; 0x30
    1fa6:	99 a9       	ldd	r25, Y+49	; 0x31
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	3f ef       	ldi	r19, 0xFF	; 255
    1fac:	4f e7       	ldi	r20, 0x7F	; 127
    1fae:	57 e4       	ldi	r21, 0x47	; 71
    1fb0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fb4:	18 16       	cp	r1, r24
    1fb6:	4c f5       	brge	.+82     	; 0x200a <HLCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb8:	6a a9       	ldd	r22, Y+50	; 0x32
    1fba:	7b a9       	ldd	r23, Y+51	; 0x33
    1fbc:	8c a9       	ldd	r24, Y+52	; 0x34
    1fbe:	9d a9       	ldd	r25, Y+53	; 0x35
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 e2       	ldi	r20, 0x20	; 32
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	bc 01       	movw	r22, r24
    1fd2:	cd 01       	movw	r24, r26
    1fd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	9d a7       	std	Y+45, r25	; 0x2d
    1fde:	8c a7       	std	Y+44, r24	; 0x2c
    1fe0:	0f c0       	rjmp	.+30     	; 0x2000 <HLCD_voidInit+0x2aa>
    1fe2:	88 ec       	ldi	r24, 0xC8	; 200
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	9b a7       	std	Y+43, r25	; 0x2b
    1fe8:	8a a7       	std	Y+42, r24	; 0x2a
    1fea:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fec:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fee:	01 97       	sbiw	r24, 0x01	; 1
    1ff0:	f1 f7       	brne	.-4      	; 0x1fee <HLCD_voidInit+0x298>
    1ff2:	9b a7       	std	Y+43, r25	; 0x2b
    1ff4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff6:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ff8:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ffa:	01 97       	sbiw	r24, 0x01	; 1
    1ffc:	9d a7       	std	Y+45, r25	; 0x2d
    1ffe:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2000:	8c a5       	ldd	r24, Y+44	; 0x2c
    2002:	9d a5       	ldd	r25, Y+45	; 0x2d
    2004:	00 97       	sbiw	r24, 0x00	; 0
    2006:	69 f7       	brne	.-38     	; 0x1fe2 <HLCD_voidInit+0x28c>
    2008:	24 c0       	rjmp	.+72     	; 0x2052 <HLCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200a:	6e a5       	ldd	r22, Y+46	; 0x2e
    200c:	7f a5       	ldd	r23, Y+47	; 0x2f
    200e:	88 a9       	ldd	r24, Y+48	; 0x30
    2010:	99 a9       	ldd	r25, Y+49	; 0x31
    2012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2016:	dc 01       	movw	r26, r24
    2018:	cb 01       	movw	r24, r22
    201a:	9d a7       	std	Y+45, r25	; 0x2d
    201c:	8c a7       	std	Y+44, r24	; 0x2c
    201e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2020:	9d a5       	ldd	r25, Y+45	; 0x2d
    2022:	99 a7       	std	Y+41, r25	; 0x29
    2024:	88 a7       	std	Y+40, r24	; 0x28
    2026:	88 a5       	ldd	r24, Y+40	; 0x28
    2028:	99 a5       	ldd	r25, Y+41	; 0x29
    202a:	01 97       	sbiw	r24, 0x01	; 1
    202c:	f1 f7       	brne	.-4      	; 0x202a <HLCD_voidInit+0x2d4>
    202e:	99 a7       	std	Y+41, r25	; 0x29
    2030:	88 a7       	std	Y+40, r24	; 0x28
    2032:	0f c0       	rjmp	.+30     	; 0x2052 <HLCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2034:	6f a9       	ldd	r22, Y+55	; 0x37
    2036:	78 ad       	ldd	r23, Y+56	; 0x38
    2038:	89 ad       	ldd	r24, Y+57	; 0x39
    203a:	9a ad       	ldd	r25, Y+58	; 0x3a
    203c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2040:	dc 01       	movw	r26, r24
    2042:	cb 01       	movw	r24, r22
    2044:	8e ab       	std	Y+54, r24	; 0x36
    2046:	8e a9       	ldd	r24, Y+54	; 0x36
    2048:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    204a:	8f a1       	ldd	r24, Y+39	; 0x27
    204c:	8a 95       	dec	r24
    204e:	f1 f7       	brne	.-4      	; 0x204c <HLCD_voidInit+0x2f6>
    2050:	8f a3       	std	Y+39, r24	; 0x27
	//Wait FOR more than 38us
	_delay_us(40);
   //DISPLAY ON/OFF
	HLCD_voidSendCommand(DISPLAY_ON_OFF_CONTROL);
    2052:	8f e0       	ldi	r24, 0x0F	; 15
    2054:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e2       	ldi	r26, 0x20	; 32
    205e:	b2 e4       	ldi	r27, 0x42	; 66
    2060:	8b a3       	std	Y+35, r24	; 0x23
    2062:	9c a3       	std	Y+36, r25	; 0x24
    2064:	ad a3       	std	Y+37, r26	; 0x25
    2066:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2068:	6b a1       	ldd	r22, Y+35	; 0x23
    206a:	7c a1       	ldd	r23, Y+36	; 0x24
    206c:	8d a1       	ldd	r24, Y+37	; 0x25
    206e:	9e a1       	ldd	r25, Y+38	; 0x26
    2070:	2b ea       	ldi	r18, 0xAB	; 171
    2072:	3a ea       	ldi	r19, 0xAA	; 170
    2074:	4a e2       	ldi	r20, 0x2A	; 42
    2076:	50 e4       	ldi	r21, 0x40	; 64
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 8f       	std	Y+31, r24	; 0x1f
    2082:	98 a3       	std	Y+32, r25	; 0x20
    2084:	a9 a3       	std	Y+33, r26	; 0x21
    2086:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2088:	6f 8d       	ldd	r22, Y+31	; 0x1f
    208a:	78 a1       	ldd	r23, Y+32	; 0x20
    208c:	89 a1       	ldd	r24, Y+33	; 0x21
    208e:	9a a1       	ldd	r25, Y+34	; 0x22
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	1c f4       	brge	.+6      	; 0x20a6 <HLCD_voidInit+0x350>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	8e 8f       	std	Y+30, r24	; 0x1e
    20a4:	91 c0       	rjmp	.+290    	; 0x21c8 <HLCD_voidInit+0x472>
	else if (__tmp > 255)
    20a6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    20a8:	78 a1       	ldd	r23, Y+32	; 0x20
    20aa:	89 a1       	ldd	r24, Y+33	; 0x21
    20ac:	9a a1       	ldd	r25, Y+34	; 0x22
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	4f e7       	ldi	r20, 0x7F	; 127
    20b4:	53 e4       	ldi	r21, 0x43	; 67
    20b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ba:	18 16       	cp	r1, r24
    20bc:	0c f0       	brlt	.+2      	; 0x20c0 <HLCD_voidInit+0x36a>
    20be:	7b c0       	rjmp	.+246    	; 0x21b6 <HLCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    20c0:	6b a1       	ldd	r22, Y+35	; 0x23
    20c2:	7c a1       	ldd	r23, Y+36	; 0x24
    20c4:	8d a1       	ldd	r24, Y+37	; 0x25
    20c6:	9e a1       	ldd	r25, Y+38	; 0x26
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	4a e7       	ldi	r20, 0x7A	; 122
    20ce:	54 e4       	ldi	r21, 0x44	; 68
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	8a 8f       	std	Y+26, r24	; 0x1a
    20da:	9b 8f       	std	Y+27, r25	; 0x1b
    20dc:	ac 8f       	std	Y+28, r26	; 0x1c
    20de:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e0:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20e2:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	4a ef       	ldi	r20, 0xFA	; 250
    20ee:	54 e4       	ldi	r21, 0x44	; 68
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 8b       	std	Y+22, r24	; 0x16
    20fa:	9f 8b       	std	Y+23, r25	; 0x17
    20fc:	a8 8f       	std	Y+24, r26	; 0x18
    20fe:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2100:	6e 89       	ldd	r22, Y+22	; 0x16
    2102:	7f 89       	ldd	r23, Y+23	; 0x17
    2104:	88 8d       	ldd	r24, Y+24	; 0x18
    2106:	99 8d       	ldd	r25, Y+25	; 0x19
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	40 e8       	ldi	r20, 0x80	; 128
    210e:	5f e3       	ldi	r21, 0x3F	; 63
    2110:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2114:	88 23       	and	r24, r24
    2116:	2c f4       	brge	.+10     	; 0x2122 <HLCD_voidInit+0x3cc>
		__ticks = 1;
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9d 8b       	std	Y+21, r25	; 0x15
    211e:	8c 8b       	std	Y+20, r24	; 0x14
    2120:	3f c0       	rjmp	.+126    	; 0x21a0 <HLCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2122:	6e 89       	ldd	r22, Y+22	; 0x16
    2124:	7f 89       	ldd	r23, Y+23	; 0x17
    2126:	88 8d       	ldd	r24, Y+24	; 0x18
    2128:	99 8d       	ldd	r25, Y+25	; 0x19
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	3f ef       	ldi	r19, 0xFF	; 255
    212e:	4f e7       	ldi	r20, 0x7F	; 127
    2130:	57 e4       	ldi	r21, 0x47	; 71
    2132:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2136:	18 16       	cp	r1, r24
    2138:	4c f5       	brge	.+82     	; 0x218c <HLCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    213c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    213e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2140:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2142:	20 e0       	ldi	r18, 0x00	; 0
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	40 e2       	ldi	r20, 0x20	; 32
    2148:	51 e4       	ldi	r21, 0x41	; 65
    214a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	bc 01       	movw	r22, r24
    2154:	cd 01       	movw	r24, r26
    2156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	9d 8b       	std	Y+21, r25	; 0x15
    2160:	8c 8b       	std	Y+20, r24	; 0x14
    2162:	0f c0       	rjmp	.+30     	; 0x2182 <HLCD_voidInit+0x42c>
    2164:	88 ec       	ldi	r24, 0xC8	; 200
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	9b 8b       	std	Y+19, r25	; 0x13
    216a:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    216c:	8a 89       	ldd	r24, Y+18	; 0x12
    216e:	9b 89       	ldd	r25, Y+19	; 0x13
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	f1 f7       	brne	.-4      	; 0x2170 <HLCD_voidInit+0x41a>
    2174:	9b 8b       	std	Y+19, r25	; 0x13
    2176:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2178:	8c 89       	ldd	r24, Y+20	; 0x14
    217a:	9d 89       	ldd	r25, Y+21	; 0x15
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	9d 8b       	std	Y+21, r25	; 0x15
    2180:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2182:	8c 89       	ldd	r24, Y+20	; 0x14
    2184:	9d 89       	ldd	r25, Y+21	; 0x15
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	69 f7       	brne	.-38     	; 0x2164 <HLCD_voidInit+0x40e>
    218a:	24 c0       	rjmp	.+72     	; 0x21d4 <HLCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218c:	6e 89       	ldd	r22, Y+22	; 0x16
    218e:	7f 89       	ldd	r23, Y+23	; 0x17
    2190:	88 8d       	ldd	r24, Y+24	; 0x18
    2192:	99 8d       	ldd	r25, Y+25	; 0x19
    2194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2198:	dc 01       	movw	r26, r24
    219a:	cb 01       	movw	r24, r22
    219c:	9d 8b       	std	Y+21, r25	; 0x15
    219e:	8c 8b       	std	Y+20, r24	; 0x14
    21a0:	8c 89       	ldd	r24, Y+20	; 0x14
    21a2:	9d 89       	ldd	r25, Y+21	; 0x15
    21a4:	99 8b       	std	Y+17, r25	; 0x11
    21a6:	88 8b       	std	Y+16, r24	; 0x10
    21a8:	88 89       	ldd	r24, Y+16	; 0x10
    21aa:	99 89       	ldd	r25, Y+17	; 0x11
    21ac:	01 97       	sbiw	r24, 0x01	; 1
    21ae:	f1 f7       	brne	.-4      	; 0x21ac <HLCD_voidInit+0x456>
    21b0:	99 8b       	std	Y+17, r25	; 0x11
    21b2:	88 8b       	std	Y+16, r24	; 0x10
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <HLCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21b6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    21b8:	78 a1       	ldd	r23, Y+32	; 0x20
    21ba:	89 a1       	ldd	r24, Y+33	; 0x21
    21bc:	9a a1       	ldd	r25, Y+34	; 0x22
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	8e 8f       	std	Y+30, r24	; 0x1e
    21c8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    21ca:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ce:	8a 95       	dec	r24
    21d0:	f1 f7       	brne	.-4      	; 0x21ce <HLCD_voidInit+0x478>
    21d2:	8f 87       	std	Y+15, r24	; 0x0f
	//Wait FOR more than 38us
	_delay_us(40);
	//DISPLAY clear
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e0       	ldi	r26, 0x00	; 0
    21e0:	b0 e4       	ldi	r27, 0x40	; 64
    21e2:	8b 87       	std	Y+11, r24	; 0x0b
    21e4:	9c 87       	std	Y+12, r25	; 0x0c
    21e6:	ad 87       	std	Y+13, r26	; 0x0d
    21e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a ef       	ldi	r20, 0xFA	; 250
    21f8:	54 e4       	ldi	r21, 0x44	; 68
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8f 83       	std	Y+7, r24	; 0x07
    2204:	98 87       	std	Y+8, r25	; 0x08
    2206:	a9 87       	std	Y+9, r26	; 0x09
    2208:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220a:	6f 81       	ldd	r22, Y+7	; 0x07
    220c:	78 85       	ldd	r23, Y+8	; 0x08
    220e:	89 85       	ldd	r24, Y+9	; 0x09
    2210:	9a 85       	ldd	r25, Y+10	; 0x0a
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <HLCD_voidInit+0x4d6>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9e 83       	std	Y+6, r25	; 0x06
    2228:	8d 83       	std	Y+5, r24	; 0x05
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <HLCD_voidInit+0x554>
	else if (__tmp > 65535)
    222c:	6f 81       	ldd	r22, Y+7	; 0x07
    222e:	78 85       	ldd	r23, Y+8	; 0x08
    2230:	89 85       	ldd	r24, Y+9	; 0x09
    2232:	9a 85       	ldd	r25, Y+10	; 0x0a
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <HLCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	6b 85       	ldd	r22, Y+11	; 0x0b
    2246:	7c 85       	ldd	r23, Y+12	; 0x0c
    2248:	8d 85       	ldd	r24, Y+13	; 0x0d
    224a:	9e 85       	ldd	r25, Y+14	; 0x0e
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9e 83       	std	Y+6, r25	; 0x06
    226a:	8d 83       	std	Y+5, r24	; 0x05
    226c:	0f c0       	rjmp	.+30     	; 0x228c <HLCD_voidInit+0x536>
    226e:	88 ec       	ldi	r24, 0xC8	; 200
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	9c 83       	std	Y+4, r25	; 0x04
    2274:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <HLCD_voidInit+0x524>
    227e:	9c 83       	std	Y+4, r25	; 0x04
    2280:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8d 81       	ldd	r24, Y+5	; 0x05
    2284:	9e 81       	ldd	r25, Y+6	; 0x06
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <HLCD_voidInit+0x518>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <HLCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6f 81       	ldd	r22, Y+7	; 0x07
    2298:	78 85       	ldd	r23, Y+8	; 0x08
    229a:	89 85       	ldd	r24, Y+9	; 0x09
    229c:	9a 85       	ldd	r25, Y+10	; 0x0a
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9e 83       	std	Y+6, r25	; 0x06
    22a8:	8d 83       	std	Y+5, r24	; 0x05
    22aa:	8d 81       	ldd	r24, Y+5	; 0x05
    22ac:	9e 81       	ldd	r25, Y+6	; 0x06
    22ae:	9a 83       	std	Y+2, r25	; 0x02
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	89 81       	ldd	r24, Y+1	; 0x01
    22b4:	9a 81       	ldd	r25, Y+2	; 0x02
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <HLCD_voidInit+0x560>
    22ba:	9a 83       	std	Y+2, r25	; 0x02
    22bc:	89 83       	std	Y+1, r24	; 0x01
	//Wait FOR more than 1.53ms
	_delay_ms(2);
	//Entry Mode set
	HLCD_voidSendCommand(ENTRY_MODE_SET);
    22be:	86 e0       	ldi	r24, 0x06	; 6
    22c0:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>

}
    22c4:	c4 5b       	subi	r28, 0xB4	; 180
    22c6:	df 4f       	sbci	r29, 0xFF	; 255
    22c8:	0f b6       	in	r0, 0x3f	; 63
    22ca:	f8 94       	cli
    22cc:	de bf       	out	0x3e, r29	; 62
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	cd bf       	out	0x3d, r28	; 61
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	1f 91       	pop	r17
    22d8:	0f 91       	pop	r16
    22da:	08 95       	ret

000022dc <HLCD_voidDisplayClear>:
void HLCD_voidDisplayClear(void)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	2e 97       	sbiw	r28, 0x0e	; 14
    22e6:	0f b6       	in	r0, 0x3f	; 63
    22e8:	f8 94       	cli
    22ea:	de bf       	out	0x3e, r29	; 62
    22ec:	0f be       	out	0x3f, r0	; 63
    22ee:	cd bf       	out	0x3d, r28	; 61
	//DISPLAY clear
	HLCD_voidSendCommand(DISPLAY_CLEAR);
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    22f6:	80 e0       	ldi	r24, 0x00	; 0
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	a0 e0       	ldi	r26, 0x00	; 0
    22fc:	b0 e4       	ldi	r27, 0x40	; 64
    22fe:	8b 87       	std	Y+11, r24	; 0x0b
    2300:	9c 87       	std	Y+12, r25	; 0x0c
    2302:	ad 87       	std	Y+13, r26	; 0x0d
    2304:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6b 85       	ldd	r22, Y+11	; 0x0b
    2308:	7c 85       	ldd	r23, Y+12	; 0x0c
    230a:	8d 85       	ldd	r24, Y+13	; 0x0d
    230c:	9e 85       	ldd	r25, Y+14	; 0x0e
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a ef       	ldi	r20, 0xFA	; 250
    2314:	54 e4       	ldi	r21, 0x44	; 68
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	8f 83       	std	Y+7, r24	; 0x07
    2320:	98 87       	std	Y+8, r25	; 0x08
    2322:	a9 87       	std	Y+9, r26	; 0x09
    2324:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2326:	6f 81       	ldd	r22, Y+7	; 0x07
    2328:	78 85       	ldd	r23, Y+8	; 0x08
    232a:	89 85       	ldd	r24, Y+9	; 0x09
    232c:	9a 85       	ldd	r25, Y+10	; 0x0a
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <HLCD_voidDisplayClear+0x6c>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9e 83       	std	Y+6, r25	; 0x06
    2344:	8d 83       	std	Y+5, r24	; 0x05
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <HLCD_voidDisplayClear+0xea>
	else if (__tmp > 65535)
    2348:	6f 81       	ldd	r22, Y+7	; 0x07
    234a:	78 85       	ldd	r23, Y+8	; 0x08
    234c:	89 85       	ldd	r24, Y+9	; 0x09
    234e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <HLCD_voidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6b 85       	ldd	r22, Y+11	; 0x0b
    2362:	7c 85       	ldd	r23, Y+12	; 0x0c
    2364:	8d 85       	ldd	r24, Y+13	; 0x0d
    2366:	9e 85       	ldd	r25, Y+14	; 0x0e
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9e 83       	std	Y+6, r25	; 0x06
    2386:	8d 83       	std	Y+5, r24	; 0x05
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <HLCD_voidDisplayClear+0xcc>
    238a:	88 ec       	ldi	r24, 0xC8	; 200
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
    2392:	8b 81       	ldd	r24, Y+3	; 0x03
    2394:	9c 81       	ldd	r25, Y+4	; 0x04
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <HLCD_voidDisplayClear+0xba>
    239a:	9c 83       	std	Y+4, r25	; 0x04
    239c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8d 81       	ldd	r24, Y+5	; 0x05
    23a0:	9e 81       	ldd	r25, Y+6	; 0x06
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9e 83       	std	Y+6, r25	; 0x06
    23a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <HLCD_voidDisplayClear+0xae>
    23b0:	14 c0       	rjmp	.+40     	; 0x23da <HLCD_voidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	6f 81       	ldd	r22, Y+7	; 0x07
    23b4:	78 85       	ldd	r23, Y+8	; 0x08
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e 83       	std	Y+6, r25	; 0x06
    23c4:	8d 83       	std	Y+5, r24	; 0x05
    23c6:	8d 81       	ldd	r24, Y+5	; 0x05
    23c8:	9e 81       	ldd	r25, Y+6	; 0x06
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <HLCD_voidDisplayClear+0xf6>
    23d6:	9a 83       	std	Y+2, r25	; 0x02
    23d8:	89 83       	std	Y+1, r24	; 0x01
	//Wait FOR more than 1.53ms
	_delay_ms(2);
}
    23da:	2e 96       	adiw	r28, 0x0e	; 14
    23dc:	0f b6       	in	r0, 0x3f	; 63
    23de:	f8 94       	cli
    23e0:	de bf       	out	0x3e, r29	; 62
    23e2:	0f be       	out	0x3f, r0	; 63
    23e4:	cd bf       	out	0x3d, r28	; 61
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <HLCD_voidSendString>:
void HLCD_voidSendString(u8 *A_pu8String)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <HLCD_voidSendString+0x6>
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	9a 83       	std	Y+2, r25	; 0x02
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	0b c0       	rjmp	.+22     	; 0x2412 <HLCD_voidSendString+0x26>
   while(*A_pu8String>0)
  {
	   HLCD_voidSendData(*A_pu8String++);
    23fc:	e9 81       	ldd	r30, Y+1	; 0x01
    23fe:	fa 81       	ldd	r31, Y+2	; 0x02
    2400:	20 81       	ld	r18, Z
    2402:	89 81       	ldd	r24, Y+1	; 0x01
    2404:	9a 81       	ldd	r25, Y+2	; 0x02
    2406:	01 96       	adiw	r24, 0x01	; 1
    2408:	9a 83       	std	Y+2, r25	; 0x02
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	82 2f       	mov	r24, r18
    240e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	//Wait FOR more than 1.53ms
	_delay_ms(2);
}
void HLCD_voidSendString(u8 *A_pu8String)
{
   while(*A_pu8String>0)
    2412:	e9 81       	ldd	r30, Y+1	; 0x01
    2414:	fa 81       	ldd	r31, Y+2	; 0x02
    2416:	80 81       	ld	r24, Z
    2418:	88 23       	and	r24, r24
    241a:	81 f7       	brne	.-32     	; 0x23fc <HLCD_voidSendString+0x10>
  {
	   HLCD_voidSendData(*A_pu8String++);
  }
}
    241c:	0f 90       	pop	r0
    241e:	0f 90       	pop	r0
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <HLCD_voidGoToPosition>:


void HLCD_voidGoToPosition(u8 A_u8Row,u8 A_u8Column)
{
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	00 d0       	rcall	.+0      	; 0x242c <HLCD_voidGoToPosition+0x6>
    242c:	00 d0       	rcall	.+0      	; 0x242e <HLCD_voidGoToPosition+0x8>
    242e:	cd b7       	in	r28, 0x3d	; 61
    2430:	de b7       	in	r29, 0x3e	; 62
    2432:	89 83       	std	Y+1, r24	; 0x01
    2434:	6a 83       	std	Y+2, r22	; 0x02
switch(A_u8Row)
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	28 2f       	mov	r18, r24
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	3c 83       	std	Y+4, r19	; 0x04
    243e:	2b 83       	std	Y+3, r18	; 0x03
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	81 30       	cpi	r24, 0x01	; 1
    2446:	91 05       	cpc	r25, r1
    2448:	31 f0       	breq	.+12     	; 0x2456 <HLCD_voidGoToPosition+0x30>
    244a:	2b 81       	ldd	r18, Y+3	; 0x03
    244c:	3c 81       	ldd	r19, Y+4	; 0x04
    244e:	22 30       	cpi	r18, 0x02	; 2
    2450:	31 05       	cpc	r19, r1
    2452:	31 f0       	breq	.+12     	; 0x2460 <HLCD_voidGoToPosition+0x3a>
    2454:	09 c0       	rjmp	.+18     	; 0x2468 <HLCD_voidGoToPosition+0x42>
{
case LCD_ROW_ONE: HLCD_voidSendCommand(LCD_ROW1_ADDRESS+A_u8Column); break;
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	81 58       	subi	r24, 0x81	; 129
    245a:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    245e:	04 c0       	rjmp	.+8      	; 0x2468 <HLCD_voidGoToPosition+0x42>
case LCD_ROW_TWO: HLCD_voidSendCommand(LCD_ROW2_ADDRESS+A_u8Column); break;
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	81 54       	subi	r24, 0x41	; 65
    2464:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
default: break;
}
}
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	cf 91       	pop	r28
    2472:	df 91       	pop	r29
    2474:	08 95       	ret

00002476 <HLCD_voidDisplayNumber>:

void HLCD_voidDisplayNumber(u32 A_u32Number)
{
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	00 d0       	rcall	.+0      	; 0x247c <HLCD_voidDisplayNumber+0x6>
    247c:	00 d0       	rcall	.+0      	; 0x247e <HLCD_voidDisplayNumber+0x8>
    247e:	cd b7       	in	r28, 0x3d	; 61
    2480:	de b7       	in	r29, 0x3e	; 62
    2482:	9c 83       	std	Y+4, r25	; 0x04
    2484:	8b 83       	std	Y+3, r24	; 0x03
u32 local_u32Number=1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	9a 83       	std	Y+2, r25	; 0x02
    248c:	89 83       	std	Y+1, r24	; 0x01
if(A_u32Number==0)
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	31 f5       	brne	.+76     	; 0x24e2 <HLCD_voidDisplayNumber+0x6c>
{
HLCD_voidSendCommand('0');
    2496:	80 e3       	ldi	r24, 0x30	; 48
    2498:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>
    249c:	22 c0       	rjmp	.+68     	; 0x24e2 <HLCD_voidDisplayNumber+0x6c>
}
while(A_u32Number!=0)
{
	//1-->local_u32Number=(1*10)+(75%10)=10+5=15
	//2-->local_u32Number=(15*10)+(7%10)=150+7=157
	local_u32Number=((local_u32Number*10)+(A_u32Number%10));
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	9c 01       	movw	r18, r24
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	c9 01       	movw	r24, r18
    24aa:	88 0f       	add	r24, r24
    24ac:	99 1f       	adc	r25, r25
    24ae:	88 0f       	add	r24, r24
    24b0:	99 1f       	adc	r25, r25
    24b2:	f9 01       	movw	r30, r18
    24b4:	e8 0f       	add	r30, r24
    24b6:	f9 1f       	adc	r31, r25
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	2a e0       	ldi	r18, 0x0A	; 10
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	b9 01       	movw	r22, r18
    24c2:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodhi4>
    24c6:	8e 0f       	add	r24, r30
    24c8:	9f 1f       	adc	r25, r31
    24ca:	9a 83       	std	Y+2, r25	; 0x02
    24cc:	89 83       	std	Y+1, r24	; 0x01
	//1-->A_u32Number=75/10=7.5=7
	//2-->A_u32Number=7/10=0.7=0
	A_u32Number=A_u32Number/10;
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	2a e0       	ldi	r18, 0x0A	; 10
    24d4:	30 e0       	ldi	r19, 0x00	; 0
    24d6:	b9 01       	movw	r22, r18
    24d8:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodhi4>
    24dc:	cb 01       	movw	r24, r22
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
u32 local_u32Number=1;
if(A_u32Number==0)
{
HLCD_voidSendCommand('0');
}
while(A_u32Number!=0)
    24e2:	8b 81       	ldd	r24, Y+3	; 0x03
    24e4:	9c 81       	ldd	r25, Y+4	; 0x04
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	d1 f6       	brne	.-76     	; 0x249e <HLCD_voidDisplayNumber+0x28>
    24ea:	14 c0       	rjmp	.+40     	; 0x2514 <HLCD_voidDisplayNumber+0x9e>
}
while(local_u32Number!=1)
{
	//1-->(157%10)+48=7+48=55       55 by ASCII is 7
	//2-->(15% 10)+48=5+48=53       53 by ASCII is 5
	HLCD_voidSendData((local_u32Number%10)+48);
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	9a 81       	ldd	r25, Y+2	; 0x02
    24f0:	2a e0       	ldi	r18, 0x0A	; 10
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	b9 01       	movw	r22, r18
    24f6:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodhi4>
    24fa:	80 5d       	subi	r24, 0xD0	; 208
    24fc:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	//1-->157/10=15
	//2-->15/10=1.5=1
	local_u32Number=local_u32Number/10;
    2500:	89 81       	ldd	r24, Y+1	; 0x01
    2502:	9a 81       	ldd	r25, Y+2	; 0x02
    2504:	2a e0       	ldi	r18, 0x0A	; 10
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	b9 01       	movw	r22, r18
    250a:	0e 94 8e 1d 	call	0x3b1c	; 0x3b1c <__udivmodhi4>
    250e:	cb 01       	movw	r24, r22
    2510:	9a 83       	std	Y+2, r25	; 0x02
    2512:	89 83       	std	Y+1, r24	; 0x01
	local_u32Number=((local_u32Number*10)+(A_u32Number%10));
	//1-->A_u32Number=75/10=7.5=7
	//2-->A_u32Number=7/10=0.7=0
	A_u32Number=A_u32Number/10;
}
while(local_u32Number!=1)
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	9a 81       	ldd	r25, Y+2	; 0x02
    2518:	81 30       	cpi	r24, 0x01	; 1
    251a:	91 05       	cpc	r25, r1
    251c:	39 f7       	brne	.-50     	; 0x24ec <HLCD_voidDisplayNumber+0x76>
	HLCD_voidSendData((local_u32Number%10)+48);
	//1-->157/10=15
	//2-->15/10=1.5=1
	local_u32Number=local_u32Number/10;
}
}
    251e:	0f 90       	pop	r0
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	cf 91       	pop	r28
    2528:	df 91       	pop	r29
    252a:	08 95       	ret

0000252c <HLCD_voidSpecialCharacter>:

void HLCD_voidSpecialCharacter(u8 *A_pu8CharArr,u8 A_u8PatternNumber,u8 A_u8RowNumber,u8 A_u8ColumnNumber)
{
    252c:	df 93       	push	r29
    252e:	cf 93       	push	r28
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	27 97       	sbiw	r28, 0x07	; 7
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	6d 83       	std	Y+5, r22	; 0x05
    2546:	4e 83       	std	Y+6, r20	; 0x06
    2548:	2f 83       	std	Y+7, r18	; 0x07
	u8 local_u8CGRAMAddress,local_u8Counter;
	/* Calculate CGRAM Address = Pattern Number * 8 */
	local_u8CGRAMAddress=A_u8PatternNumber*8;
    254a:	8d 81       	ldd	r24, Y+5	; 0x05
    254c:	88 2f       	mov	r24, r24
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	88 0f       	add	r24, r24
    2552:	99 1f       	adc	r25, r25
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	8a 83       	std	Y+2, r24	; 0x02
	SET_BIT(local_u8CGRAMAddress,6);
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	80 64       	ori	r24, 0x40	; 64
    2562:	8a 83       	std	Y+2, r24	; 0x02
	/* Send Command to set CGRAM Address */
	HLCD_voidSendCommand(local_u8CGRAMAddress);
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <HLCD_voidSendCommand>

	for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	0e c0       	rjmp	.+28     	; 0x258a <HLCD_voidSpecialCharacter+0x5e>
	{
		/* Send byte from character array */
		HLCD_voidSendData(A_pu8CharArr[local_u8Counter]);
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	8b 81       	ldd	r24, Y+3	; 0x03
    2576:	9c 81       	ldd	r25, Y+4	; 0x04
    2578:	fc 01       	movw	r30, r24
    257a:	e2 0f       	add	r30, r18
    257c:	f3 1f       	adc	r31, r19
    257e:	80 81       	ld	r24, Z
    2580:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>
	local_u8CGRAMAddress=A_u8PatternNumber*8;
	SET_BIT(local_u8CGRAMAddress,6);
	/* Send Command to set CGRAM Address */
	HLCD_voidSendCommand(local_u8CGRAMAddress);

	for(local_u8Counter=0;local_u8Counter<8;local_u8Counter++)
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	8f 5f       	subi	r24, 0xFF	; 255
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	88 30       	cpi	r24, 0x08	; 8
    258e:	78 f3       	brcs	.-34     	; 0x256e <HLCD_voidSpecialCharacter+0x42>
	{
		/* Send byte from character array */
		HLCD_voidSendData(A_pu8CharArr[local_u8Counter]);
	}
	/* Send Command to set DDRAM Address */
	HLCD_voidGoToPosition(A_u8RowNumber,A_u8ColumnNumber);
    2590:	8e 81       	ldd	r24, Y+6	; 0x06
    2592:	6f 81       	ldd	r22, Y+7	; 0x07
    2594:	0e 94 13 12 	call	0x2426	; 0x2426 <HLCD_voidGoToPosition>
	/* Display pattern from CGRAM */
	HLCD_voidSendData(A_u8PatternNumber);
    2598:	8d 81       	ldd	r24, Y+5	; 0x05
    259a:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <HLCD_voidSendData>

}
    259e:	27 96       	adiw	r28, 0x07	; 7
    25a0:	0f b6       	in	r0, 0x3f	; 63
    25a2:	f8 94       	cli
    25a4:	de bf       	out	0x3e, r29	; 62
    25a6:	0f be       	out	0x3f, r0	; 63
    25a8:	cd bf       	out	0x3d, r28	; 61
    25aa:	cf 91       	pop	r28
    25ac:	df 91       	pop	r29
    25ae:	08 95       	ret

000025b0 <HLED_voidTurnOn>:
#include "../include/HAL/LED/LED_interface.h"
#include "../include/HAL/LED/LED_private.h"
#include "../include/HAL/LED/LED_configuration.h"

void HLED_voidTurnOn(u8 A_u8PortID, u8 A_u8PinId)
{
    25b0:	df 93       	push	r29
    25b2:	cf 93       	push	r28
    25b4:	00 d0       	rcall	.+0      	; 0x25b6 <HLED_voidTurnOn+0x6>
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	89 83       	std	Y+1, r24	; 0x01
    25bc:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_ON);
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	6a 81       	ldd	r22, Y+2	; 0x02
    25c2:	41 e0       	ldi	r20, 0x01	; 1
    25c4:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    25c8:	0f 90       	pop	r0
    25ca:	0f 90       	pop	r0
    25cc:	cf 91       	pop	r28
    25ce:	df 91       	pop	r29
    25d0:	08 95       	ret

000025d2 <HLED_voidTurnOff>:
void HLED_voidTurnOff(u8 A_u8PortID, u8 A_u8PinId)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <HLED_voidTurnOff+0x6>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	89 83       	std	Y+1, r24	; 0x01
    25de:	6a 83       	std	Y+2, r22	; 0x02
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, LED_OFF);
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	6a 81       	ldd	r22, Y+2	; 0x02
    25e4:	40 e0       	ldi	r20, 0x00	; 0
    25e6:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	cf 91       	pop	r28
    25f0:	df 91       	pop	r29
    25f2:	08 95       	ret

000025f4 <HLED_voidSetLedStatus>:

// LED_ON - LED_OFF
void HLED_voidSetLedStatus(u8 A_u8PortID, u8 A_u8PinId, u8 A_u8LedStatus)
{
    25f4:	df 93       	push	r29
    25f6:	cf 93       	push	r28
    25f8:	00 d0       	rcall	.+0      	; 0x25fa <HLED_voidSetLedStatus+0x6>
    25fa:	0f 92       	push	r0
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	89 83       	std	Y+1, r24	; 0x01
    2602:	6a 83       	std	Y+2, r22	; 0x02
    2604:	4b 83       	std	Y+3, r20	; 0x03
    MDIO_voidSetPinValue(A_u8PortID, A_u8PinId, A_u8LedStatus);
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	6a 81       	ldd	r22, Y+2	; 0x02
    260a:	4b 81       	ldd	r20, Y+3	; 0x03
    260c:	0e 94 0c 08 	call	0x1018	; 0x1018 <MDIO_voidSetPinValue>
}
    2610:	0f 90       	pop	r0
    2612:	0f 90       	pop	r0
    2614:	0f 90       	pop	r0
    2616:	cf 91       	pop	r28
    2618:	df 91       	pop	r29
    261a:	08 95       	ret

0000261c <HLED_voidToggleLed>:

void HLED_voidToggleLed(u8 A_u8PortID, u8 A_u8PinId)
{
    261c:	df 93       	push	r29
    261e:	cf 93       	push	r28
    2620:	00 d0       	rcall	.+0      	; 0x2622 <HLED_voidToggleLed+0x6>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	89 83       	std	Y+1, r24	; 0x01
    2628:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_voidTogglePinValue(A_u8PortID, A_u8PinId)	;
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	6a 81       	ldd	r22, Y+2	; 0x02
    262e:	0e 94 30 0a 	call	0x1460	; 0x1460 <MDIO_voidTogglePinValue>
}
    2632:	0f 90       	pop	r0
    2634:	0f 90       	pop	r0
    2636:	cf 91       	pop	r28
    2638:	df 91       	pop	r29
    263a:	08 95       	ret

0000263c <HSERVO_voidSetServoAngle>:
#include "../include/MCAL/TIMER1/TIMER1_interface.h"
#include "../include/MCAL/TIMER1/TIMER1_private.h"
#include "../include/MCAL/TIMER1/TIMER1_configuration.h"

void HSERVO_voidSetServoAngle(u16 A_u16Angle)
{
    263c:	df 93       	push	r29
    263e:	cf 93       	push	r28
    2640:	00 d0       	rcall	.+0      	; 0x2642 <HSERVO_voidSetServoAngle+0x6>
    2642:	00 d0       	rcall	.+0      	; 0x2644 <HSERVO_voidSetServoAngle+0x8>
    2644:	cd b7       	in	r28, 0x3d	; 61
    2646:	de b7       	in	r29, 0x3e	; 62
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	8b 83       	std	Y+3, r24	; 0x03
	u16 local_u16OCR1Value=((A_u16Angle*1000UL)/180)+999;
    264c:	8b 81       	ldd	r24, Y+3	; 0x03
    264e:	9c 81       	ldd	r25, Y+4	; 0x04
    2650:	cc 01       	movw	r24, r24
    2652:	a0 e0       	ldi	r26, 0x00	; 0
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	28 ee       	ldi	r18, 0xE8	; 232
    2658:	33 e0       	ldi	r19, 0x03	; 3
    265a:	40 e0       	ldi	r20, 0x00	; 0
    265c:	50 e0       	ldi	r21, 0x00	; 0
    265e:	bc 01       	movw	r22, r24
    2660:	cd 01       	movw	r24, r26
    2662:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <__mulsi3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	24 eb       	ldi	r18, 0xB4	; 180
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e0       	ldi	r20, 0x00	; 0
    2670:	50 e0       	ldi	r21, 0x00	; 0
    2672:	bc 01       	movw	r22, r24
    2674:	cd 01       	movw	r24, r26
    2676:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <__udivmodsi4>
    267a:	da 01       	movw	r26, r20
    267c:	c9 01       	movw	r24, r18
    267e:	89 51       	subi	r24, 0x19	; 25
    2680:	9c 4f       	sbci	r25, 0xFC	; 252
    2682:	9a 83       	std	Y+2, r25	; 0x02
    2684:	89 83       	std	Y+1, r24	; 0x01
	MTIMER1_voidSetOCR1Value(local_u16OCR1Value);
    2686:	89 81       	ldd	r24, Y+1	; 0x01
    2688:	9a 81       	ldd	r25, Y+2	; 0x02
    268a:	0e 94 9b 14 	call	0x2936	; 0x2936 <MTIMER1_voidSetOCR1Value>
}
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	0f 90       	pop	r0
    2696:	cf 91       	pop	r28
    2698:	df 91       	pop	r29
    269a:	08 95       	ret

0000269c <MTIMER0_voidInit>:

void (*TIMER0_OVF_CALLBACK) (void) = NULL;
void (*TIMER0_CTC_CALLBACK) (void) = NULL;

void MTIMER0_voidInit (void)
{
    269c:	df 93       	push	r29
    269e:	cf 93       	push	r28
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_MODE==NORMAL_MODE

	//Waveform Generation Mode Bit
	CLR_BIT(TCCR0,TCCR0_WGM01);
    26a4:	a3 e5       	ldi	r26, 0x53	; 83
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e3 e5       	ldi	r30, 0x53	; 83
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	87 7f       	andi	r24, 0xF7	; 247
    26b0:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM00);
    26b2:	a3 e5       	ldi	r26, 0x53	; 83
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	e3 e5       	ldi	r30, 0x53	; 83
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	80 81       	ld	r24, Z
    26bc:	8f 7b       	andi	r24, 0xBF	; 191
    26be:	8c 93       	st	X, r24
	//Output Compare Match Interrupt Enable
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    26c0:	a9 e5       	ldi	r26, 0x59	; 89
    26c2:	b0 e0       	ldi	r27, 0x00	; 0
    26c4:	e9 e5       	ldi	r30, 0x59	; 89
    26c6:	f0 e0       	ldi	r31, 0x00	; 0
    26c8:	80 81       	ld	r24, Z
    26ca:	8d 7f       	andi	r24, 0xFD	; 253
    26cc:	8c 93       	st	X, r24
	//Overflow Interrupt Enable
    SET_BIT(TIMSK,TIMSK_TOIE0);
    26ce:	a9 e5       	ldi	r26, 0x59	; 89
    26d0:	b0 e0       	ldi	r27, 0x00	; 0
    26d2:	e9 e5       	ldi	r30, 0x59	; 89
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	80 81       	ld	r24, Z
    26d8:	81 60       	ori	r24, 0x01	; 1
    26da:	8c 93       	st	X, r24
    //Clock Select
    TCCR0&=0b11111000;
    26dc:	a3 e5       	ldi	r26, 0x53	; 83
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e3 e5       	ldi	r30, 0x53	; 83
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	88 7f       	andi	r24, 0xF8	; 248
    26e8:	8c 93       	st	X, r24
    TCCR0|=CLK_CONFIGURATION;
    26ea:	a3 e5       	ldi	r26, 0x53	; 83
    26ec:	b0 e0       	ldi	r27, 0x00	; 0
    26ee:	e3 e5       	ldi	r30, 0x53	; 83
    26f0:	f0 e0       	ldi	r31, 0x00	; 0
    26f2:	80 81       	ld	r24, Z
    26f4:	82 60       	ori	r24, 0x02	; 2
    26f6:	8c 93       	st	X, r24

#else
#error WRONG TIMER0 CONFIGURATION
#endif

}
    26f8:	cf 91       	pop	r28
    26fa:	df 91       	pop	r29
    26fc:	08 95       	ret

000026fe <MTIMER0_voidStopTimer>:

void MTIMER0_voidStopTimer(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62

	//TO STOP TIMER CLEAR THE THREE BITS
	CLR_BIT(TCCR0,TCCR0_CS00);
    2706:	a3 e5       	ldi	r26, 0x53	; 83
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e3 e5       	ldi	r30, 0x53	; 83
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8e 7f       	andi	r24, 0xFE	; 254
    2712:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
    2714:	a3 e5       	ldi	r26, 0x53	; 83
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e3 e5       	ldi	r30, 0x53	; 83
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	8d 7f       	andi	r24, 0xFD	; 253
    2720:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    2722:	a3 e5       	ldi	r26, 0x53	; 83
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e3 e5       	ldi	r30, 0x53	; 83
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	8b 7f       	andi	r24, 0xFB	; 251
    272e:	8c 93       	st	X, r24

}
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <MTIMER0_voidSetPreLoadValue>:

void MTIMER0_voidSetPreLoadValue (u8 A_u8PreLoadValue)
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	0f 92       	push	r0
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	89 83       	std	Y+1, r24	; 0x01

	TCNT0=A_u8PreLoadValue;
    2742:	e2 e5       	ldi	r30, 0x52	; 82
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	89 81       	ldd	r24, Y+1	; 0x01
    2748:	80 83       	st	Z, r24
}
    274a:	0f 90       	pop	r0
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <MTIMER0_voidSetOCR0Value>:

void MTIMER0_voidSetOCR0Value(u8 A_u8Value)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01

	OCR0=A_u8Value;
    275e:	ec e5       	ldi	r30, 0x5C	; 92
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	80 83       	st	Z, r24
}
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <MTIMER0_voidSetCallBackOVF>:

void MTIMER0_voidSetCallBackOVF (void (*PtrToFunc) (void))
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <MTIMER0_voidSetCallBackOVF+0x6>
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01

	if(PtrToFunc!=NULL)
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	00 97       	sbiw	r24, 0x00	; 0
    2782:	31 f0       	breq	.+12     	; 0x2790 <MTIMER0_voidSetCallBackOVF+0x22>
	{
		TIMER0_OVF_CALLBACK=PtrToFunc;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	90 93 91 00 	sts	0x0091, r25
    278c:	80 93 90 00 	sts	0x0090, r24
	}
}
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <MTIMER0_voidSetCallBackCTC>:

void MTIMER0_voidSetCallBackCTC (void (*PtrToFunc) (void))
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <MTIMER0_voidSetCallBackCTC+0x6>
    27a0:	cd b7       	in	r28, 0x3d	; 61
    27a2:	de b7       	in	r29, 0x3e	; 62
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01

	if(PtrToFunc!=NULL)
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	00 97       	sbiw	r24, 0x00	; 0
    27ae:	31 f0       	breq	.+12     	; 0x27bc <MTIMER0_voidSetCallBackCTC+0x22>
	{
		TIMER0_CTC_CALLBACK=PtrToFunc;
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	9a 81       	ldd	r25, Y+2	; 0x02
    27b4:	90 93 93 00 	sts	0x0093, r25
    27b8:	80 93 92 00 	sts	0x0092, r24
	}
}
    27bc:	0f 90       	pop	r0
    27be:	0f 90       	pop	r0
    27c0:	cf 91       	pop	r28
    27c2:	df 91       	pop	r29
    27c4:	08 95       	ret

000027c6 <__vector_10>:

void __vector_10(void)  __attribute__((signal));
void __vector_10(void)
{
    27c6:	1f 92       	push	r1
    27c8:	0f 92       	push	r0
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	0f 92       	push	r0
    27ce:	11 24       	eor	r1, r1
    27d0:	2f 93       	push	r18
    27d2:	3f 93       	push	r19
    27d4:	4f 93       	push	r20
    27d6:	5f 93       	push	r21
    27d8:	6f 93       	push	r22
    27da:	7f 93       	push	r23
    27dc:	8f 93       	push	r24
    27de:	9f 93       	push	r25
    27e0:	af 93       	push	r26
    27e2:	bf 93       	push	r27
    27e4:	ef 93       	push	r30
    27e6:	ff 93       	push	r31
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	cd b7       	in	r28, 0x3d	; 61
    27ee:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_CTC_CALLBACK!=NULL)
    27f0:	80 91 92 00 	lds	r24, 0x0092
    27f4:	90 91 93 00 	lds	r25, 0x0093
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	29 f0       	breq	.+10     	; 0x2806 <__vector_10+0x40>
	{
		TIMER0_CTC_CALLBACK();
    27fc:	e0 91 92 00 	lds	r30, 0x0092
    2800:	f0 91 93 00 	lds	r31, 0x0093
    2804:	09 95       	icall
	}
}
    2806:	cf 91       	pop	r28
    2808:	df 91       	pop	r29
    280a:	ff 91       	pop	r31
    280c:	ef 91       	pop	r30
    280e:	bf 91       	pop	r27
    2810:	af 91       	pop	r26
    2812:	9f 91       	pop	r25
    2814:	8f 91       	pop	r24
    2816:	7f 91       	pop	r23
    2818:	6f 91       	pop	r22
    281a:	5f 91       	pop	r21
    281c:	4f 91       	pop	r20
    281e:	3f 91       	pop	r19
    2820:	2f 91       	pop	r18
    2822:	0f 90       	pop	r0
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	0f 90       	pop	r0
    2828:	1f 90       	pop	r1
    282a:	18 95       	reti

0000282c <__vector_11>:

void __vector_11(void)  __attribute__((signal));
void __vector_11(void)
{
    282c:	1f 92       	push	r1
    282e:	0f 92       	push	r0
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	0f 92       	push	r0
    2834:	11 24       	eor	r1, r1
    2836:	2f 93       	push	r18
    2838:	3f 93       	push	r19
    283a:	4f 93       	push	r20
    283c:	5f 93       	push	r21
    283e:	6f 93       	push	r22
    2840:	7f 93       	push	r23
    2842:	8f 93       	push	r24
    2844:	9f 93       	push	r25
    2846:	af 93       	push	r26
    2848:	bf 93       	push	r27
    284a:	ef 93       	push	r30
    284c:	ff 93       	push	r31
    284e:	df 93       	push	r29
    2850:	cf 93       	push	r28
    2852:	cd b7       	in	r28, 0x3d	; 61
    2854:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_OVF_CALLBACK!=NULL)
    2856:	80 91 90 00 	lds	r24, 0x0090
    285a:	90 91 91 00 	lds	r25, 0x0091
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	29 f0       	breq	.+10     	; 0x286c <__vector_11+0x40>
	{
		TIMER0_OVF_CALLBACK();
    2862:	e0 91 90 00 	lds	r30, 0x0090
    2866:	f0 91 91 00 	lds	r31, 0x0091
    286a:	09 95       	icall
	}
}
    286c:	cf 91       	pop	r28
    286e:	df 91       	pop	r29
    2870:	ff 91       	pop	r31
    2872:	ef 91       	pop	r30
    2874:	bf 91       	pop	r27
    2876:	af 91       	pop	r26
    2878:	9f 91       	pop	r25
    287a:	8f 91       	pop	r24
    287c:	7f 91       	pop	r23
    287e:	6f 91       	pop	r22
    2880:	5f 91       	pop	r21
    2882:	4f 91       	pop	r20
    2884:	3f 91       	pop	r19
    2886:	2f 91       	pop	r18
    2888:	0f 90       	pop	r0
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	0f 90       	pop	r0
    288e:	1f 90       	pop	r1
    2890:	18 95       	reti

00002892 <MTIMER1_voidInit>:
#define NULL 0
void (*TIMER1_CALLBACK)(void) = NULL;


void MTIMER1_voidInit(void)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
	//Waveform Generation Mode
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    289a:	af e4       	ldi	r26, 0x4F	; 79
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	ef e4       	ldi	r30, 0x4F	; 79
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	8e 7f       	andi	r24, 0xFE	; 254
    28a6:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    28a8:	af e4       	ldi	r26, 0x4F	; 79
    28aa:	b0 e0       	ldi	r27, 0x00	; 0
    28ac:	ef e4       	ldi	r30, 0x4F	; 79
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	80 81       	ld	r24, Z
    28b2:	82 60       	ori	r24, 0x02	; 2
    28b4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    28b6:	ae e4       	ldi	r26, 0x4E	; 78
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	ee e4       	ldi	r30, 0x4E	; 78
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
    28c0:	88 60       	ori	r24, 0x08	; 8
    28c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    28c4:	ae e4       	ldi	r26, 0x4E	; 78
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	ee e4       	ldi	r30, 0x4E	; 78
    28ca:	f0 e0       	ldi	r31, 0x00	; 0
    28cc:	80 81       	ld	r24, Z
    28ce:	80 61       	ori	r24, 0x10	; 16
    28d0:	8c 93       	st	X, r24
	//Compare Output Mode for Compare unit A
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    28d2:	af e4       	ldi	r26, 0x4F	; 79
    28d4:	b0 e0       	ldi	r27, 0x00	; 0
    28d6:	ef e4       	ldi	r30, 0x4F	; 79
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	80 81       	ld	r24, Z
    28dc:	8f 7b       	andi	r24, 0xBF	; 191
    28de:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    28e0:	af e4       	ldi	r26, 0x4F	; 79
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	ef e4       	ldi	r30, 0x4F	; 79
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	80 68       	ori	r24, 0x80	; 128
    28ec:	8c 93       	st	X, r24
	//SET ICR1 VALUE
	ICR1=19999;
    28ee:	e6 e4       	ldi	r30, 0x46	; 70
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	8f e1       	ldi	r24, 0x1F	; 31
    28f4:	9e e4       	ldi	r25, 0x4E	; 78
    28f6:	91 83       	std	Z+1, r25	; 0x01
    28f8:	80 83       	st	Z, r24
	//SET OCR1A VALUE
	OCR1A=1500;
    28fa:	ea e4       	ldi	r30, 0x4A	; 74
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	8c ed       	ldi	r24, 0xDC	; 220
    2900:	95 e0       	ldi	r25, 0x05	; 5
    2902:	91 83       	std	Z+1, r25	; 0x01
    2904:	80 83       	st	Z, r24
	//CLK CONFIGURATION /8
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    2906:	ae e4       	ldi	r26, 0x4E	; 78
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	ee e4       	ldi	r30, 0x4E	; 78
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	8e 7f       	andi	r24, 0xFE	; 254
    2912:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2914:	ae e4       	ldi	r26, 0x4E	; 78
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	ee e4       	ldi	r30, 0x4E	; 78
    291a:	f0 e0       	ldi	r31, 0x00	; 0
    291c:	80 81       	ld	r24, Z
    291e:	82 60       	ori	r24, 0x02	; 2
    2920:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    2922:	ae e4       	ldi	r26, 0x4E	; 78
    2924:	b0 e0       	ldi	r27, 0x00	; 0
    2926:	ee e4       	ldi	r30, 0x4E	; 78
    2928:	f0 e0       	ldi	r31, 0x00	; 0
    292a:	80 81       	ld	r24, Z
    292c:	8b 7f       	andi	r24, 0xFB	; 251
    292e:	8c 93       	st	X, r24
}
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <MTIMER1_voidSetOCR1Value>:

void MTIMER1_voidSetOCR1Value(u16 A_u16Angle)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <MTIMER1_voidSetOCR1Value+0x6>
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
    2940:	9a 83       	std	Y+2, r25	; 0x02
    2942:	89 83       	std	Y+1, r24	; 0x01
	OCR1A=A_u16Angle;
    2944:	ea e4       	ldi	r30, 0x4A	; 74
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	89 81       	ldd	r24, Y+1	; 0x01
    294a:	9a 81       	ldd	r25, Y+2	; 0x02
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
}
    2950:	0f 90       	pop	r0
    2952:	0f 90       	pop	r0
    2954:	cf 91       	pop	r28
    2956:	df 91       	pop	r29
    2958:	08 95       	ret

0000295a <MTIMER1_voidSetTimer1Value>:

void MTIMER1_voidSetTimer1Value(u16 A_u16Value)
{
    295a:	df 93       	push	r29
    295c:	cf 93       	push	r28
    295e:	00 d0       	rcall	.+0      	; 0x2960 <MTIMER1_voidSetTimer1Value+0x6>
    2960:	cd b7       	in	r28, 0x3d	; 61
    2962:	de b7       	in	r29, 0x3e	; 62
    2964:	9a 83       	std	Y+2, r25	; 0x02
    2966:	89 83       	std	Y+1, r24	; 0x01
	TCNT1=A_u16Value;
    2968:	ec e4       	ldi	r30, 0x4C	; 76
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	9a 81       	ldd	r25, Y+2	; 0x02
    2970:	91 83       	std	Z+1, r25	; 0x01
    2972:	80 83       	st	Z, r24
}
    2974:	0f 90       	pop	r0
    2976:	0f 90       	pop	r0
    2978:	cf 91       	pop	r28
    297a:	df 91       	pop	r29
    297c:	08 95       	ret

0000297e <MTIMER1_u16ReadTimerValue>:

u16 MTIMER1_u16ReadTimerValue(void)
{
    297e:	df 93       	push	r29
    2980:	cf 93       	push	r28
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    2986:	ec e4       	ldi	r30, 0x4C	; 76
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	91 81       	ldd	r25, Z+1	; 0x01
}
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <MTIMER1_u16ReadTimer1Value>:

u16 MTIMER1_u16ReadTimer1Value(void)
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    299c:	e6 e4       	ldi	r30, 0x46	; 70
    299e:	f0 e0       	ldi	r31, 0x00	; 0
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
}
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <MTIMER1_voidEnableICU>:

#define TIMSK_TICIE1 5
#define TCCR1B_ICES1 6

void MTIMER1_voidEnableICU (void)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	//Input Capture Interrupt Enable
	SET_BIT(TIMSK,TIMSK_TICIE1);
    29b2:	a9 e5       	ldi	r26, 0x59	; 89
    29b4:	b0 e0       	ldi	r27, 0x00	; 0
    29b6:	e9 e5       	ldi	r30, 0x59	; 89
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	80 81       	ld	r24, Z
    29bc:	80 62       	ori	r24, 0x20	; 32
    29be:	8c 93       	st	X, r24
	//Input Capture Edge Select
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    29c0:	ae e4       	ldi	r26, 0x4E	; 78
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	ee e4       	ldi	r30, 0x4E	; 78
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	80 81       	ld	r24, Z
    29ca:	80 64       	ori	r24, 0x40	; 64
    29cc:	8c 93       	st	X, r24
}
    29ce:	cf 91       	pop	r28
    29d0:	df 91       	pop	r29
    29d2:	08 95       	ret

000029d4 <MTIMER1_voidDisableICU>:

void MTIMER1_voidDisableICU (void)
{
    29d4:	df 93       	push	r29
    29d6:	cf 93       	push	r28
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
	//Input Capture Interrupt Enable
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    29dc:	a9 e5       	ldi	r26, 0x59	; 89
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e9 e5       	ldi	r30, 0x59	; 89
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	8f 7d       	andi	r24, 0xDF	; 223
    29e8:	8c 93       	st	X, r24
}
    29ea:	cf 91       	pop	r28
    29ec:	df 91       	pop	r29
    29ee:	08 95       	ret

000029f0 <MTIMER1_voidSetCallBack>:

void MTIMER1_voidSetCallBack(void (*PtrToFunc)(void))
{
    29f0:	df 93       	push	r29
    29f2:	cf 93       	push	r28
    29f4:	00 d0       	rcall	.+0      	; 0x29f6 <MTIMER1_voidSetCallBack+0x6>
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	9a 83       	std	Y+2, r25	; 0x02
    29fc:	89 83       	std	Y+1, r24	; 0x01
	if(PtrToFunc!=NULL)
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	31 f0       	breq	.+12     	; 0x2a12 <MTIMER1_voidSetCallBack+0x22>
	{
		TIMER1_CALLBACK=PtrToFunc;
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	90 93 95 00 	sts	0x0095, r25
    2a0e:	80 93 94 00 	sts	0x0094, r24
	}
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	08 95       	ret

00002a1c <__vector_6>:

void __vector_6 (void) __attribute__ ((signal));
void __vector_6 (void)
{
    2a1c:	1f 92       	push	r1
    2a1e:	0f 92       	push	r0
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	0f 92       	push	r0
    2a24:	11 24       	eor	r1, r1
    2a26:	2f 93       	push	r18
    2a28:	3f 93       	push	r19
    2a2a:	4f 93       	push	r20
    2a2c:	5f 93       	push	r21
    2a2e:	6f 93       	push	r22
    2a30:	7f 93       	push	r23
    2a32:	8f 93       	push	r24
    2a34:	9f 93       	push	r25
    2a36:	af 93       	push	r26
    2a38:	bf 93       	push	r27
    2a3a:	ef 93       	push	r30
    2a3c:	ff 93       	push	r31
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CALLBACK!=NULL)
    2a46:	80 91 94 00 	lds	r24, 0x0094
    2a4a:	90 91 95 00 	lds	r25, 0x0095
    2a4e:	00 97       	sbiw	r24, 0x00	; 0
    2a50:	29 f0       	breq	.+10     	; 0x2a5c <__vector_6+0x40>
	{
		TIMER1_CALLBACK();
    2a52:	e0 91 94 00 	lds	r30, 0x0094
    2a56:	f0 91 95 00 	lds	r31, 0x0095
    2a5a:	09 95       	icall
	}
}
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	ff 91       	pop	r31
    2a62:	ef 91       	pop	r30
    2a64:	bf 91       	pop	r27
    2a66:	af 91       	pop	r26
    2a68:	9f 91       	pop	r25
    2a6a:	8f 91       	pop	r24
    2a6c:	7f 91       	pop	r23
    2a6e:	6f 91       	pop	r22
    2a70:	5f 91       	pop	r21
    2a72:	4f 91       	pop	r20
    2a74:	3f 91       	pop	r19
    2a76:	2f 91       	pop	r18
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	0f 90       	pop	r0
    2a7e:	1f 90       	pop	r1
    2a80:	18 95       	reti

00002a82 <MTIMER1_voidSetTrigger>:

#define ICU_FALLING_EDGE 0
#define ICU_RISING_EDGE  1

void MTIMER1_voidSetTrigger(u8 A_u8Trigger)
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <MTIMER1_voidSetTrigger+0x6>
    2a88:	0f 92       	push	r0
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	89 83       	std	Y+1, r24	; 0x01
	switch(A_u8Trigger)
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	3b 83       	std	Y+3, r19	; 0x03
    2a98:	2a 83       	std	Y+2, r18	; 0x02
    2a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a9e:	00 97       	sbiw	r24, 0x00	; 0
    2aa0:	31 f0       	breq	.+12     	; 0x2aae <MTIMER1_voidSetTrigger+0x2c>
    2aa2:	2a 81       	ldd	r18, Y+2	; 0x02
    2aa4:	3b 81       	ldd	r19, Y+3	; 0x03
    2aa6:	21 30       	cpi	r18, 0x01	; 1
    2aa8:	31 05       	cpc	r19, r1
    2aaa:	49 f0       	breq	.+18     	; 0x2abe <MTIMER1_voidSetTrigger+0x3c>
    2aac:	0f c0       	rjmp	.+30     	; 0x2acc <MTIMER1_voidSetTrigger+0x4a>
	{
	case ICU_FALLING_EDGE: CLR_BIT(TCCR1B,TCCR1B_ICES1); break;
    2aae:	ae e4       	ldi	r26, 0x4E	; 78
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	ee e4       	ldi	r30, 0x4E	; 78
    2ab4:	f0 e0       	ldi	r31, 0x00	; 0
    2ab6:	80 81       	ld	r24, Z
    2ab8:	8f 7b       	andi	r24, 0xBF	; 191
    2aba:	8c 93       	st	X, r24
    2abc:	07 c0       	rjmp	.+14     	; 0x2acc <MTIMER1_voidSetTrigger+0x4a>
	case ICU_RISING_EDGE:  SET_BIT(TCCR1B,TCCR1B_ICES1); break;
    2abe:	ae e4       	ldi	r26, 0x4E	; 78
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	ee e4       	ldi	r30, 0x4E	; 78
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	80 64       	ori	r24, 0x40	; 64
    2aca:	8c 93       	st	X, r24
	}
}
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	cf 91       	pop	r28
    2ad4:	df 91       	pop	r29
    2ad6:	08 95       	ret

00002ad8 <main>:
	static u8 Sec_Dig1 ,Sec_Dig2 ,Min_Dig1 ,Min_Dig2 ,Hr_Dig1 ,Hr_Dig2;

void Func(void);

int main (void)
{
    2ad8:	0f 93       	push	r16
    2ada:	1f 93       	push	r17
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
    2ae4:	c8 59       	subi	r28, 0x98	; 152
    2ae6:	d0 40       	sbci	r29, 0x00	; 0
    2ae8:	0f b6       	in	r0, 0x3f	; 63
    2aea:	f8 94       	cli
    2aec:	de bf       	out	0x3e, r29	; 62
    2aee:	0f be       	out	0x3f, r0	; 63
    2af0:	cd bf       	out	0x3d, r28	; 61
	u8 local_u8Reading1=255;
    2af2:	fe 01       	movw	r30, r28
    2af4:	e8 56       	subi	r30, 0x68	; 104
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	80 83       	st	Z, r24
	u8 local_u8Reading2=255;
    2afc:	fe 01       	movw	r30, r28
    2afe:	e9 56       	subi	r30, 0x69	; 105
    2b00:	ff 4f       	sbci	r31, 0xFF	; 255
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	80 83       	st	Z, r24
	u8 local_u8Reading3=255;
    2b06:	fe 01       	movw	r30, r28
    2b08:	ea 56       	subi	r30, 0x6A	; 106
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	8f ef       	ldi	r24, 0xFF	; 255
    2b0e:	80 83       	st	Z, r24
	u8 local_u8Reading4=255;
    2b10:	fe 01       	movw	r30, r28
    2b12:	eb 56       	subi	r30, 0x6B	; 107
    2b14:	ff 4f       	sbci	r31, 0xFF	; 255
    2b16:	8f ef       	ldi	r24, 0xFF	; 255
    2b18:	80 83       	st	Z, r24
	u8 local_u8Reading5=255;
    2b1a:	fe 01       	movw	r30, r28
    2b1c:	ec 56       	subi	r30, 0x6C	; 108
    2b1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b20:	8f ef       	ldi	r24, 0xFF	; 255
    2b22:	80 83       	st	Z, r24
	u8 local_u8Reading6=255;
    2b24:	fe 01       	movw	r30, r28
    2b26:	ed 56       	subi	r30, 0x6D	; 109
    2b28:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2a:	8f ef       	ldi	r24, 0xFF	; 255
    2b2c:	80 83       	st	Z, r24
	u8 local_u8Reading7=255;
    2b2e:	fe 01       	movw	r30, r28
    2b30:	ee 56       	subi	r30, 0x6E	; 110
    2b32:	ff 4f       	sbci	r31, 0xFF	; 255
    2b34:	8f ef       	ldi	r24, 0xFF	; 255
    2b36:	80 83       	st	Z, r24
	u8 local_u8Flag=0;
    2b38:	fe 01       	movw	r30, r28
    2b3a:	ef 56       	subi	r30, 0x6F	; 111
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	10 82       	st	Z, r1



	MDIO_voidInit();
    2b40:	0e 94 d0 06 	call	0xda0	; 0xda0 <MDIO_voidInit>
	MTIMER0_voidInit();
    2b44:	0e 94 4e 13 	call	0x269c	; 0x269c <MTIMER0_voidInit>
	MGI_voidEnable();
    2b48:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <MGI_voidEnable>
	MTIMER0_voidSetCallBackOVF(Func);
    2b4c:	88 ec       	ldi	r24, 0xC8	; 200
    2b4e:	9c e1       	ldi	r25, 0x1C	; 28
    2b50:	0e 94 b7 13 	call	0x276e	; 0x276e <MTIMER0_voidSetCallBackOVF>
	while(1)
	{
		local_u8Reading1=MDIO_voidGetPinValue(DIO_PORTA,PIN0);
    2b54:	80 e0       	ldi	r24, 0x00	; 0
    2b56:	60 e0       	ldi	r22, 0x00	; 0
    2b58:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e8 56       	subi	r30, 0x68	; 104
    2b60:	ff 4f       	sbci	r31, 0xFF	; 255
    2b62:	80 83       	st	Z, r24
		local_u8Reading2=MDIO_voidGetPinValue(DIO_PORTA,PIN1);
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	61 e0       	ldi	r22, 0x01	; 1
    2b68:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2b6c:	fe 01       	movw	r30, r28
    2b6e:	e9 56       	subi	r30, 0x69	; 105
    2b70:	ff 4f       	sbci	r31, 0xFF	; 255
    2b72:	80 83       	st	Z, r24
		local_u8Reading3=MDIO_voidGetPinValue(DIO_PORTA,PIN2);
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	62 e0       	ldi	r22, 0x02	; 2
    2b78:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	ea 56       	subi	r30, 0x6A	; 106
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 83       	st	Z, r24
		local_u8Reading4=MDIO_voidGetPinValue(DIO_PORTA,PIN3);
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	63 e0       	ldi	r22, 0x03	; 3
    2b88:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2b8c:	fe 01       	movw	r30, r28
    2b8e:	eb 56       	subi	r30, 0x6B	; 107
    2b90:	ff 4f       	sbci	r31, 0xFF	; 255
    2b92:	80 83       	st	Z, r24
		local_u8Reading5=MDIO_voidGetPinValue(DIO_PORTA,PIN4);
    2b94:	80 e0       	ldi	r24, 0x00	; 0
    2b96:	64 e0       	ldi	r22, 0x04	; 4
    2b98:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2b9c:	fe 01       	movw	r30, r28
    2b9e:	ec 56       	subi	r30, 0x6C	; 108
    2ba0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba2:	80 83       	st	Z, r24
		local_u8Reading6=MDIO_voidGetPinValue(DIO_PORTA,PIN5);
    2ba4:	80 e0       	ldi	r24, 0x00	; 0
    2ba6:	65 e0       	ldi	r22, 0x05	; 5
    2ba8:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2bac:	fe 01       	movw	r30, r28
    2bae:	ed 56       	subi	r30, 0x6D	; 109
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	80 83       	st	Z, r24
		local_u8Reading7=MDIO_voidGetPinValue(DIO_PORTA,PIN6);
    2bb4:	80 e0       	ldi	r24, 0x00	; 0
    2bb6:	66 e0       	ldi	r22, 0x06	; 6
    2bb8:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	ee 56       	subi	r30, 0x6E	; 110
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 83       	st	Z, r24
		if(local_u8Reading1==DIO_LOW)
    2bc4:	fe 01       	movw	r30, r28
    2bc6:	e8 56       	subi	r30, 0x68	; 104
    2bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	a9 f4       	brne	.+42     	; 0x2bfa <main+0x122>
		{
			global_u8Minute++;
    2bd0:	80 91 97 00 	lds	r24, 0x0097
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	80 93 97 00 	sts	0x0097, r24
    2bda:	08 c0       	rjmp	.+16     	; 0x2bec <main+0x114>
			while(local_u8Reading1==DIO_LOW)
			{
				local_u8Reading1=MDIO_voidGetPinValue(DIO_PORTA,PIN0);
    2bdc:	80 e0       	ldi	r24, 0x00	; 0
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2be4:	fe 01       	movw	r30, r28
    2be6:	e8 56       	subi	r30, 0x68	; 104
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	80 83       	st	Z, r24
		local_u8Reading6=MDIO_voidGetPinValue(DIO_PORTA,PIN5);
		local_u8Reading7=MDIO_voidGetPinValue(DIO_PORTA,PIN6);
		if(local_u8Reading1==DIO_LOW)
		{
			global_u8Minute++;
			while(local_u8Reading1==DIO_LOW)
    2bec:	fe 01       	movw	r30, r28
    2bee:	e8 56       	subi	r30, 0x68	; 104
    2bf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf2:	80 81       	ld	r24, Z
    2bf4:	88 23       	and	r24, r24
    2bf6:	91 f3       	breq	.-28     	; 0x2bdc <main+0x104>
    2bf8:	9c c0       	rjmp	.+312    	; 0x2d32 <main+0x25a>
			{
				local_u8Reading1=MDIO_voidGetPinValue(DIO_PORTA,PIN0);
			}
		}
		else if(local_u8Reading2==DIO_LOW)
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e9 56       	subi	r30, 0x69	; 105
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	88 23       	and	r24, r24
    2c04:	a9 f4       	brne	.+42     	; 0x2c30 <main+0x158>
		{
			global_u8Hour++;
    2c06:	80 91 98 00 	lds	r24, 0x0098
    2c0a:	8f 5f       	subi	r24, 0xFF	; 255
    2c0c:	80 93 98 00 	sts	0x0098, r24
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <main+0x14a>
			while(local_u8Reading2==DIO_LOW)
			{
				local_u8Reading2=MDIO_voidGetPinValue(DIO_PORTA,PIN1);
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	61 e0       	ldi	r22, 0x01	; 1
    2c16:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2c1a:	fe 01       	movw	r30, r28
    2c1c:	e9 56       	subi	r30, 0x69	; 105
    2c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c20:	80 83       	st	Z, r24
			}
		}
		else if(local_u8Reading2==DIO_LOW)
		{
			global_u8Hour++;
			while(local_u8Reading2==DIO_LOW)
    2c22:	fe 01       	movw	r30, r28
    2c24:	e9 56       	subi	r30, 0x69	; 105
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 23       	and	r24, r24
    2c2c:	91 f3       	breq	.-28     	; 0x2c12 <main+0x13a>
    2c2e:	81 c0       	rjmp	.+258    	; 0x2d32 <main+0x25a>
			{
				local_u8Reading2=MDIO_voidGetPinValue(DIO_PORTA,PIN1);
			}
		}
		else if(local_u8Reading3==DIO_LOW)
    2c30:	fe 01       	movw	r30, r28
    2c32:	ea 56       	subi	r30, 0x6A	; 106
    2c34:	ff 4f       	sbci	r31, 0xFF	; 255
    2c36:	80 81       	ld	r24, Z
    2c38:	88 23       	and	r24, r24
    2c3a:	a9 f4       	brne	.+42     	; 0x2c66 <main+0x18e>
		{
			global_u8Minute--;
    2c3c:	80 91 97 00 	lds	r24, 0x0097
    2c40:	81 50       	subi	r24, 0x01	; 1
    2c42:	80 93 97 00 	sts	0x0097, r24
    2c46:	08 c0       	rjmp	.+16     	; 0x2c58 <main+0x180>
			while(local_u8Reading3==DIO_LOW)
			{
				local_u8Reading3=MDIO_voidGetPinValue(DIO_PORTA,PIN2);
    2c48:	80 e0       	ldi	r24, 0x00	; 0
    2c4a:	62 e0       	ldi	r22, 0x02	; 2
    2c4c:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2c50:	fe 01       	movw	r30, r28
    2c52:	ea 56       	subi	r30, 0x6A	; 106
    2c54:	ff 4f       	sbci	r31, 0xFF	; 255
    2c56:	80 83       	st	Z, r24
			}
		}
		else if(local_u8Reading3==DIO_LOW)
		{
			global_u8Minute--;
			while(local_u8Reading3==DIO_LOW)
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ea 56       	subi	r30, 0x6A	; 106
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 23       	and	r24, r24
    2c62:	91 f3       	breq	.-28     	; 0x2c48 <main+0x170>
    2c64:	66 c0       	rjmp	.+204    	; 0x2d32 <main+0x25a>
			{
				local_u8Reading3=MDIO_voidGetPinValue(DIO_PORTA,PIN2);
			}
		}
		else if(local_u8Reading4==DIO_LOW)
    2c66:	fe 01       	movw	r30, r28
    2c68:	eb 56       	subi	r30, 0x6B	; 107
    2c6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c6c:	80 81       	ld	r24, Z
    2c6e:	88 23       	and	r24, r24
    2c70:	a9 f4       	brne	.+42     	; 0x2c9c <main+0x1c4>
		{
			global_u8Hour--;
    2c72:	80 91 98 00 	lds	r24, 0x0098
    2c76:	81 50       	subi	r24, 0x01	; 1
    2c78:	80 93 98 00 	sts	0x0098, r24
    2c7c:	08 c0       	rjmp	.+16     	; 0x2c8e <main+0x1b6>
			while(local_u8Reading4==DIO_LOW)
			{
				local_u8Reading4=MDIO_voidGetPinValue(DIO_PORTA,PIN3);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	63 e0       	ldi	r22, 0x03	; 3
    2c82:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2c86:	fe 01       	movw	r30, r28
    2c88:	eb 56       	subi	r30, 0x6B	; 107
    2c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8c:	80 83       	st	Z, r24
			}
		}
		else if(local_u8Reading4==DIO_LOW)
		{
			global_u8Hour--;
			while(local_u8Reading4==DIO_LOW)
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 56       	subi	r30, 0x6B	; 107
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	80 81       	ld	r24, Z
    2c96:	88 23       	and	r24, r24
    2c98:	91 f3       	breq	.-28     	; 0x2c7e <main+0x1a6>
    2c9a:	4b c0       	rjmp	.+150    	; 0x2d32 <main+0x25a>
			{
				local_u8Reading4=MDIO_voidGetPinValue(DIO_PORTA,PIN3);
			}
		}
		else if(local_u8Reading5==DIO_LOW)
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	ec 56       	subi	r30, 0x6C	; 108
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	80 81       	ld	r24, Z
    2ca4:	88 23       	and	r24, r24
    2ca6:	51 f5       	brne	.+84     	; 0x2cfc <main+0x224>
		{
			if(local_u8Flag==0)
    2ca8:	fe 01       	movw	r30, r28
    2caa:	ef 56       	subi	r30, 0x6F	; 111
    2cac:	ff 4f       	sbci	r31, 0xFF	; 255
    2cae:	80 81       	ld	r24, Z
    2cb0:	88 23       	and	r24, r24
    2cb2:	41 f4       	brne	.+16     	; 0x2cc4 <main+0x1ec>
			{
			MGI_voidDisable();
    2cb4:	0e 94 6a 0c 	call	0x18d4	; 0x18d4 <MGI_voidDisable>
			local_u8Flag=1;
    2cb8:	fe 01       	movw	r30, r28
    2cba:	ef 56       	subi	r30, 0x6F	; 111
    2cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 83       	st	Z, r24
    2cc2:	15 c0       	rjmp	.+42     	; 0x2cee <main+0x216>
			}
			else if(local_u8Flag==1)
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ef 56       	subi	r30, 0x6F	; 111
    2cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cca:	80 81       	ld	r24, Z
    2ccc:	81 30       	cpi	r24, 0x01	; 1
    2cce:	79 f4       	brne	.+30     	; 0x2cee <main+0x216>
			{
				MGI_voidEnable();
    2cd0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <MGI_voidEnable>
				local_u8Flag=0;
    2cd4:	fe 01       	movw	r30, r28
    2cd6:	ef 56       	subi	r30, 0x6F	; 111
    2cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cda:	10 82       	st	Z, r1
    2cdc:	08 c0       	rjmp	.+16     	; 0x2cee <main+0x216>
			}


			while(local_u8Reading5==DIO_LOW)
			{
				local_u8Reading5=MDIO_voidGetPinValue(DIO_PORTA,PIN4);
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	64 e0       	ldi	r22, 0x04	; 4
    2ce2:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	ec 56       	subi	r30, 0x6C	; 108
    2cea:	ff 4f       	sbci	r31, 0xFF	; 255
    2cec:	80 83       	st	Z, r24
				MGI_voidEnable();
				local_u8Flag=0;
			}


			while(local_u8Reading5==DIO_LOW)
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ec 56       	subi	r30, 0x6C	; 108
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 23       	and	r24, r24
    2cf8:	91 f3       	breq	.-28     	; 0x2cde <main+0x206>
    2cfa:	1b c0       	rjmp	.+54     	; 0x2d32 <main+0x25a>
//			while(local_u8Reading6==DIO_LOW)
//			{
//				local_u8Reading6=MDIO_voidGetPinValue(DIO_PORTA,PIN5);
//			}
//		}
		else if(local_u8Reading7==DIO_LOW)
    2cfc:	fe 01       	movw	r30, r28
    2cfe:	ee 56       	subi	r30, 0x6E	; 110
    2d00:	ff 4f       	sbci	r31, 0xFF	; 255
    2d02:	80 81       	ld	r24, Z
    2d04:	88 23       	and	r24, r24
    2d06:	a9 f4       	brne	.+42     	; 0x2d32 <main+0x25a>
		{
			global_u8Second=0;
    2d08:	10 92 96 00 	sts	0x0096, r1
			global_u8Minute=0;
    2d0c:	10 92 97 00 	sts	0x0097, r1
			global_u8Hour=0;
    2d10:	10 92 98 00 	sts	0x0098, r1
    2d14:	08 c0       	rjmp	.+16     	; 0x2d26 <main+0x24e>
			while(local_u8Reading7==DIO_LOW)
			{
				local_u8Reading7=MDIO_voidGetPinValue(DIO_PORTA,PIN6);
    2d16:	80 e0       	ldi	r24, 0x00	; 0
    2d18:	66 e0       	ldi	r22, 0x06	; 6
    2d1a:	0e 94 a4 09 	call	0x1348	; 0x1348 <MDIO_voidGetPinValue>
    2d1e:	fe 01       	movw	r30, r28
    2d20:	ee 56       	subi	r30, 0x6E	; 110
    2d22:	ff 4f       	sbci	r31, 0xFF	; 255
    2d24:	80 83       	st	Z, r24
		else if(local_u8Reading7==DIO_LOW)
		{
			global_u8Second=0;
			global_u8Minute=0;
			global_u8Hour=0;
			while(local_u8Reading7==DIO_LOW)
    2d26:	fe 01       	movw	r30, r28
    2d28:	ee 56       	subi	r30, 0x6E	; 110
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 23       	and	r24, r24
    2d30:	91 f3       	breq	.-28     	; 0x2d16 <main+0x23e>
			{
				local_u8Reading7=MDIO_voidGetPinValue(DIO_PORTA,PIN6);
			}
		}

		PORTD_REG=0b11111110;
    2d32:	e2 e3       	ldi	r30, 0x32	; 50
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	8e ef       	ldi	r24, 0xFE	; 254
    2d38:	80 83       	st	Z, r24
		PORTC_REG=SEG[Sec_Dig1];
    2d3a:	a5 e3       	ldi	r26, 0x35	; 53
    2d3c:	b0 e0       	ldi	r27, 0x00	; 0
    2d3e:	80 91 9b 00 	lds	r24, 0x009B
    2d42:	88 2f       	mov	r24, r24
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	fc 01       	movw	r30, r24
    2d48:	e0 58       	subi	r30, 0x80	; 128
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	8c 93       	st	X, r24
    2d50:	fe 01       	movw	r30, r28
    2d52:	e3 57       	subi	r30, 0x73	; 115
    2d54:	ff 4f       	sbci	r31, 0xFF	; 255
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	a8 e4       	ldi	r26, 0x48	; 72
    2d5c:	b3 e4       	ldi	r27, 0x43	; 67
    2d5e:	80 83       	st	Z, r24
    2d60:	91 83       	std	Z+1, r25	; 0x01
    2d62:	a2 83       	std	Z+2, r26	; 0x02
    2d64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2d66:	8e 01       	movw	r16, r28
    2d68:	07 57       	subi	r16, 0x77	; 119
    2d6a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	e3 57       	subi	r30, 0x73	; 115
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	60 81       	ld	r22, Z
    2d74:	71 81       	ldd	r23, Z+1	; 0x01
    2d76:	82 81       	ldd	r24, Z+2	; 0x02
    2d78:	93 81       	ldd	r25, Z+3	; 0x03
    2d7a:	2b ea       	ldi	r18, 0xAB	; 171
    2d7c:	3a ea       	ldi	r19, 0xAA	; 170
    2d7e:	4a e2       	ldi	r20, 0x2A	; 42
    2d80:	50 e4       	ldi	r21, 0x40	; 64
    2d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d86:	dc 01       	movw	r26, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	f8 01       	movw	r30, r16
    2d8c:	80 83       	st	Z, r24
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	a2 83       	std	Z+2, r26	; 0x02
    2d92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d94:	fe 01       	movw	r30, r28
    2d96:	e7 57       	subi	r30, 0x77	; 119
    2d98:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9a:	60 81       	ld	r22, Z
    2d9c:	71 81       	ldd	r23, Z+1	; 0x01
    2d9e:	82 81       	ldd	r24, Z+2	; 0x02
    2da0:	93 81       	ldd	r25, Z+3	; 0x03
    2da2:	20 e0       	ldi	r18, 0x00	; 0
    2da4:	30 e0       	ldi	r19, 0x00	; 0
    2da6:	40 e8       	ldi	r20, 0x80	; 128
    2da8:	5f e3       	ldi	r21, 0x3F	; 63
    2daa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2dae:	88 23       	and	r24, r24
    2db0:	34 f4       	brge	.+12     	; 0x2dbe <main+0x2e6>
		__ticks = 1;
    2db2:	fe 01       	movw	r30, r28
    2db4:	e8 57       	subi	r30, 0x78	; 120
    2db6:	ff 4f       	sbci	r31, 0xFF	; 255
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	80 83       	st	Z, r24
    2dbc:	e0 c0       	rjmp	.+448    	; 0x2f7e <main+0x4a6>
	else if (__tmp > 255)
    2dbe:	fe 01       	movw	r30, r28
    2dc0:	e7 57       	subi	r30, 0x77	; 119
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	60 81       	ld	r22, Z
    2dc6:	71 81       	ldd	r23, Z+1	; 0x01
    2dc8:	82 81       	ldd	r24, Z+2	; 0x02
    2dca:	93 81       	ldd	r25, Z+3	; 0x03
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	4f e7       	ldi	r20, 0x7F	; 127
    2dd2:	53 e4       	ldi	r21, 0x43	; 67
    2dd4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dd8:	18 16       	cp	r1, r24
    2dda:	0c f0       	brlt	.+2      	; 0x2dde <main+0x306>
    2ddc:	c0 c0       	rjmp	.+384    	; 0x2f5e <main+0x486>
	{
		_delay_ms(__us / 1000.0);
    2dde:	fe 01       	movw	r30, r28
    2de0:	e3 57       	subi	r30, 0x73	; 115
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	60 81       	ld	r22, Z
    2de6:	71 81       	ldd	r23, Z+1	; 0x01
    2de8:	82 81       	ldd	r24, Z+2	; 0x02
    2dea:	93 81       	ldd	r25, Z+3	; 0x03
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	4a e7       	ldi	r20, 0x7A	; 122
    2df2:	54 e4       	ldi	r21, 0x44	; 68
    2df4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2df8:	dc 01       	movw	r26, r24
    2dfa:	cb 01       	movw	r24, r22
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	ec 57       	subi	r30, 0x7C	; 124
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 83       	st	Z, r24
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	a2 83       	std	Z+2, r26	; 0x02
    2e08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e0a:	8e 01       	movw	r16, r28
    2e0c:	00 58       	subi	r16, 0x80	; 128
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	fe 01       	movw	r30, r28
    2e12:	ec 57       	subi	r30, 0x7C	; 124
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	60 81       	ld	r22, Z
    2e18:	71 81       	ldd	r23, Z+1	; 0x01
    2e1a:	82 81       	ldd	r24, Z+2	; 0x02
    2e1c:	93 81       	ldd	r25, Z+3	; 0x03
    2e1e:	20 e0       	ldi	r18, 0x00	; 0
    2e20:	30 e0       	ldi	r19, 0x00	; 0
    2e22:	4a ef       	ldi	r20, 0xFA	; 250
    2e24:	54 e4       	ldi	r21, 0x44	; 68
    2e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2a:	dc 01       	movw	r26, r24
    2e2c:	cb 01       	movw	r24, r22
    2e2e:	f8 01       	movw	r30, r16
    2e30:	80 83       	st	Z, r24
    2e32:	91 83       	std	Z+1, r25	; 0x01
    2e34:	a2 83       	std	Z+2, r26	; 0x02
    2e36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e0 58       	subi	r30, 0x80	; 128
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	60 81       	ld	r22, Z
    2e40:	71 81       	ldd	r23, Z+1	; 0x01
    2e42:	82 81       	ldd	r24, Z+2	; 0x02
    2e44:	93 81       	ldd	r25, Z+3	; 0x03
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	44 f4       	brge	.+16     	; 0x2e66 <main+0x38e>
		__ticks = 1;
    2e56:	fe 01       	movw	r30, r28
    2e58:	e2 58       	subi	r30, 0x82	; 130
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	91 83       	std	Z+1, r25	; 0x01
    2e62:	80 83       	st	Z, r24
    2e64:	64 c0       	rjmp	.+200    	; 0x2f2e <main+0x456>
	else if (__tmp > 65535)
    2e66:	fe 01       	movw	r30, r28
    2e68:	e0 58       	subi	r30, 0x80	; 128
    2e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e6c:	60 81       	ld	r22, Z
    2e6e:	71 81       	ldd	r23, Z+1	; 0x01
    2e70:	82 81       	ldd	r24, Z+2	; 0x02
    2e72:	93 81       	ldd	r25, Z+3	; 0x03
    2e74:	20 e0       	ldi	r18, 0x00	; 0
    2e76:	3f ef       	ldi	r19, 0xFF	; 255
    2e78:	4f e7       	ldi	r20, 0x7F	; 127
    2e7a:	57 e4       	ldi	r21, 0x47	; 71
    2e7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e80:	18 16       	cp	r1, r24
    2e82:	0c f0       	brlt	.+2      	; 0x2e86 <main+0x3ae>
    2e84:	43 c0       	rjmp	.+134    	; 0x2f0c <main+0x434>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e86:	fe 01       	movw	r30, r28
    2e88:	ec 57       	subi	r30, 0x7C	; 124
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	60 81       	ld	r22, Z
    2e8e:	71 81       	ldd	r23, Z+1	; 0x01
    2e90:	82 81       	ldd	r24, Z+2	; 0x02
    2e92:	93 81       	ldd	r25, Z+3	; 0x03
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	40 e2       	ldi	r20, 0x20	; 32
    2e9a:	51 e4       	ldi	r21, 0x41	; 65
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	8e 01       	movw	r16, r28
    2ea6:	02 58       	subi	r16, 0x82	; 130
    2ea8:	1f 4f       	sbci	r17, 0xFF	; 255
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	f8 01       	movw	r30, r16
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	80 83       	st	Z, r24
    2ebc:	1f c0       	rjmp	.+62     	; 0x2efc <main+0x424>
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	e4 58       	subi	r30, 0x84	; 132
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	88 ec       	ldi	r24, 0xC8	; 200
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	fe 01       	movw	r30, r28
    2ece:	e4 58       	subi	r30, 0x84	; 132
    2ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed2:	80 81       	ld	r24, Z
    2ed4:	91 81       	ldd	r25, Z+1	; 0x01
    2ed6:	01 97       	sbiw	r24, 0x01	; 1
    2ed8:	f1 f7       	brne	.-4      	; 0x2ed6 <main+0x3fe>
    2eda:	fe 01       	movw	r30, r28
    2edc:	e4 58       	subi	r30, 0x84	; 132
    2ede:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee0:	91 83       	std	Z+1, r25	; 0x01
    2ee2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ee4:	de 01       	movw	r26, r28
    2ee6:	a2 58       	subi	r26, 0x82	; 130
    2ee8:	bf 4f       	sbci	r27, 0xFF	; 255
    2eea:	fe 01       	movw	r30, r28
    2eec:	e2 58       	subi	r30, 0x82	; 130
    2eee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef0:	80 81       	ld	r24, Z
    2ef2:	91 81       	ldd	r25, Z+1	; 0x01
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	11 96       	adiw	r26, 0x01	; 1
    2ef8:	9c 93       	st	X, r25
    2efa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	fe 01       	movw	r30, r28
    2efe:	e2 58       	subi	r30, 0x82	; 130
    2f00:	ff 4f       	sbci	r31, 0xFF	; 255
    2f02:	80 81       	ld	r24, Z
    2f04:	91 81       	ldd	r25, Z+1	; 0x01
    2f06:	00 97       	sbiw	r24, 0x00	; 0
    2f08:	d1 f6       	brne	.-76     	; 0x2ebe <main+0x3e6>
    2f0a:	4b c0       	rjmp	.+150    	; 0x2fa2 <main+0x4ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	02 58       	subi	r16, 0x82	; 130
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	fe 01       	movw	r30, r28
    2f14:	e0 58       	subi	r30, 0x80	; 128
    2f16:	ff 4f       	sbci	r31, 0xFF	; 255
    2f18:	60 81       	ld	r22, Z
    2f1a:	71 81       	ldd	r23, Z+1	; 0x01
    2f1c:	82 81       	ldd	r24, Z+2	; 0x02
    2f1e:	93 81       	ldd	r25, Z+3	; 0x03
    2f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	f8 01       	movw	r30, r16
    2f2a:	91 83       	std	Z+1, r25	; 0x01
    2f2c:	80 83       	st	Z, r24
    2f2e:	de 01       	movw	r26, r28
    2f30:	a6 58       	subi	r26, 0x86	; 134
    2f32:	bf 4f       	sbci	r27, 0xFF	; 255
    2f34:	fe 01       	movw	r30, r28
    2f36:	e2 58       	subi	r30, 0x82	; 130
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	11 96       	adiw	r26, 0x01	; 1
    2f40:	9c 93       	st	X, r25
    2f42:	8e 93       	st	-X, r24
    2f44:	fe 01       	movw	r30, r28
    2f46:	e6 58       	subi	r30, 0x86	; 134
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	80 81       	ld	r24, Z
    2f4c:	91 81       	ldd	r25, Z+1	; 0x01
    2f4e:	01 97       	sbiw	r24, 0x01	; 1
    2f50:	f1 f7       	brne	.-4      	; 0x2f4e <main+0x476>
    2f52:	fe 01       	movw	r30, r28
    2f54:	e6 58       	subi	r30, 0x86	; 134
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	91 83       	std	Z+1, r25	; 0x01
    2f5a:	80 83       	st	Z, r24
    2f5c:	22 c0       	rjmp	.+68     	; 0x2fa2 <main+0x4ca>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f5e:	8e 01       	movw	r16, r28
    2f60:	08 57       	subi	r16, 0x78	; 120
    2f62:	1f 4f       	sbci	r17, 0xFF	; 255
    2f64:	fe 01       	movw	r30, r28
    2f66:	e7 57       	subi	r30, 0x77	; 119
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	60 81       	ld	r22, Z
    2f6c:	71 81       	ldd	r23, Z+1	; 0x01
    2f6e:	82 81       	ldd	r24, Z+2	; 0x02
    2f70:	93 81       	ldd	r25, Z+3	; 0x03
    2f72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f76:	dc 01       	movw	r26, r24
    2f78:	cb 01       	movw	r24, r22
    2f7a:	f8 01       	movw	r30, r16
    2f7c:	80 83       	st	Z, r24
    2f7e:	de 01       	movw	r26, r28
    2f80:	a7 58       	subi	r26, 0x87	; 135
    2f82:	bf 4f       	sbci	r27, 0xFF	; 255
    2f84:	fe 01       	movw	r30, r28
    2f86:	e8 57       	subi	r30, 0x78	; 120
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e7 58       	subi	r30, 0x87	; 135
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	8a 95       	dec	r24
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <main+0x4be>
    2f9a:	fe 01       	movw	r30, r28
    2f9c:	e7 58       	subi	r30, 0x87	; 135
    2f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa0:	80 83       	st	Z, r24
		_delay_us(200);

		PORTD_REG=0b11111101;
    2fa2:	e2 e3       	ldi	r30, 0x32	; 50
    2fa4:	f0 e0       	ldi	r31, 0x00	; 0
    2fa6:	8d ef       	ldi	r24, 0xFD	; 253
    2fa8:	80 83       	st	Z, r24
		PORTC_REG=SEG[Sec_Dig2];
    2faa:	a5 e3       	ldi	r26, 0x35	; 53
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	80 91 9c 00 	lds	r24, 0x009C
    2fb2:	88 2f       	mov	r24, r24
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	e0 58       	subi	r30, 0x80	; 128
    2fba:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbc:	80 81       	ld	r24, Z
    2fbe:	8c 93       	st	X, r24
    2fc0:	fe 01       	movw	r30, r28
    2fc2:	eb 58       	subi	r30, 0x8B	; 139
    2fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc6:	80 e0       	ldi	r24, 0x00	; 0
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	a8 e4       	ldi	r26, 0x48	; 72
    2fcc:	b3 e4       	ldi	r27, 0x43	; 67
    2fce:	80 83       	st	Z, r24
    2fd0:	91 83       	std	Z+1, r25	; 0x01
    2fd2:	a2 83       	std	Z+2, r26	; 0x02
    2fd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2fd6:	8e 01       	movw	r16, r28
    2fd8:	0f 58       	subi	r16, 0x8F	; 143
    2fda:	1f 4f       	sbci	r17, 0xFF	; 255
    2fdc:	fe 01       	movw	r30, r28
    2fde:	eb 58       	subi	r30, 0x8B	; 139
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	60 81       	ld	r22, Z
    2fe4:	71 81       	ldd	r23, Z+1	; 0x01
    2fe6:	82 81       	ldd	r24, Z+2	; 0x02
    2fe8:	93 81       	ldd	r25, Z+3	; 0x03
    2fea:	2b ea       	ldi	r18, 0xAB	; 171
    2fec:	3a ea       	ldi	r19, 0xAA	; 170
    2fee:	4a e2       	ldi	r20, 0x2A	; 42
    2ff0:	50 e4       	ldi	r21, 0x40	; 64
    2ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff6:	dc 01       	movw	r26, r24
    2ff8:	cb 01       	movw	r24, r22
    2ffa:	f8 01       	movw	r30, r16
    2ffc:	80 83       	st	Z, r24
    2ffe:	91 83       	std	Z+1, r25	; 0x01
    3000:	a2 83       	std	Z+2, r26	; 0x02
    3002:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3004:	fe 01       	movw	r30, r28
    3006:	ef 58       	subi	r30, 0x8F	; 143
    3008:	ff 4f       	sbci	r31, 0xFF	; 255
    300a:	60 81       	ld	r22, Z
    300c:	71 81       	ldd	r23, Z+1	; 0x01
    300e:	82 81       	ldd	r24, Z+2	; 0x02
    3010:	93 81       	ldd	r25, Z+3	; 0x03
    3012:	20 e0       	ldi	r18, 0x00	; 0
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	40 e8       	ldi	r20, 0x80	; 128
    3018:	5f e3       	ldi	r21, 0x3F	; 63
    301a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    301e:	88 23       	and	r24, r24
    3020:	34 f4       	brge	.+12     	; 0x302e <main+0x556>
		__ticks = 1;
    3022:	fe 01       	movw	r30, r28
    3024:	e0 59       	subi	r30, 0x90	; 144
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	80 83       	st	Z, r24
    302c:	e0 c0       	rjmp	.+448    	; 0x31ee <main+0x716>
	else if (__tmp > 255)
    302e:	fe 01       	movw	r30, r28
    3030:	ef 58       	subi	r30, 0x8F	; 143
    3032:	ff 4f       	sbci	r31, 0xFF	; 255
    3034:	60 81       	ld	r22, Z
    3036:	71 81       	ldd	r23, Z+1	; 0x01
    3038:	82 81       	ldd	r24, Z+2	; 0x02
    303a:	93 81       	ldd	r25, Z+3	; 0x03
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	30 e0       	ldi	r19, 0x00	; 0
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	53 e4       	ldi	r21, 0x43	; 67
    3044:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	0c f0       	brlt	.+2      	; 0x304e <main+0x576>
    304c:	c0 c0       	rjmp	.+384    	; 0x31ce <main+0x6f6>
	{
		_delay_ms(__us / 1000.0);
    304e:	fe 01       	movw	r30, r28
    3050:	eb 58       	subi	r30, 0x8B	; 139
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a e7       	ldi	r20, 0x7A	; 122
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	fe 01       	movw	r30, r28
    306e:	e4 59       	subi	r30, 0x94	; 148
    3070:	ff 4f       	sbci	r31, 0xFF	; 255
    3072:	80 83       	st	Z, r24
    3074:	91 83       	std	Z+1, r25	; 0x01
    3076:	a2 83       	std	Z+2, r26	; 0x02
    3078:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    307a:	8e 01       	movw	r16, r28
    307c:	08 59       	subi	r16, 0x98	; 152
    307e:	1f 4f       	sbci	r17, 0xFF	; 255
    3080:	fe 01       	movw	r30, r28
    3082:	e4 59       	subi	r30, 0x94	; 148
    3084:	ff 4f       	sbci	r31, 0xFF	; 255
    3086:	60 81       	ld	r22, Z
    3088:	71 81       	ldd	r23, Z+1	; 0x01
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	20 e0       	ldi	r18, 0x00	; 0
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	4a ef       	ldi	r20, 0xFA	; 250
    3094:	54 e4       	ldi	r21, 0x44	; 68
    3096:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	f8 01       	movw	r30, r16
    30a0:	80 83       	st	Z, r24
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	a2 83       	std	Z+2, r26	; 0x02
    30a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30a8:	fe 01       	movw	r30, r28
    30aa:	e8 59       	subi	r30, 0x98	; 152
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	60 81       	ld	r22, Z
    30b0:	71 81       	ldd	r23, Z+1	; 0x01
    30b2:	82 81       	ldd	r24, Z+2	; 0x02
    30b4:	93 81       	ldd	r25, Z+3	; 0x03
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e8       	ldi	r20, 0x80	; 128
    30bc:	5f e3       	ldi	r21, 0x3F	; 63
    30be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30c2:	88 23       	and	r24, r24
    30c4:	44 f4       	brge	.+16     	; 0x30d6 <main+0x5fe>
		__ticks = 1;
    30c6:	fe 01       	movw	r30, r28
    30c8:	ea 59       	subi	r30, 0x9A	; 154
    30ca:	ff 4f       	sbci	r31, 0xFF	; 255
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	91 83       	std	Z+1, r25	; 0x01
    30d2:	80 83       	st	Z, r24
    30d4:	64 c0       	rjmp	.+200    	; 0x319e <main+0x6c6>
	else if (__tmp > 65535)
    30d6:	fe 01       	movw	r30, r28
    30d8:	e8 59       	subi	r30, 0x98	; 152
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	82 81       	ldd	r24, Z+2	; 0x02
    30e2:	93 81       	ldd	r25, Z+3	; 0x03
    30e4:	20 e0       	ldi	r18, 0x00	; 0
    30e6:	3f ef       	ldi	r19, 0xFF	; 255
    30e8:	4f e7       	ldi	r20, 0x7F	; 127
    30ea:	57 e4       	ldi	r21, 0x47	; 71
    30ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30f0:	18 16       	cp	r1, r24
    30f2:	0c f0       	brlt	.+2      	; 0x30f6 <main+0x61e>
    30f4:	43 c0       	rjmp	.+134    	; 0x317c <main+0x6a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f6:	fe 01       	movw	r30, r28
    30f8:	e4 59       	subi	r30, 0x94	; 148
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	60 81       	ld	r22, Z
    30fe:	71 81       	ldd	r23, Z+1	; 0x01
    3100:	82 81       	ldd	r24, Z+2	; 0x02
    3102:	93 81       	ldd	r25, Z+3	; 0x03
    3104:	20 e0       	ldi	r18, 0x00	; 0
    3106:	30 e0       	ldi	r19, 0x00	; 0
    3108:	40 e2       	ldi	r20, 0x20	; 32
    310a:	51 e4       	ldi	r21, 0x41	; 65
    310c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	8e 01       	movw	r16, r28
    3116:	0a 59       	subi	r16, 0x9A	; 154
    3118:	1f 4f       	sbci	r17, 0xFF	; 255
    311a:	bc 01       	movw	r22, r24
    311c:	cd 01       	movw	r24, r26
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	f8 01       	movw	r30, r16
    3128:	91 83       	std	Z+1, r25	; 0x01
    312a:	80 83       	st	Z, r24
    312c:	1f c0       	rjmp	.+62     	; 0x316c <main+0x694>
    312e:	fe 01       	movw	r30, r28
    3130:	ec 59       	subi	r30, 0x9C	; 156
    3132:	ff 4f       	sbci	r31, 0xFF	; 255
    3134:	88 ec       	ldi	r24, 0xC8	; 200
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	91 83       	std	Z+1, r25	; 0x01
    313a:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    313c:	fe 01       	movw	r30, r28
    313e:	ec 59       	subi	r30, 0x9C	; 156
    3140:	ff 4f       	sbci	r31, 0xFF	; 255
    3142:	80 81       	ld	r24, Z
    3144:	91 81       	ldd	r25, Z+1	; 0x01
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	f1 f7       	brne	.-4      	; 0x3146 <main+0x66e>
    314a:	fe 01       	movw	r30, r28
    314c:	ec 59       	subi	r30, 0x9C	; 156
    314e:	ff 4f       	sbci	r31, 0xFF	; 255
    3150:	91 83       	std	Z+1, r25	; 0x01
    3152:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3154:	de 01       	movw	r26, r28
    3156:	aa 59       	subi	r26, 0x9A	; 154
    3158:	bf 4f       	sbci	r27, 0xFF	; 255
    315a:	fe 01       	movw	r30, r28
    315c:	ea 59       	subi	r30, 0x9A	; 154
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	11 96       	adiw	r26, 0x01	; 1
    3168:	9c 93       	st	X, r25
    316a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    316c:	fe 01       	movw	r30, r28
    316e:	ea 59       	subi	r30, 0x9A	; 154
    3170:	ff 4f       	sbci	r31, 0xFF	; 255
    3172:	80 81       	ld	r24, Z
    3174:	91 81       	ldd	r25, Z+1	; 0x01
    3176:	00 97       	sbiw	r24, 0x00	; 0
    3178:	d1 f6       	brne	.-76     	; 0x312e <main+0x656>
    317a:	4b c0       	rjmp	.+150    	; 0x3212 <main+0x73a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    317c:	8e 01       	movw	r16, r28
    317e:	0a 59       	subi	r16, 0x9A	; 154
    3180:	1f 4f       	sbci	r17, 0xFF	; 255
    3182:	fe 01       	movw	r30, r28
    3184:	e8 59       	subi	r30, 0x98	; 152
    3186:	ff 4f       	sbci	r31, 0xFF	; 255
    3188:	60 81       	ld	r22, Z
    318a:	71 81       	ldd	r23, Z+1	; 0x01
    318c:	82 81       	ldd	r24, Z+2	; 0x02
    318e:	93 81       	ldd	r25, Z+3	; 0x03
    3190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3194:	dc 01       	movw	r26, r24
    3196:	cb 01       	movw	r24, r22
    3198:	f8 01       	movw	r30, r16
    319a:	91 83       	std	Z+1, r25	; 0x01
    319c:	80 83       	st	Z, r24
    319e:	de 01       	movw	r26, r28
    31a0:	ae 59       	subi	r26, 0x9E	; 158
    31a2:	bf 4f       	sbci	r27, 0xFF	; 255
    31a4:	fe 01       	movw	r30, r28
    31a6:	ea 59       	subi	r30, 0x9A	; 154
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	11 96       	adiw	r26, 0x01	; 1
    31b0:	9c 93       	st	X, r25
    31b2:	8e 93       	st	-X, r24
    31b4:	fe 01       	movw	r30, r28
    31b6:	ee 59       	subi	r30, 0x9E	; 158
    31b8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ba:	80 81       	ld	r24, Z
    31bc:	91 81       	ldd	r25, Z+1	; 0x01
    31be:	01 97       	sbiw	r24, 0x01	; 1
    31c0:	f1 f7       	brne	.-4      	; 0x31be <main+0x6e6>
    31c2:	fe 01       	movw	r30, r28
    31c4:	ee 59       	subi	r30, 0x9E	; 158
    31c6:	ff 4f       	sbci	r31, 0xFF	; 255
    31c8:	91 83       	std	Z+1, r25	; 0x01
    31ca:	80 83       	st	Z, r24
    31cc:	22 c0       	rjmp	.+68     	; 0x3212 <main+0x73a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31ce:	8e 01       	movw	r16, r28
    31d0:	00 59       	subi	r16, 0x90	; 144
    31d2:	1f 4f       	sbci	r17, 0xFF	; 255
    31d4:	fe 01       	movw	r30, r28
    31d6:	ef 58       	subi	r30, 0x8F	; 143
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	60 81       	ld	r22, Z
    31dc:	71 81       	ldd	r23, Z+1	; 0x01
    31de:	82 81       	ldd	r24, Z+2	; 0x02
    31e0:	93 81       	ldd	r25, Z+3	; 0x03
    31e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31e6:	dc 01       	movw	r26, r24
    31e8:	cb 01       	movw	r24, r22
    31ea:	f8 01       	movw	r30, r16
    31ec:	80 83       	st	Z, r24
    31ee:	de 01       	movw	r26, r28
    31f0:	af 59       	subi	r26, 0x9F	; 159
    31f2:	bf 4f       	sbci	r27, 0xFF	; 255
    31f4:	fe 01       	movw	r30, r28
    31f6:	e0 59       	subi	r30, 0x90	; 144
    31f8:	ff 4f       	sbci	r31, 0xFF	; 255
    31fa:	80 81       	ld	r24, Z
    31fc:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fe:	fe 01       	movw	r30, r28
    3200:	ef 59       	subi	r30, 0x9F	; 159
    3202:	ff 4f       	sbci	r31, 0xFF	; 255
    3204:	80 81       	ld	r24, Z
    3206:	8a 95       	dec	r24
    3208:	f1 f7       	brne	.-4      	; 0x3206 <main+0x72e>
    320a:	fe 01       	movw	r30, r28
    320c:	ef 59       	subi	r30, 0x9F	; 159
    320e:	ff 4f       	sbci	r31, 0xFF	; 255
    3210:	80 83       	st	Z, r24
		_delay_us(200);

		PORTD_REG=0b11111011;
    3212:	e2 e3       	ldi	r30, 0x32	; 50
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	8b ef       	ldi	r24, 0xFB	; 251
    3218:	80 83       	st	Z, r24
		PORTC_REG=SEG[Min_Dig1];
    321a:	a5 e3       	ldi	r26, 0x35	; 53
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	80 91 9d 00 	lds	r24, 0x009D
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	fc 01       	movw	r30, r24
    3228:	e0 58       	subi	r30, 0x80	; 128
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	8c 93       	st	X, r24
    3230:	fe 01       	movw	r30, r28
    3232:	e3 5a       	subi	r30, 0xA3	; 163
    3234:	ff 4f       	sbci	r31, 0xFF	; 255
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	a8 e4       	ldi	r26, 0x48	; 72
    323c:	b3 e4       	ldi	r27, 0x43	; 67
    323e:	80 83       	st	Z, r24
    3240:	91 83       	std	Z+1, r25	; 0x01
    3242:	a2 83       	std	Z+2, r26	; 0x02
    3244:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3246:	8e 01       	movw	r16, r28
    3248:	07 5a       	subi	r16, 0xA7	; 167
    324a:	1f 4f       	sbci	r17, 0xFF	; 255
    324c:	fe 01       	movw	r30, r28
    324e:	e3 5a       	subi	r30, 0xA3	; 163
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	60 81       	ld	r22, Z
    3254:	71 81       	ldd	r23, Z+1	; 0x01
    3256:	82 81       	ldd	r24, Z+2	; 0x02
    3258:	93 81       	ldd	r25, Z+3	; 0x03
    325a:	2b ea       	ldi	r18, 0xAB	; 171
    325c:	3a ea       	ldi	r19, 0xAA	; 170
    325e:	4a e2       	ldi	r20, 0x2A	; 42
    3260:	50 e4       	ldi	r21, 0x40	; 64
    3262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3266:	dc 01       	movw	r26, r24
    3268:	cb 01       	movw	r24, r22
    326a:	f8 01       	movw	r30, r16
    326c:	80 83       	st	Z, r24
    326e:	91 83       	std	Z+1, r25	; 0x01
    3270:	a2 83       	std	Z+2, r26	; 0x02
    3272:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3274:	fe 01       	movw	r30, r28
    3276:	e7 5a       	subi	r30, 0xA7	; 167
    3278:	ff 4f       	sbci	r31, 0xFF	; 255
    327a:	60 81       	ld	r22, Z
    327c:	71 81       	ldd	r23, Z+1	; 0x01
    327e:	82 81       	ldd	r24, Z+2	; 0x02
    3280:	93 81       	ldd	r25, Z+3	; 0x03
    3282:	20 e0       	ldi	r18, 0x00	; 0
    3284:	30 e0       	ldi	r19, 0x00	; 0
    3286:	40 e8       	ldi	r20, 0x80	; 128
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    328e:	88 23       	and	r24, r24
    3290:	34 f4       	brge	.+12     	; 0x329e <main+0x7c6>
		__ticks = 1;
    3292:	fe 01       	movw	r30, r28
    3294:	e8 5a       	subi	r30, 0xA8	; 168
    3296:	ff 4f       	sbci	r31, 0xFF	; 255
    3298:	81 e0       	ldi	r24, 0x01	; 1
    329a:	80 83       	st	Z, r24
    329c:	e0 c0       	rjmp	.+448    	; 0x345e <main+0x986>
	else if (__tmp > 255)
    329e:	fe 01       	movw	r30, r28
    32a0:	e7 5a       	subi	r30, 0xA7	; 167
    32a2:	ff 4f       	sbci	r31, 0xFF	; 255
    32a4:	60 81       	ld	r22, Z
    32a6:	71 81       	ldd	r23, Z+1	; 0x01
    32a8:	82 81       	ldd	r24, Z+2	; 0x02
    32aa:	93 81       	ldd	r25, Z+3	; 0x03
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	53 e4       	ldi	r21, 0x43	; 67
    32b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	0c f0       	brlt	.+2      	; 0x32be <main+0x7e6>
    32bc:	c0 c0       	rjmp	.+384    	; 0x343e <main+0x966>
	{
		_delay_ms(__us / 1000.0);
    32be:	fe 01       	movw	r30, r28
    32c0:	e3 5a       	subi	r30, 0xA3	; 163
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	4a e7       	ldi	r20, 0x7A	; 122
    32d2:	54 e4       	ldi	r21, 0x44	; 68
    32d4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32d8:	dc 01       	movw	r26, r24
    32da:	cb 01       	movw	r24, r22
    32dc:	fe 01       	movw	r30, r28
    32de:	ec 5a       	subi	r30, 0xAC	; 172
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	80 83       	st	Z, r24
    32e4:	91 83       	std	Z+1, r25	; 0x01
    32e6:	a2 83       	std	Z+2, r26	; 0x02
    32e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ea:	8e 01       	movw	r16, r28
    32ec:	00 5b       	subi	r16, 0xB0	; 176
    32ee:	1f 4f       	sbci	r17, 0xFF	; 255
    32f0:	fe 01       	movw	r30, r28
    32f2:	ec 5a       	subi	r30, 0xAC	; 172
    32f4:	ff 4f       	sbci	r31, 0xFF	; 255
    32f6:	60 81       	ld	r22, Z
    32f8:	71 81       	ldd	r23, Z+1	; 0x01
    32fa:	82 81       	ldd	r24, Z+2	; 0x02
    32fc:	93 81       	ldd	r25, Z+3	; 0x03
    32fe:	20 e0       	ldi	r18, 0x00	; 0
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	4a ef       	ldi	r20, 0xFA	; 250
    3304:	54 e4       	ldi	r21, 0x44	; 68
    3306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	80 83       	st	Z, r24
    3312:	91 83       	std	Z+1, r25	; 0x01
    3314:	a2 83       	std	Z+2, r26	; 0x02
    3316:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3318:	fe 01       	movw	r30, r28
    331a:	e0 5b       	subi	r30, 0xB0	; 176
    331c:	ff 4f       	sbci	r31, 0xFF	; 255
    331e:	60 81       	ld	r22, Z
    3320:	71 81       	ldd	r23, Z+1	; 0x01
    3322:	82 81       	ldd	r24, Z+2	; 0x02
    3324:	93 81       	ldd	r25, Z+3	; 0x03
    3326:	20 e0       	ldi	r18, 0x00	; 0
    3328:	30 e0       	ldi	r19, 0x00	; 0
    332a:	40 e8       	ldi	r20, 0x80	; 128
    332c:	5f e3       	ldi	r21, 0x3F	; 63
    332e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3332:	88 23       	and	r24, r24
    3334:	44 f4       	brge	.+16     	; 0x3346 <main+0x86e>
		__ticks = 1;
    3336:	fe 01       	movw	r30, r28
    3338:	e2 5b       	subi	r30, 0xB2	; 178
    333a:	ff 4f       	sbci	r31, 0xFF	; 255
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	91 83       	std	Z+1, r25	; 0x01
    3342:	80 83       	st	Z, r24
    3344:	64 c0       	rjmp	.+200    	; 0x340e <main+0x936>
	else if (__tmp > 65535)
    3346:	fe 01       	movw	r30, r28
    3348:	e0 5b       	subi	r30, 0xB0	; 176
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	60 81       	ld	r22, Z
    334e:	71 81       	ldd	r23, Z+1	; 0x01
    3350:	82 81       	ldd	r24, Z+2	; 0x02
    3352:	93 81       	ldd	r25, Z+3	; 0x03
    3354:	20 e0       	ldi	r18, 0x00	; 0
    3356:	3f ef       	ldi	r19, 0xFF	; 255
    3358:	4f e7       	ldi	r20, 0x7F	; 127
    335a:	57 e4       	ldi	r21, 0x47	; 71
    335c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3360:	18 16       	cp	r1, r24
    3362:	0c f0       	brlt	.+2      	; 0x3366 <main+0x88e>
    3364:	43 c0       	rjmp	.+134    	; 0x33ec <main+0x914>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3366:	fe 01       	movw	r30, r28
    3368:	ec 5a       	subi	r30, 0xAC	; 172
    336a:	ff 4f       	sbci	r31, 0xFF	; 255
    336c:	60 81       	ld	r22, Z
    336e:	71 81       	ldd	r23, Z+1	; 0x01
    3370:	82 81       	ldd	r24, Z+2	; 0x02
    3372:	93 81       	ldd	r25, Z+3	; 0x03
    3374:	20 e0       	ldi	r18, 0x00	; 0
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	40 e2       	ldi	r20, 0x20	; 32
    337a:	51 e4       	ldi	r21, 0x41	; 65
    337c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3380:	dc 01       	movw	r26, r24
    3382:	cb 01       	movw	r24, r22
    3384:	8e 01       	movw	r16, r28
    3386:	02 5b       	subi	r16, 0xB2	; 178
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	f8 01       	movw	r30, r16
    3398:	91 83       	std	Z+1, r25	; 0x01
    339a:	80 83       	st	Z, r24
    339c:	1f c0       	rjmp	.+62     	; 0x33dc <main+0x904>
    339e:	fe 01       	movw	r30, r28
    33a0:	e4 5b       	subi	r30, 0xB4	; 180
    33a2:	ff 4f       	sbci	r31, 0xFF	; 255
    33a4:	88 ec       	ldi	r24, 0xC8	; 200
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	91 83       	std	Z+1, r25	; 0x01
    33aa:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ac:	fe 01       	movw	r30, r28
    33ae:	e4 5b       	subi	r30, 0xB4	; 180
    33b0:	ff 4f       	sbci	r31, 0xFF	; 255
    33b2:	80 81       	ld	r24, Z
    33b4:	91 81       	ldd	r25, Z+1	; 0x01
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <main+0x8de>
    33ba:	fe 01       	movw	r30, r28
    33bc:	e4 5b       	subi	r30, 0xB4	; 180
    33be:	ff 4f       	sbci	r31, 0xFF	; 255
    33c0:	91 83       	std	Z+1, r25	; 0x01
    33c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c4:	de 01       	movw	r26, r28
    33c6:	a2 5b       	subi	r26, 0xB2	; 178
    33c8:	bf 4f       	sbci	r27, 0xFF	; 255
    33ca:	fe 01       	movw	r30, r28
    33cc:	e2 5b       	subi	r30, 0xB2	; 178
    33ce:	ff 4f       	sbci	r31, 0xFF	; 255
    33d0:	80 81       	ld	r24, Z
    33d2:	91 81       	ldd	r25, Z+1	; 0x01
    33d4:	01 97       	sbiw	r24, 0x01	; 1
    33d6:	11 96       	adiw	r26, 0x01	; 1
    33d8:	9c 93       	st	X, r25
    33da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33dc:	fe 01       	movw	r30, r28
    33de:	e2 5b       	subi	r30, 0xB2	; 178
    33e0:	ff 4f       	sbci	r31, 0xFF	; 255
    33e2:	80 81       	ld	r24, Z
    33e4:	91 81       	ldd	r25, Z+1	; 0x01
    33e6:	00 97       	sbiw	r24, 0x00	; 0
    33e8:	d1 f6       	brne	.-76     	; 0x339e <main+0x8c6>
    33ea:	4b c0       	rjmp	.+150    	; 0x3482 <main+0x9aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33ec:	8e 01       	movw	r16, r28
    33ee:	02 5b       	subi	r16, 0xB2	; 178
    33f0:	1f 4f       	sbci	r17, 0xFF	; 255
    33f2:	fe 01       	movw	r30, r28
    33f4:	e0 5b       	subi	r30, 0xB0	; 176
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	60 81       	ld	r22, Z
    33fa:	71 81       	ldd	r23, Z+1	; 0x01
    33fc:	82 81       	ldd	r24, Z+2	; 0x02
    33fe:	93 81       	ldd	r25, Z+3	; 0x03
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	de 01       	movw	r26, r28
    3410:	a6 5b       	subi	r26, 0xB6	; 182
    3412:	bf 4f       	sbci	r27, 0xFF	; 255
    3414:	fe 01       	movw	r30, r28
    3416:	e2 5b       	subi	r30, 0xB2	; 178
    3418:	ff 4f       	sbci	r31, 0xFF	; 255
    341a:	80 81       	ld	r24, Z
    341c:	91 81       	ldd	r25, Z+1	; 0x01
    341e:	11 96       	adiw	r26, 0x01	; 1
    3420:	9c 93       	st	X, r25
    3422:	8e 93       	st	-X, r24
    3424:	fe 01       	movw	r30, r28
    3426:	e6 5b       	subi	r30, 0xB6	; 182
    3428:	ff 4f       	sbci	r31, 0xFF	; 255
    342a:	80 81       	ld	r24, Z
    342c:	91 81       	ldd	r25, Z+1	; 0x01
    342e:	01 97       	sbiw	r24, 0x01	; 1
    3430:	f1 f7       	brne	.-4      	; 0x342e <main+0x956>
    3432:	fe 01       	movw	r30, r28
    3434:	e6 5b       	subi	r30, 0xB6	; 182
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	91 83       	std	Z+1, r25	; 0x01
    343a:	80 83       	st	Z, r24
    343c:	22 c0       	rjmp	.+68     	; 0x3482 <main+0x9aa>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    343e:	8e 01       	movw	r16, r28
    3440:	08 5a       	subi	r16, 0xA8	; 168
    3442:	1f 4f       	sbci	r17, 0xFF	; 255
    3444:	fe 01       	movw	r30, r28
    3446:	e7 5a       	subi	r30, 0xA7	; 167
    3448:	ff 4f       	sbci	r31, 0xFF	; 255
    344a:	60 81       	ld	r22, Z
    344c:	71 81       	ldd	r23, Z+1	; 0x01
    344e:	82 81       	ldd	r24, Z+2	; 0x02
    3450:	93 81       	ldd	r25, Z+3	; 0x03
    3452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3456:	dc 01       	movw	r26, r24
    3458:	cb 01       	movw	r24, r22
    345a:	f8 01       	movw	r30, r16
    345c:	80 83       	st	Z, r24
    345e:	de 01       	movw	r26, r28
    3460:	a7 5b       	subi	r26, 0xB7	; 183
    3462:	bf 4f       	sbci	r27, 0xFF	; 255
    3464:	fe 01       	movw	r30, r28
    3466:	e8 5a       	subi	r30, 0xA8	; 168
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	80 81       	ld	r24, Z
    346c:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    346e:	fe 01       	movw	r30, r28
    3470:	e7 5b       	subi	r30, 0xB7	; 183
    3472:	ff 4f       	sbci	r31, 0xFF	; 255
    3474:	80 81       	ld	r24, Z
    3476:	8a 95       	dec	r24
    3478:	f1 f7       	brne	.-4      	; 0x3476 <main+0x99e>
    347a:	fe 01       	movw	r30, r28
    347c:	e7 5b       	subi	r30, 0xB7	; 183
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 83       	st	Z, r24
		_delay_us(200);

		PORTD_REG=0b11110111;
    3482:	e2 e3       	ldi	r30, 0x32	; 50
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	87 ef       	ldi	r24, 0xF7	; 247
    3488:	80 83       	st	Z, r24
		PORTC_REG=SEG[Min_Dig2];
    348a:	a5 e3       	ldi	r26, 0x35	; 53
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	80 91 9e 00 	lds	r24, 0x009E
    3492:	88 2f       	mov	r24, r24
    3494:	90 e0       	ldi	r25, 0x00	; 0
    3496:	fc 01       	movw	r30, r24
    3498:	e0 58       	subi	r30, 0x80	; 128
    349a:	ff 4f       	sbci	r31, 0xFF	; 255
    349c:	80 81       	ld	r24, Z
    349e:	8c 93       	st	X, r24
    34a0:	fe 01       	movw	r30, r28
    34a2:	eb 5b       	subi	r30, 0xBB	; 187
    34a4:	ff 4f       	sbci	r31, 0xFF	; 255
    34a6:	80 e0       	ldi	r24, 0x00	; 0
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	a8 e4       	ldi	r26, 0x48	; 72
    34ac:	b3 e4       	ldi	r27, 0x43	; 67
    34ae:	80 83       	st	Z, r24
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	a2 83       	std	Z+2, r26	; 0x02
    34b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    34b6:	8e 01       	movw	r16, r28
    34b8:	0f 5b       	subi	r16, 0xBF	; 191
    34ba:	1f 4f       	sbci	r17, 0xFF	; 255
    34bc:	fe 01       	movw	r30, r28
    34be:	eb 5b       	subi	r30, 0xBB	; 187
    34c0:	ff 4f       	sbci	r31, 0xFF	; 255
    34c2:	60 81       	ld	r22, Z
    34c4:	71 81       	ldd	r23, Z+1	; 0x01
    34c6:	82 81       	ldd	r24, Z+2	; 0x02
    34c8:	93 81       	ldd	r25, Z+3	; 0x03
    34ca:	2b ea       	ldi	r18, 0xAB	; 171
    34cc:	3a ea       	ldi	r19, 0xAA	; 170
    34ce:	4a e2       	ldi	r20, 0x2A	; 42
    34d0:	50 e4       	ldi	r21, 0x40	; 64
    34d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	f8 01       	movw	r30, r16
    34dc:	80 83       	st	Z, r24
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	a2 83       	std	Z+2, r26	; 0x02
    34e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34e4:	fe 01       	movw	r30, r28
    34e6:	ef 5b       	subi	r30, 0xBF	; 191
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e8       	ldi	r20, 0x80	; 128
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    34fe:	88 23       	and	r24, r24
    3500:	34 f4       	brge	.+12     	; 0x350e <main+0xa36>
		__ticks = 1;
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	fe 01       	movw	r30, r28
    3506:	e0 5c       	subi	r30, 0xC0	; 192
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	80 83       	st	Z, r24
    350c:	9d c0       	rjmp	.+314    	; 0x3648 <main+0xb70>
	else if (__tmp > 255)
    350e:	fe 01       	movw	r30, r28
    3510:	ef 5b       	subi	r30, 0xBF	; 191
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4f e7       	ldi	r20, 0x7F	; 127
    3522:	53 e4       	ldi	r21, 0x43	; 67
    3524:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3528:	18 16       	cp	r1, r24
    352a:	0c f0       	brlt	.+2      	; 0x352e <main+0xa56>
    352c:	7e c0       	rjmp	.+252    	; 0x362a <main+0xb52>
	{
		_delay_ms(__us / 1000.0);
    352e:	fe 01       	movw	r30, r28
    3530:	eb 5b       	subi	r30, 0xBB	; 187
    3532:	ff 4f       	sbci	r31, 0xFF	; 255
    3534:	60 81       	ld	r22, Z
    3536:	71 81       	ldd	r23, Z+1	; 0x01
    3538:	82 81       	ldd	r24, Z+2	; 0x02
    353a:	93 81       	ldd	r25, Z+3	; 0x03
    353c:	20 e0       	ldi	r18, 0x00	; 0
    353e:	30 e0       	ldi	r19, 0x00	; 0
    3540:	4a e7       	ldi	r20, 0x7A	; 122
    3542:	54 e4       	ldi	r21, 0x44	; 68
    3544:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	8c af       	std	Y+60, r24	; 0x3c
    354e:	9d af       	std	Y+61, r25	; 0x3d
    3550:	ae af       	std	Y+62, r26	; 0x3e
    3552:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3554:	6c ad       	ldd	r22, Y+60	; 0x3c
    3556:	7d ad       	ldd	r23, Y+61	; 0x3d
    3558:	8e ad       	ldd	r24, Y+62	; 0x3e
    355a:	9f ad       	ldd	r25, Y+63	; 0x3f
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4a ef       	ldi	r20, 0xFA	; 250
    3562:	54 e4       	ldi	r21, 0x44	; 68
    3564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	88 af       	std	Y+56, r24	; 0x38
    356e:	99 af       	std	Y+57, r25	; 0x39
    3570:	aa af       	std	Y+58, r26	; 0x3a
    3572:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    3574:	68 ad       	ldd	r22, Y+56	; 0x38
    3576:	79 ad       	ldd	r23, Y+57	; 0x39
    3578:	8a ad       	ldd	r24, Y+58	; 0x3a
    357a:	9b ad       	ldd	r25, Y+59	; 0x3b
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3588:	88 23       	and	r24, r24
    358a:	2c f4       	brge	.+10     	; 0x3596 <main+0xabe>
		__ticks = 1;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9f ab       	std	Y+55, r25	; 0x37
    3592:	8e ab       	std	Y+54, r24	; 0x36
    3594:	3f c0       	rjmp	.+126    	; 0x3614 <main+0xb3c>
	else if (__tmp > 65535)
    3596:	68 ad       	ldd	r22, Y+56	; 0x38
    3598:	79 ad       	ldd	r23, Y+57	; 0x39
    359a:	8a ad       	ldd	r24, Y+58	; 0x3a
    359c:	9b ad       	ldd	r25, Y+59	; 0x3b
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	3f ef       	ldi	r19, 0xFF	; 255
    35a2:	4f e7       	ldi	r20, 0x7F	; 127
    35a4:	57 e4       	ldi	r21, 0x47	; 71
    35a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35aa:	18 16       	cp	r1, r24
    35ac:	4c f5       	brge	.+82     	; 0x3600 <main+0xb28>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ae:	6c ad       	ldd	r22, Y+60	; 0x3c
    35b0:	7d ad       	ldd	r23, Y+61	; 0x3d
    35b2:	8e ad       	ldd	r24, Y+62	; 0x3e
    35b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e2       	ldi	r20, 0x20	; 32
    35bc:	51 e4       	ldi	r21, 0x41	; 65
    35be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	bc 01       	movw	r22, r24
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9f ab       	std	Y+55, r25	; 0x37
    35d4:	8e ab       	std	Y+54, r24	; 0x36
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <main+0xb1e>
    35d8:	88 ec       	ldi	r24, 0xC8	; 200
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	9d ab       	std	Y+53, r25	; 0x35
    35de:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35e0:	8c a9       	ldd	r24, Y+52	; 0x34
    35e2:	9d a9       	ldd	r25, Y+53	; 0x35
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <main+0xb0c>
    35e8:	9d ab       	std	Y+53, r25	; 0x35
    35ea:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ec:	8e a9       	ldd	r24, Y+54	; 0x36
    35ee:	9f a9       	ldd	r25, Y+55	; 0x37
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	9f ab       	std	Y+55, r25	; 0x37
    35f4:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	8e a9       	ldd	r24, Y+54	; 0x36
    35f8:	9f a9       	ldd	r25, Y+55	; 0x37
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	69 f7       	brne	.-38     	; 0x35d8 <main+0xb00>
    35fe:	2d c0       	rjmp	.+90     	; 0x365a <main+0xb82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3600:	68 ad       	ldd	r22, Y+56	; 0x38
    3602:	79 ad       	ldd	r23, Y+57	; 0x39
    3604:	8a ad       	ldd	r24, Y+58	; 0x3a
    3606:	9b ad       	ldd	r25, Y+59	; 0x3b
    3608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	9f ab       	std	Y+55, r25	; 0x37
    3612:	8e ab       	std	Y+54, r24	; 0x36
    3614:	8e a9       	ldd	r24, Y+54	; 0x36
    3616:	9f a9       	ldd	r25, Y+55	; 0x37
    3618:	9b ab       	std	Y+51, r25	; 0x33
    361a:	8a ab       	std	Y+50, r24	; 0x32
    361c:	8a a9       	ldd	r24, Y+50	; 0x32
    361e:	9b a9       	ldd	r25, Y+51	; 0x33
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <main+0xb48>
    3624:	9b ab       	std	Y+51, r25	; 0x33
    3626:	8a ab       	std	Y+50, r24	; 0x32
    3628:	18 c0       	rjmp	.+48     	; 0x365a <main+0xb82>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    362a:	fe 01       	movw	r30, r28
    362c:	ef 5b       	subi	r30, 0xBF	; 191
    362e:	ff 4f       	sbci	r31, 0xFF	; 255
    3630:	60 81       	ld	r22, Z
    3632:	71 81       	ldd	r23, Z+1	; 0x01
    3634:	82 81       	ldd	r24, Z+2	; 0x02
    3636:	93 81       	ldd	r25, Z+3	; 0x03
    3638:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	fe 01       	movw	r30, r28
    3642:	e0 5c       	subi	r30, 0xC0	; 192
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 83       	st	Z, r24
    3648:	fe 01       	movw	r30, r28
    364a:	e0 5c       	subi	r30, 0xC0	; 192
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	80 81       	ld	r24, Z
    3650:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3652:	89 a9       	ldd	r24, Y+49	; 0x31
    3654:	8a 95       	dec	r24
    3656:	f1 f7       	brne	.-4      	; 0x3654 <main+0xb7c>
    3658:	89 ab       	std	Y+49, r24	; 0x31
		_delay_us(200);

		PORTD_REG=0b11101111;
    365a:	e2 e3       	ldi	r30, 0x32	; 50
    365c:	f0 e0       	ldi	r31, 0x00	; 0
    365e:	8f ee       	ldi	r24, 0xEF	; 239
    3660:	80 83       	st	Z, r24
		PORTC_REG=SEG[Hr_Dig1];
    3662:	a5 e3       	ldi	r26, 0x35	; 53
    3664:	b0 e0       	ldi	r27, 0x00	; 0
    3666:	80 91 9f 00 	lds	r24, 0x009F
    366a:	88 2f       	mov	r24, r24
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	fc 01       	movw	r30, r24
    3670:	e0 58       	subi	r30, 0x80	; 128
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	80 81       	ld	r24, Z
    3676:	8c 93       	st	X, r24
    3678:	80 e0       	ldi	r24, 0x00	; 0
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	a8 e4       	ldi	r26, 0x48	; 72
    367e:	b3 e4       	ldi	r27, 0x43	; 67
    3680:	8d a7       	std	Y+45, r24	; 0x2d
    3682:	9e a7       	std	Y+46, r25	; 0x2e
    3684:	af a7       	std	Y+47, r26	; 0x2f
    3686:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3688:	6d a5       	ldd	r22, Y+45	; 0x2d
    368a:	7e a5       	ldd	r23, Y+46	; 0x2e
    368c:	8f a5       	ldd	r24, Y+47	; 0x2f
    368e:	98 a9       	ldd	r25, Y+48	; 0x30
    3690:	2b ea       	ldi	r18, 0xAB	; 171
    3692:	3a ea       	ldi	r19, 0xAA	; 170
    3694:	4a e2       	ldi	r20, 0x2A	; 42
    3696:	50 e4       	ldi	r21, 0x40	; 64
    3698:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369c:	dc 01       	movw	r26, r24
    369e:	cb 01       	movw	r24, r22
    36a0:	89 a7       	std	Y+41, r24	; 0x29
    36a2:	9a a7       	std	Y+42, r25	; 0x2a
    36a4:	ab a7       	std	Y+43, r26	; 0x2b
    36a6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    36a8:	69 a5       	ldd	r22, Y+41	; 0x29
    36aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    36ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    36ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    36b0:	20 e0       	ldi	r18, 0x00	; 0
    36b2:	30 e0       	ldi	r19, 0x00	; 0
    36b4:	40 e8       	ldi	r20, 0x80	; 128
    36b6:	5f e3       	ldi	r21, 0x3F	; 63
    36b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    36bc:	88 23       	and	r24, r24
    36be:	1c f4       	brge	.+6      	; 0x36c6 <main+0xbee>
		__ticks = 1;
    36c0:	81 e0       	ldi	r24, 0x01	; 1
    36c2:	88 a7       	std	Y+40, r24	; 0x28
    36c4:	91 c0       	rjmp	.+290    	; 0x37e8 <main+0xd10>
	else if (__tmp > 255)
    36c6:	69 a5       	ldd	r22, Y+41	; 0x29
    36c8:	7a a5       	ldd	r23, Y+42	; 0x2a
    36ca:	8b a5       	ldd	r24, Y+43	; 0x2b
    36cc:	9c a5       	ldd	r25, Y+44	; 0x2c
    36ce:	20 e0       	ldi	r18, 0x00	; 0
    36d0:	30 e0       	ldi	r19, 0x00	; 0
    36d2:	4f e7       	ldi	r20, 0x7F	; 127
    36d4:	53 e4       	ldi	r21, 0x43	; 67
    36d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    36da:	18 16       	cp	r1, r24
    36dc:	0c f0       	brlt	.+2      	; 0x36e0 <main+0xc08>
    36de:	7b c0       	rjmp	.+246    	; 0x37d6 <main+0xcfe>
	{
		_delay_ms(__us / 1000.0);
    36e0:	6d a5       	ldd	r22, Y+45	; 0x2d
    36e2:	7e a5       	ldd	r23, Y+46	; 0x2e
    36e4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36e6:	98 a9       	ldd	r25, Y+48	; 0x30
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	4a e7       	ldi	r20, 0x7A	; 122
    36ee:	54 e4       	ldi	r21, 0x44	; 68
    36f0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	8c a3       	std	Y+36, r24	; 0x24
    36fa:	9d a3       	std	Y+37, r25	; 0x25
    36fc:	ae a3       	std	Y+38, r26	; 0x26
    36fe:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3700:	6c a1       	ldd	r22, Y+36	; 0x24
    3702:	7d a1       	ldd	r23, Y+37	; 0x25
    3704:	8e a1       	ldd	r24, Y+38	; 0x26
    3706:	9f a1       	ldd	r25, Y+39	; 0x27
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	30 e0       	ldi	r19, 0x00	; 0
    370c:	4a ef       	ldi	r20, 0xFA	; 250
    370e:	54 e4       	ldi	r21, 0x44	; 68
    3710:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3714:	dc 01       	movw	r26, r24
    3716:	cb 01       	movw	r24, r22
    3718:	88 a3       	std	Y+32, r24	; 0x20
    371a:	99 a3       	std	Y+33, r25	; 0x21
    371c:	aa a3       	std	Y+34, r26	; 0x22
    371e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    3720:	68 a1       	ldd	r22, Y+32	; 0x20
    3722:	79 a1       	ldd	r23, Y+33	; 0x21
    3724:	8a a1       	ldd	r24, Y+34	; 0x22
    3726:	9b a1       	ldd	r25, Y+35	; 0x23
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	40 e8       	ldi	r20, 0x80	; 128
    372e:	5f e3       	ldi	r21, 0x3F	; 63
    3730:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3734:	88 23       	and	r24, r24
    3736:	2c f4       	brge	.+10     	; 0x3742 <main+0xc6a>
		__ticks = 1;
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	9f 8f       	std	Y+31, r25	; 0x1f
    373e:	8e 8f       	std	Y+30, r24	; 0x1e
    3740:	3f c0       	rjmp	.+126    	; 0x37c0 <main+0xce8>
	else if (__tmp > 65535)
    3742:	68 a1       	ldd	r22, Y+32	; 0x20
    3744:	79 a1       	ldd	r23, Y+33	; 0x21
    3746:	8a a1       	ldd	r24, Y+34	; 0x22
    3748:	9b a1       	ldd	r25, Y+35	; 0x23
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	3f ef       	ldi	r19, 0xFF	; 255
    374e:	4f e7       	ldi	r20, 0x7F	; 127
    3750:	57 e4       	ldi	r21, 0x47	; 71
    3752:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3756:	18 16       	cp	r1, r24
    3758:	4c f5       	brge	.+82     	; 0x37ac <main+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    375a:	6c a1       	ldd	r22, Y+36	; 0x24
    375c:	7d a1       	ldd	r23, Y+37	; 0x25
    375e:	8e a1       	ldd	r24, Y+38	; 0x26
    3760:	9f a1       	ldd	r25, Y+39	; 0x27
    3762:	20 e0       	ldi	r18, 0x00	; 0
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	40 e2       	ldi	r20, 0x20	; 32
    3768:	51 e4       	ldi	r21, 0x41	; 65
    376a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    376e:	dc 01       	movw	r26, r24
    3770:	cb 01       	movw	r24, r22
    3772:	bc 01       	movw	r22, r24
    3774:	cd 01       	movw	r24, r26
    3776:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    377a:	dc 01       	movw	r26, r24
    377c:	cb 01       	movw	r24, r22
    377e:	9f 8f       	std	Y+31, r25	; 0x1f
    3780:	8e 8f       	std	Y+30, r24	; 0x1e
    3782:	0f c0       	rjmp	.+30     	; 0x37a2 <main+0xcca>
    3784:	88 ec       	ldi	r24, 0xC8	; 200
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9d 8f       	std	Y+29, r25	; 0x1d
    378a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    378c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    378e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3790:	01 97       	sbiw	r24, 0x01	; 1
    3792:	f1 f7       	brne	.-4      	; 0x3790 <main+0xcb8>
    3794:	9d 8f       	std	Y+29, r25	; 0x1d
    3796:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3798:	8e 8d       	ldd	r24, Y+30	; 0x1e
    379a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    379c:	01 97       	sbiw	r24, 0x01	; 1
    379e:	9f 8f       	std	Y+31, r25	; 0x1f
    37a0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37a2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37a4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37a6:	00 97       	sbiw	r24, 0x00	; 0
    37a8:	69 f7       	brne	.-38     	; 0x3784 <main+0xcac>
    37aa:	24 c0       	rjmp	.+72     	; 0x37f4 <main+0xd1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37ac:	68 a1       	ldd	r22, Y+32	; 0x20
    37ae:	79 a1       	ldd	r23, Y+33	; 0x21
    37b0:	8a a1       	ldd	r24, Y+34	; 0x22
    37b2:	9b a1       	ldd	r25, Y+35	; 0x23
    37b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b8:	dc 01       	movw	r26, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	9f 8f       	std	Y+31, r25	; 0x1f
    37be:	8e 8f       	std	Y+30, r24	; 0x1e
    37c0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    37c2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    37c4:	9b 8f       	std	Y+27, r25	; 0x1b
    37c6:	8a 8f       	std	Y+26, r24	; 0x1a
    37c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37cc:	01 97       	sbiw	r24, 0x01	; 1
    37ce:	f1 f7       	brne	.-4      	; 0x37cc <main+0xcf4>
    37d0:	9b 8f       	std	Y+27, r25	; 0x1b
    37d2:	8a 8f       	std	Y+26, r24	; 0x1a
    37d4:	0f c0       	rjmp	.+30     	; 0x37f4 <main+0xd1c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    37d6:	69 a5       	ldd	r22, Y+41	; 0x29
    37d8:	7a a5       	ldd	r23, Y+42	; 0x2a
    37da:	8b a5       	ldd	r24, Y+43	; 0x2b
    37dc:	9c a5       	ldd	r25, Y+44	; 0x2c
    37de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	88 a7       	std	Y+40, r24	; 0x28
    37e8:	88 a5       	ldd	r24, Y+40	; 0x28
    37ea:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37ec:	89 8d       	ldd	r24, Y+25	; 0x19
    37ee:	8a 95       	dec	r24
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <main+0xd16>
    37f2:	89 8f       	std	Y+25, r24	; 0x19
		_delay_us(200);

		PORTD_REG=0b11011111;
    37f4:	e2 e3       	ldi	r30, 0x32	; 50
    37f6:	f0 e0       	ldi	r31, 0x00	; 0
    37f8:	8f ed       	ldi	r24, 0xDF	; 223
    37fa:	80 83       	st	Z, r24
		PORTC_REG=SEG[Hr_Dig2];
    37fc:	a5 e3       	ldi	r26, 0x35	; 53
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	80 91 a0 00 	lds	r24, 0x00A0
    3804:	88 2f       	mov	r24, r24
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	fc 01       	movw	r30, r24
    380a:	e0 58       	subi	r30, 0x80	; 128
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 81       	ld	r24, Z
    3810:	8c 93       	st	X, r24
    3812:	80 e0       	ldi	r24, 0x00	; 0
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	a8 e4       	ldi	r26, 0x48	; 72
    3818:	b3 e4       	ldi	r27, 0x43	; 67
    381a:	8d 8b       	std	Y+21, r24	; 0x15
    381c:	9e 8b       	std	Y+22, r25	; 0x16
    381e:	af 8b       	std	Y+23, r26	; 0x17
    3820:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3822:	6d 89       	ldd	r22, Y+21	; 0x15
    3824:	7e 89       	ldd	r23, Y+22	; 0x16
    3826:	8f 89       	ldd	r24, Y+23	; 0x17
    3828:	98 8d       	ldd	r25, Y+24	; 0x18
    382a:	2b ea       	ldi	r18, 0xAB	; 171
    382c:	3a ea       	ldi	r19, 0xAA	; 170
    382e:	4a e2       	ldi	r20, 0x2A	; 42
    3830:	50 e4       	ldi	r21, 0x40	; 64
    3832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3836:	dc 01       	movw	r26, r24
    3838:	cb 01       	movw	r24, r22
    383a:	89 8b       	std	Y+17, r24	; 0x11
    383c:	9a 8b       	std	Y+18, r25	; 0x12
    383e:	ab 8b       	std	Y+19, r26	; 0x13
    3840:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3842:	69 89       	ldd	r22, Y+17	; 0x11
    3844:	7a 89       	ldd	r23, Y+18	; 0x12
    3846:	8b 89       	ldd	r24, Y+19	; 0x13
    3848:	9c 89       	ldd	r25, Y+20	; 0x14
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e8       	ldi	r20, 0x80	; 128
    3850:	5f e3       	ldi	r21, 0x3F	; 63
    3852:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3856:	88 23       	and	r24, r24
    3858:	1c f4       	brge	.+6      	; 0x3860 <main+0xd88>
		__ticks = 1;
    385a:	81 e0       	ldi	r24, 0x01	; 1
    385c:	88 8b       	std	Y+16, r24	; 0x10
    385e:	91 c0       	rjmp	.+290    	; 0x3982 <main+0xeaa>
	else if (__tmp > 255)
    3860:	69 89       	ldd	r22, Y+17	; 0x11
    3862:	7a 89       	ldd	r23, Y+18	; 0x12
    3864:	8b 89       	ldd	r24, Y+19	; 0x13
    3866:	9c 89       	ldd	r25, Y+20	; 0x14
    3868:	20 e0       	ldi	r18, 0x00	; 0
    386a:	30 e0       	ldi	r19, 0x00	; 0
    386c:	4f e7       	ldi	r20, 0x7F	; 127
    386e:	53 e4       	ldi	r21, 0x43	; 67
    3870:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3874:	18 16       	cp	r1, r24
    3876:	0c f0       	brlt	.+2      	; 0x387a <main+0xda2>
    3878:	7b c0       	rjmp	.+246    	; 0x3970 <main+0xe98>
	{
		_delay_ms(__us / 1000.0);
    387a:	6d 89       	ldd	r22, Y+21	; 0x15
    387c:	7e 89       	ldd	r23, Y+22	; 0x16
    387e:	8f 89       	ldd	r24, Y+23	; 0x17
    3880:	98 8d       	ldd	r25, Y+24	; 0x18
    3882:	20 e0       	ldi	r18, 0x00	; 0
    3884:	30 e0       	ldi	r19, 0x00	; 0
    3886:	4a e7       	ldi	r20, 0x7A	; 122
    3888:	54 e4       	ldi	r21, 0x44	; 68
    388a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	8c 87       	std	Y+12, r24	; 0x0c
    3894:	9d 87       	std	Y+13, r25	; 0x0d
    3896:	ae 87       	std	Y+14, r26	; 0x0e
    3898:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    389a:	6c 85       	ldd	r22, Y+12	; 0x0c
    389c:	7d 85       	ldd	r23, Y+13	; 0x0d
    389e:	8e 85       	ldd	r24, Y+14	; 0x0e
    38a0:	9f 85       	ldd	r25, Y+15	; 0x0f
    38a2:	20 e0       	ldi	r18, 0x00	; 0
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	4a ef       	ldi	r20, 0xFA	; 250
    38a8:	54 e4       	ldi	r21, 0x44	; 68
    38aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ae:	dc 01       	movw	r26, r24
    38b0:	cb 01       	movw	r24, r22
    38b2:	88 87       	std	Y+8, r24	; 0x08
    38b4:	99 87       	std	Y+9, r25	; 0x09
    38b6:	aa 87       	std	Y+10, r26	; 0x0a
    38b8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    38ba:	68 85       	ldd	r22, Y+8	; 0x08
    38bc:	79 85       	ldd	r23, Y+9	; 0x09
    38be:	8a 85       	ldd	r24, Y+10	; 0x0a
    38c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    38c2:	20 e0       	ldi	r18, 0x00	; 0
    38c4:	30 e0       	ldi	r19, 0x00	; 0
    38c6:	40 e8       	ldi	r20, 0x80	; 128
    38c8:	5f e3       	ldi	r21, 0x3F	; 63
    38ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38ce:	88 23       	and	r24, r24
    38d0:	2c f4       	brge	.+10     	; 0x38dc <main+0xe04>
		__ticks = 1;
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	90 e0       	ldi	r25, 0x00	; 0
    38d6:	9f 83       	std	Y+7, r25	; 0x07
    38d8:	8e 83       	std	Y+6, r24	; 0x06
    38da:	3f c0       	rjmp	.+126    	; 0x395a <main+0xe82>
	else if (__tmp > 65535)
    38dc:	68 85       	ldd	r22, Y+8	; 0x08
    38de:	79 85       	ldd	r23, Y+9	; 0x09
    38e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    38e4:	20 e0       	ldi	r18, 0x00	; 0
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
    38e8:	4f e7       	ldi	r20, 0x7F	; 127
    38ea:	57 e4       	ldi	r21, 0x47	; 71
    38ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38f0:	18 16       	cp	r1, r24
    38f2:	4c f5       	brge	.+82     	; 0x3946 <main+0xe6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    38f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    38f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    38fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    38fc:	20 e0       	ldi	r18, 0x00	; 0
    38fe:	30 e0       	ldi	r19, 0x00	; 0
    3900:	40 e2       	ldi	r20, 0x20	; 32
    3902:	51 e4       	ldi	r21, 0x41	; 65
    3904:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3908:	dc 01       	movw	r26, r24
    390a:	cb 01       	movw	r24, r22
    390c:	bc 01       	movw	r22, r24
    390e:	cd 01       	movw	r24, r26
    3910:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3914:	dc 01       	movw	r26, r24
    3916:	cb 01       	movw	r24, r22
    3918:	9f 83       	std	Y+7, r25	; 0x07
    391a:	8e 83       	std	Y+6, r24	; 0x06
    391c:	0f c0       	rjmp	.+30     	; 0x393c <main+0xe64>
    391e:	88 ec       	ldi	r24, 0xC8	; 200
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	9d 83       	std	Y+5, r25	; 0x05
    3924:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3926:	8c 81       	ldd	r24, Y+4	; 0x04
    3928:	9d 81       	ldd	r25, Y+5	; 0x05
    392a:	01 97       	sbiw	r24, 0x01	; 1
    392c:	f1 f7       	brne	.-4      	; 0x392a <main+0xe52>
    392e:	9d 83       	std	Y+5, r25	; 0x05
    3930:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3932:	8e 81       	ldd	r24, Y+6	; 0x06
    3934:	9f 81       	ldd	r25, Y+7	; 0x07
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	9f 83       	std	Y+7, r25	; 0x07
    393a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    393c:	8e 81       	ldd	r24, Y+6	; 0x06
    393e:	9f 81       	ldd	r25, Y+7	; 0x07
    3940:	00 97       	sbiw	r24, 0x00	; 0
    3942:	69 f7       	brne	.-38     	; 0x391e <main+0xe46>
    3944:	07 c9       	rjmp	.-3570   	; 0x2b54 <main+0x7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3946:	68 85       	ldd	r22, Y+8	; 0x08
    3948:	79 85       	ldd	r23, Y+9	; 0x09
    394a:	8a 85       	ldd	r24, Y+10	; 0x0a
    394c:	9b 85       	ldd	r25, Y+11	; 0x0b
    394e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	9f 83       	std	Y+7, r25	; 0x07
    3958:	8e 83       	std	Y+6, r24	; 0x06
    395a:	8e 81       	ldd	r24, Y+6	; 0x06
    395c:	9f 81       	ldd	r25, Y+7	; 0x07
    395e:	9b 83       	std	Y+3, r25	; 0x03
    3960:	8a 83       	std	Y+2, r24	; 0x02
    3962:	8a 81       	ldd	r24, Y+2	; 0x02
    3964:	9b 81       	ldd	r25, Y+3	; 0x03
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	f1 f7       	brne	.-4      	; 0x3966 <main+0xe8e>
    396a:	9b 83       	std	Y+3, r25	; 0x03
    396c:	8a 83       	std	Y+2, r24	; 0x02
    396e:	f2 c8       	rjmp	.-3612   	; 0x2b54 <main+0x7c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3970:	69 89       	ldd	r22, Y+17	; 0x11
    3972:	7a 89       	ldd	r23, Y+18	; 0x12
    3974:	8b 89       	ldd	r24, Y+19	; 0x13
    3976:	9c 89       	ldd	r25, Y+20	; 0x14
    3978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	88 8b       	std	Y+16, r24	; 0x10
    3982:	88 89       	ldd	r24, Y+16	; 0x10
    3984:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	8a 95       	dec	r24
    398a:	f1 f7       	brne	.-4      	; 0x3988 <main+0xeb0>
    398c:	89 83       	std	Y+1, r24	; 0x01
    398e:	e2 c8       	rjmp	.-3644   	; 0x2b54 <main+0x7c>

00003990 <Func>:
}



void Func(void)
{
    3990:	df 93       	push	r29
    3992:	cf 93       	push	r28
    3994:	cd b7       	in	r28, 0x3d	; 61
    3996:	de b7       	in	r29, 0x3e	; 62
	static u16 global_u16Counter=0;
	global_u16Counter++;
    3998:	80 91 99 00 	lds	r24, 0x0099
    399c:	90 91 9a 00 	lds	r25, 0x009A
    39a0:	01 96       	adiw	r24, 0x01	; 1
    39a2:	90 93 9a 00 	sts	0x009A, r25
    39a6:	80 93 99 00 	sts	0x0099, r24

	if (global_u16Counter == 3907)
    39aa:	80 91 99 00 	lds	r24, 0x0099
    39ae:	90 91 9a 00 	lds	r25, 0x009A
    39b2:	2f e0       	ldi	r18, 0x0F	; 15
    39b4:	83 34       	cpi	r24, 0x43	; 67
    39b6:	92 07       	cpc	r25, r18
    39b8:	09 f0       	breq	.+2      	; 0x39bc <Func+0x2c>
    39ba:	82 c0       	rjmp	.+260    	; 0x3ac0 <Func+0x130>
	{
		global_u16Counter=0;
    39bc:	10 92 9a 00 	sts	0x009A, r1
    39c0:	10 92 99 00 	sts	0x0099, r1
		global_u8Second++;
    39c4:	80 91 96 00 	lds	r24, 0x0096
    39c8:	8f 5f       	subi	r24, 0xFF	; 255
    39ca:	80 93 96 00 	sts	0x0096, r24
		if(global_u8Second==60)
    39ce:	80 91 96 00 	lds	r24, 0x0096
    39d2:	8c 33       	cpi	r24, 0x3C	; 60
    39d4:	39 f4       	brne	.+14     	; 0x39e4 <Func+0x54>
		{
			global_u8Second=0;
    39d6:	10 92 96 00 	sts	0x0096, r1
			global_u8Minute++;
    39da:	80 91 97 00 	lds	r24, 0x0097
    39de:	8f 5f       	subi	r24, 0xFF	; 255
    39e0:	80 93 97 00 	sts	0x0097, r24
		}
		if(global_u8Minute==60)
    39e4:	80 91 97 00 	lds	r24, 0x0097
    39e8:	8c 33       	cpi	r24, 0x3C	; 60
    39ea:	39 f4       	brne	.+14     	; 0x39fa <Func+0x6a>
		{
			global_u8Minute=0;
    39ec:	10 92 97 00 	sts	0x0097, r1
			global_u8Hour++;
    39f0:	80 91 98 00 	lds	r24, 0x0098
    39f4:	8f 5f       	subi	r24, 0xFF	; 255
    39f6:	80 93 98 00 	sts	0x0098, r24
		}
		if(global_u8Hour==24)
    39fa:	80 91 98 00 	lds	r24, 0x0098
    39fe:	88 31       	cpi	r24, 0x18	; 24
    3a00:	11 f4       	brne	.+4      	; 0x3a06 <Func+0x76>
		{
			global_u8Hour=0;
    3a02:	10 92 98 00 	sts	0x0098, r1
		}

		Sec_Dig2=global_u8Second/10;
    3a06:	80 91 96 00 	lds	r24, 0x0096
    3a0a:	9a e0       	ldi	r25, 0x0A	; 10
    3a0c:	69 2f       	mov	r22, r25
    3a0e:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__udivmodqi4>
    3a12:	80 93 9c 00 	sts	0x009C, r24
		Sec_Dig1=global_u8Second - Sec_Dig2*10;
    3a16:	80 91 9c 00 	lds	r24, 0x009C
    3a1a:	88 2f       	mov	r24, r24
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	9c 01       	movw	r18, r24
    3a20:	22 0f       	add	r18, r18
    3a22:	33 1f       	adc	r19, r19
    3a24:	c9 01       	movw	r24, r18
    3a26:	88 0f       	add	r24, r24
    3a28:	99 1f       	adc	r25, r25
    3a2a:	88 0f       	add	r24, r24
    3a2c:	99 1f       	adc	r25, r25
    3a2e:	82 0f       	add	r24, r18
    3a30:	93 1f       	adc	r25, r19
    3a32:	90 95       	com	r25
    3a34:	81 95       	neg	r24
    3a36:	9f 4f       	sbci	r25, 0xFF	; 255
    3a38:	98 2f       	mov	r25, r24
    3a3a:	80 91 96 00 	lds	r24, 0x0096
    3a3e:	89 0f       	add	r24, r25
    3a40:	80 93 9b 00 	sts	0x009B, r24

		Min_Dig2=global_u8Minute/10;
    3a44:	80 91 97 00 	lds	r24, 0x0097
    3a48:	9a e0       	ldi	r25, 0x0A	; 10
    3a4a:	69 2f       	mov	r22, r25
    3a4c:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__udivmodqi4>
    3a50:	80 93 9e 00 	sts	0x009E, r24
		Min_Dig1=global_u8Minute - Min_Dig2*10;
    3a54:	80 91 9e 00 	lds	r24, 0x009E
    3a58:	88 2f       	mov	r24, r24
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	9c 01       	movw	r18, r24
    3a5e:	22 0f       	add	r18, r18
    3a60:	33 1f       	adc	r19, r19
    3a62:	c9 01       	movw	r24, r18
    3a64:	88 0f       	add	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	88 0f       	add	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	82 0f       	add	r24, r18
    3a6e:	93 1f       	adc	r25, r19
    3a70:	90 95       	com	r25
    3a72:	81 95       	neg	r24
    3a74:	9f 4f       	sbci	r25, 0xFF	; 255
    3a76:	98 2f       	mov	r25, r24
    3a78:	80 91 97 00 	lds	r24, 0x0097
    3a7c:	89 0f       	add	r24, r25
    3a7e:	80 93 9d 00 	sts	0x009D, r24

		Hr_Dig2=global_u8Hour/10;
    3a82:	80 91 98 00 	lds	r24, 0x0098
    3a86:	9a e0       	ldi	r25, 0x0A	; 10
    3a88:	69 2f       	mov	r22, r25
    3a8a:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <__udivmodqi4>
    3a8e:	80 93 a0 00 	sts	0x00A0, r24
		Hr_Dig1=global_u8Hour - Hr_Dig2*10;
    3a92:	80 91 a0 00 	lds	r24, 0x00A0
    3a96:	88 2f       	mov	r24, r24
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	9c 01       	movw	r18, r24
    3a9c:	22 0f       	add	r18, r18
    3a9e:	33 1f       	adc	r19, r19
    3aa0:	c9 01       	movw	r24, r18
    3aa2:	88 0f       	add	r24, r24
    3aa4:	99 1f       	adc	r25, r25
    3aa6:	88 0f       	add	r24, r24
    3aa8:	99 1f       	adc	r25, r25
    3aaa:	82 0f       	add	r24, r18
    3aac:	93 1f       	adc	r25, r19
    3aae:	90 95       	com	r25
    3ab0:	81 95       	neg	r24
    3ab2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ab4:	98 2f       	mov	r25, r24
    3ab6:	80 91 98 00 	lds	r24, 0x0098
    3aba:	89 0f       	add	r24, r25
    3abc:	80 93 9f 00 	sts	0x009F, r24
	}
}
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <__mulsi3>:
    3ac6:	62 9f       	mul	r22, r18
    3ac8:	d0 01       	movw	r26, r0
    3aca:	73 9f       	mul	r23, r19
    3acc:	f0 01       	movw	r30, r0
    3ace:	82 9f       	mul	r24, r18
    3ad0:	e0 0d       	add	r30, r0
    3ad2:	f1 1d       	adc	r31, r1
    3ad4:	64 9f       	mul	r22, r20
    3ad6:	e0 0d       	add	r30, r0
    3ad8:	f1 1d       	adc	r31, r1
    3ada:	92 9f       	mul	r25, r18
    3adc:	f0 0d       	add	r31, r0
    3ade:	83 9f       	mul	r24, r19
    3ae0:	f0 0d       	add	r31, r0
    3ae2:	74 9f       	mul	r23, r20
    3ae4:	f0 0d       	add	r31, r0
    3ae6:	65 9f       	mul	r22, r21
    3ae8:	f0 0d       	add	r31, r0
    3aea:	99 27       	eor	r25, r25
    3aec:	72 9f       	mul	r23, r18
    3aee:	b0 0d       	add	r27, r0
    3af0:	e1 1d       	adc	r30, r1
    3af2:	f9 1f       	adc	r31, r25
    3af4:	63 9f       	mul	r22, r19
    3af6:	b0 0d       	add	r27, r0
    3af8:	e1 1d       	adc	r30, r1
    3afa:	f9 1f       	adc	r31, r25
    3afc:	bd 01       	movw	r22, r26
    3afe:	cf 01       	movw	r24, r30
    3b00:	11 24       	eor	r1, r1
    3b02:	08 95       	ret

00003b04 <__udivmodqi4>:
    3b04:	99 1b       	sub	r25, r25
    3b06:	79 e0       	ldi	r23, 0x09	; 9
    3b08:	04 c0       	rjmp	.+8      	; 0x3b12 <__udivmodqi4_ep>

00003b0a <__udivmodqi4_loop>:
    3b0a:	99 1f       	adc	r25, r25
    3b0c:	96 17       	cp	r25, r22
    3b0e:	08 f0       	brcs	.+2      	; 0x3b12 <__udivmodqi4_ep>
    3b10:	96 1b       	sub	r25, r22

00003b12 <__udivmodqi4_ep>:
    3b12:	88 1f       	adc	r24, r24
    3b14:	7a 95       	dec	r23
    3b16:	c9 f7       	brne	.-14     	; 0x3b0a <__udivmodqi4_loop>
    3b18:	80 95       	com	r24
    3b1a:	08 95       	ret

00003b1c <__udivmodhi4>:
    3b1c:	aa 1b       	sub	r26, r26
    3b1e:	bb 1b       	sub	r27, r27
    3b20:	51 e1       	ldi	r21, 0x11	; 17
    3b22:	07 c0       	rjmp	.+14     	; 0x3b32 <__udivmodhi4_ep>

00003b24 <__udivmodhi4_loop>:
    3b24:	aa 1f       	adc	r26, r26
    3b26:	bb 1f       	adc	r27, r27
    3b28:	a6 17       	cp	r26, r22
    3b2a:	b7 07       	cpc	r27, r23
    3b2c:	10 f0       	brcs	.+4      	; 0x3b32 <__udivmodhi4_ep>
    3b2e:	a6 1b       	sub	r26, r22
    3b30:	b7 0b       	sbc	r27, r23

00003b32 <__udivmodhi4_ep>:
    3b32:	88 1f       	adc	r24, r24
    3b34:	99 1f       	adc	r25, r25
    3b36:	5a 95       	dec	r21
    3b38:	a9 f7       	brne	.-22     	; 0x3b24 <__udivmodhi4_loop>
    3b3a:	80 95       	com	r24
    3b3c:	90 95       	com	r25
    3b3e:	bc 01       	movw	r22, r24
    3b40:	cd 01       	movw	r24, r26
    3b42:	08 95       	ret

00003b44 <__udivmodsi4>:
    3b44:	a1 e2       	ldi	r26, 0x21	; 33
    3b46:	1a 2e       	mov	r1, r26
    3b48:	aa 1b       	sub	r26, r26
    3b4a:	bb 1b       	sub	r27, r27
    3b4c:	fd 01       	movw	r30, r26
    3b4e:	0d c0       	rjmp	.+26     	; 0x3b6a <__udivmodsi4_ep>

00003b50 <__udivmodsi4_loop>:
    3b50:	aa 1f       	adc	r26, r26
    3b52:	bb 1f       	adc	r27, r27
    3b54:	ee 1f       	adc	r30, r30
    3b56:	ff 1f       	adc	r31, r31
    3b58:	a2 17       	cp	r26, r18
    3b5a:	b3 07       	cpc	r27, r19
    3b5c:	e4 07       	cpc	r30, r20
    3b5e:	f5 07       	cpc	r31, r21
    3b60:	20 f0       	brcs	.+8      	; 0x3b6a <__udivmodsi4_ep>
    3b62:	a2 1b       	sub	r26, r18
    3b64:	b3 0b       	sbc	r27, r19
    3b66:	e4 0b       	sbc	r30, r20
    3b68:	f5 0b       	sbc	r31, r21

00003b6a <__udivmodsi4_ep>:
    3b6a:	66 1f       	adc	r22, r22
    3b6c:	77 1f       	adc	r23, r23
    3b6e:	88 1f       	adc	r24, r24
    3b70:	99 1f       	adc	r25, r25
    3b72:	1a 94       	dec	r1
    3b74:	69 f7       	brne	.-38     	; 0x3b50 <__udivmodsi4_loop>
    3b76:	60 95       	com	r22
    3b78:	70 95       	com	r23
    3b7a:	80 95       	com	r24
    3b7c:	90 95       	com	r25
    3b7e:	9b 01       	movw	r18, r22
    3b80:	ac 01       	movw	r20, r24
    3b82:	bd 01       	movw	r22, r26
    3b84:	cf 01       	movw	r24, r30
    3b86:	08 95       	ret

00003b88 <__prologue_saves__>:
    3b88:	2f 92       	push	r2
    3b8a:	3f 92       	push	r3
    3b8c:	4f 92       	push	r4
    3b8e:	5f 92       	push	r5
    3b90:	6f 92       	push	r6
    3b92:	7f 92       	push	r7
    3b94:	8f 92       	push	r8
    3b96:	9f 92       	push	r9
    3b98:	af 92       	push	r10
    3b9a:	bf 92       	push	r11
    3b9c:	cf 92       	push	r12
    3b9e:	df 92       	push	r13
    3ba0:	ef 92       	push	r14
    3ba2:	ff 92       	push	r15
    3ba4:	0f 93       	push	r16
    3ba6:	1f 93       	push	r17
    3ba8:	cf 93       	push	r28
    3baa:	df 93       	push	r29
    3bac:	cd b7       	in	r28, 0x3d	; 61
    3bae:	de b7       	in	r29, 0x3e	; 62
    3bb0:	ca 1b       	sub	r28, r26
    3bb2:	db 0b       	sbc	r29, r27
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	09 94       	ijmp

00003bc0 <__epilogue_restores__>:
    3bc0:	2a 88       	ldd	r2, Y+18	; 0x12
    3bc2:	39 88       	ldd	r3, Y+17	; 0x11
    3bc4:	48 88       	ldd	r4, Y+16	; 0x10
    3bc6:	5f 84       	ldd	r5, Y+15	; 0x0f
    3bc8:	6e 84       	ldd	r6, Y+14	; 0x0e
    3bca:	7d 84       	ldd	r7, Y+13	; 0x0d
    3bcc:	8c 84       	ldd	r8, Y+12	; 0x0c
    3bce:	9b 84       	ldd	r9, Y+11	; 0x0b
    3bd0:	aa 84       	ldd	r10, Y+10	; 0x0a
    3bd2:	b9 84       	ldd	r11, Y+9	; 0x09
    3bd4:	c8 84       	ldd	r12, Y+8	; 0x08
    3bd6:	df 80       	ldd	r13, Y+7	; 0x07
    3bd8:	ee 80       	ldd	r14, Y+6	; 0x06
    3bda:	fd 80       	ldd	r15, Y+5	; 0x05
    3bdc:	0c 81       	ldd	r16, Y+4	; 0x04
    3bde:	1b 81       	ldd	r17, Y+3	; 0x03
    3be0:	aa 81       	ldd	r26, Y+2	; 0x02
    3be2:	b9 81       	ldd	r27, Y+1	; 0x01
    3be4:	ce 0f       	add	r28, r30
    3be6:	d1 1d       	adc	r29, r1
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	ed 01       	movw	r28, r26
    3bf4:	08 95       	ret

00003bf6 <_exit>:
    3bf6:	f8 94       	cli

00003bf8 <__stop_program>:
    3bf8:	ff cf       	rjmp	.-2      	; 0x3bf8 <__stop_program>
